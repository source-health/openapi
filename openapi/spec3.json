{
  "openapi": "3.0.0",
  "info": {
    "version": "1.0",
    "title": "Source Health API",
    "description": "The Source HTTP API",
    "contact": {
      "name": "Source Support",
      "email": "support@sourcehealth.com",
      "url": "https://sourcehealth.com/docs/api"
    }
  },
  "servers": [
    {
      "url": "https://api.sourcehealth.com",
      "description": "Source Production"
    }
  ],
  "security": [
    {
      "bearer": []
    },
    {
      "basic": []
    }
  ],
  "tags": [],
  "paths": {
    "/v1/accounts/{id}": {
      "get": {
        "summary": "Retrieve an Account",
        "description": "Retrieves the details of an account.\n\nSupply the unique identifier of the account, or `current` to access your current account.",
        "tags": [
          "Account"
        ],
        "parameters": [
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "id",
            "schema": {
              "type": "string",
              "description": "Unique ID of the account.",
              "example": "act_KbBlmtoXCFK7Km7S93Nu"
            },
            "required": true,
            "description": "Unique ID of the account."
          }
        ],
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/account"
                }
              }
            }
          }
        },
        "x-methodName": "retrieve",
        "x-belongsToResource": "account"
      },
      "post": {
        "summary": "Update an Account",
        "description": "Updates an account. At this time you can only update the account name and subdomain.\n\nAny parameters that are not provided in the request will be left unchanged.",
        "tags": [
          "Account"
        ],
        "parameters": [
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "id",
            "schema": {
              "type": "string",
              "description": "Unique ID of the account.",
              "example": "act_KbBlmtoXCFK7Km7S93Nu"
            },
            "required": true,
            "description": "Unique ID of the account."
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Name for the account.",
                    "example": "Source Health"
                  },
                  "subdomain": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Subdomain for the account.",
                    "example": "sourcehealth"
                  },
                  "time_zone": {
                    "type": "string",
                    "description": "The time zone identifier for this account. Account level time zone identifiers are used to determine when \"midnight\" exists for your practice, and feed into Source's understanding of your organization's business hours. Note that each user has their own time zone as well, which is what is used when declaring user availability and booking appointments.",
                    "example": "America/New_York"
                  },
                  "theme": {
                    "type": "object",
                    "properties": {
                      "colors": {
                        "type": "object",
                        "properties": {
                          "primary": {
                            "type": "string",
                            "nullable": true,
                            "description": "Color hex for the primary interface elements such as buttons."
                          },
                          "primary_text": {
                            "type": "string",
                            "nullable": true,
                            "description": "Color hex for text that appears on primary interface elements."
                          },
                          "accent": {
                            "type": "string",
                            "nullable": true,
                            "description": "Color hex for the accent elements like checkboxes, radio buttons, links, and similar second-level indications."
                          },
                          "accent_text": {
                            "type": "string",
                            "nullable": true,
                            "description": "Color hex for text that appears on accent interface elements."
                          },
                          "surface": {
                            "type": "string",
                            "nullable": true,
                            "description": "Color hex for the color of the primary page background."
                          },
                          "surface_text": {
                            "type": "string",
                            "nullable": true,
                            "description": "Color hex for the text that appears directly on the primary surface."
                          },
                          "component": {
                            "type": "string",
                            "nullable": true,
                            "description": "Color hex for the background color of elements sitting on the surface, such as a card."
                          },
                          "component_text": {
                            "type": "string",
                            "nullable": true,
                            "description": "Color hex for the text that appears within a component element."
                          },
                          "border": {
                            "type": "string",
                            "nullable": true,
                            "description": "Color hex for the border color on interactive elements."
                          }
                        },
                        "required": [
                          "primary",
                          "primary_text",
                          "accent",
                          "accent_text",
                          "surface",
                          "surface_text",
                          "component",
                          "component_text",
                          "border"
                        ],
                        "description": "Brand colors used throughout the application."
                      },
                      "shapes": {
                        "type": "object",
                        "properties": {
                          "border_radius": {
                            "type": "string",
                            "nullable": true,
                            "description": "Border radius, defined in pixels."
                          },
                          "shadows": {
                            "type": "boolean",
                            "description": "Whether or not to enable default shadows on elements."
                          }
                        },
                        "required": [
                          "border_radius",
                          "shadows"
                        ],
                        "description": "Brand settings that affect the shape of elements."
                      }
                    },
                    "required": [
                      "colors",
                      "shapes"
                    ],
                    "description": "Theme configuration to apply to the account."
                  },
                  "logo": {
                    "type": "string",
                    "example": "file_0A9zrLzCO7KPcnIbs40e",
                    "nullable": true,
                    "description": "Pointer to the file to use as the logo for this account. Must be of purpose account_logo."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/account"
                }
              }
            }
          }
        },
        "x-methodName": "update",
        "x-belongsToResource": "account"
      }
    },
    "/v1/scheduling/appointments": {
      "post": {
        "summary": "Create an Appointment",
        "description": "Creates a new appointment in Source.\n\nBy default, you cannot create an appointment for a participant with a conflict during the time of the appointment. If desired, you can disable this check by setting the skip_constraints param to true.\n\nYou are also able to call the create appointment API with a member token when you are building a member-facing experience. In that case, members are only able to book an appointment for themselves. Appointments created by members must follow the rules of the selected appointment type, and the constraint checks may not be bypassed.",
        "tags": [
          "Appointment"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "appointment_type": {
                    "type": "string",
                    "description": "Unique ID or key of the appointment type for this appointment.",
                    "example": "intake_visit"
                  },
                  "location": {
                    "type": "string",
                    "example": "loc_EtTXhFHUtCXO1JWBd8TN",
                    "nullable": true,
                    "description": "The physical location where the appointment should be booked. Setting the identifier of a physical location on this property is independent of whether you wish there to be a video call or other modality associated with the appointment. By default, no location is associated with the appointment."
                  },
                  "time_zone": {
                    "type": "string",
                    "description": "Time zone in which the appointment should be scheduled. Changing this value has no impact on the actual time of the appointment, which is always provided in UTC. However, this value may be used when formatting the appointment time for representation, and recalculating the UTC time in the event of a time zone rule change.",
                    "example": "America/New_York"
                  },
                  "member": {
                    "type": "string",
                    "example": "mem_5QW8j1oKqQjNaPk4Hv3f",
                    "nullable": true,
                    "description": "The member to which this appointment belongs. Setting a member on this property will allow the member to access this appointment via the API. Members can only view appointments which are directly associated with them."
                  },
                  "start_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Start time for this appointment. Appointments can be created which start in the past, if you want to record an appointment that has already occured. Appointment times must always be provided in UTC, regardless of the value of the time_zone property.",
                    "example": "2021-05-13T16:33:00.000Z"
                  },
                  "duration": {
                    "type": "number",
                    "maximum": 1440,
                    "description": "The duration of the appointment, in minutes. If no duration is provided, it will be automatically determined based on the appointment type provided.",
                    "example": 30
                  },
                  "end_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "End time for this appointment. When creating an appointment, you can optionally specify either a duration or an end date. If both are specified, the end_at timestamp will take precedence. If neither are provided, the appointment type's default duration will be used.",
                    "example": "2021-05-13T16:33:00.000Z"
                  },
                  "subject": {
                    "type": "string",
                    "maxLength": 255,
                    "nullable": true,
                    "description": "Subject of this appointment. This will be shown to all participants. It may also be transmitted via email or SMS, so it should not include PHI.",
                    "example": "Pre-Op Check-In"
                  },
                  "instructions": {
                    "type": "string",
                    "maxLength": 1024,
                    "nullable": true,
                    "description": "Member instructions for the appointment, which will be shared in advance. It may also be transmitted via email or SMS, so it should not include PHI.",
                    "example": "Please fast for 12 hours prior to your appointment"
                  },
                  "participants": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "participant": {
                          "type": "string",
                          "example": "usr_qoGndHzx8KwdYsEByt9X",
                          "description": "The participant to include on this appointment. Must be a valid user identifier."
                        }
                      },
                      "required": [
                        "participant"
                      ]
                    },
                    "description": "The participants that should be included on this appointment. At least one participant is required."
                  },
                  "skip_constraints": {
                    "type": "boolean",
                    "description": "By default, Source runs a number of checks to prevent you from creating appointments that seem unsafe. For example, we prevent you from creating appointments that take place in the past, from creating appointments outside of the bookable window for an appointment type, from creating appointments that require licensure with unlicensed participants, or from creating appointments during which one of the participants has a conflict.\n\nWhen calling the appointments endpoints with your API key, you can override this behavior by setting the skip_constraints param to true, allowing you to create your appointment. Note that some checks, such as ensuring the appointment end time is after the start time, cannot be bypassed.\n\nMember tokens are unable to provide this parameter, and will receive a permissions error if they attempt to."
                  },
                  "video_call": {
                    "type": "object",
                    "properties": {
                      "provider": {
                        "type": "string",
                        "enum": [
                          "custom",
                          "source"
                        ],
                        "description": "The video call provider. Source automatically generates video call links for every appointment type that is configured to do so. Alternatively, you can use the value `custom` to provide your own video call link.  When providing `custom`, you must provide a join URL and can optionally include a token or passcode.",
                        "example": "custom"
                      },
                      "join_url": {
                        "type": "string",
                        "nullable": true,
                        "description": "The URL to access the video call. Anyone with this link will be able to request to join this video call, so you should ensure it is kept safe. Only for 'custom' video calls - for 'source' video calls, we generate the join URL.",
                        "example": "https://video-provider.example.com/?join=eeh4Eec1ahBoquohshe1fooh"
                      },
                      "passcode": {
                        "type": "string",
                        "nullable": true,
                        "description": "Passcode used when joining the call. This value is not used for Source-generated video calls, but it may be used if using a custom video provider that requires a passcode.",
                        "example": "letmein"
                      }
                    },
                    "required": [
                      "provider"
                    ],
                    "nullable": true,
                    "description": "Set the details of a video call, if this appointment will be a video visit. By default any appointment for an appointment type with `video_enabled: true` will have a Source video call created when the appointment is created.\n\nMembers may not override the video call settings of an appointment, but users and API keys are able to set `provider: 'source'` to create a Source-managed call, or provide the details of a third-party video call.\n\nTo remove all video call details, set this parameter to null."
                  },
                  "recurrence": {
                    "type": "object",
                    "properties": {
                      "frequency": {
                        "type": "string",
                        "enum": [
                          "weekly"
                        ],
                        "description": "How often the appointments should recur. Source only supports 'weekly' at this time (including \"every N weeks\", using 'interval').",
                        "example": "weekly"
                      },
                      "interval": {
                        "type": "number",
                        "minimum": 1,
                        "maximum": 20,
                        "description": "How many of the `frequency` intervals between each appointment, i.e. 'every N weeks'.",
                        "example": 1
                      },
                      "count": {
                        "type": "number",
                        "minimum": 1,
                        "maximum": 52,
                        "description": "How many total appointments should be in the series.\n\nOne and only one of `count` or `until` must be set."
                      },
                      "until": {
                        "type": "string",
                        "format": "date",
                        "description": "The date at which the recurring series will end. This date is inclusive, so if an appointment instance falls on this date, that appointment will be booked. One and only one of `count` or `until` must be set."
                      },
                      "days_of_week": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "enum": [
                            "monday",
                            "tuesday",
                            "wednesday",
                            "thursday",
                            "friday",
                            "saturday",
                            "sunday"
                          ]
                        },
                        "description": "The days of the week on which appointments should occur. By providing multiple days, you can indicate multiple recurring appointments per week."
                      }
                    },
                    "required": [
                      "frequency",
                      "interval",
                      "days_of_week"
                    ],
                    "nullable": true,
                    "description": "Defines the configuration of a recurring appointment. Appointments created as recurring series will have `series_parent` = true, and Source will automatically create an appointment for each available time in the series.\n\nUpdating the series 'parent' appointment will update any unmodified future appointments in the series, except for the start time, end times or duration. Updating an individual appointment within the series will prevent the modified fields from being updated when the series appointment is updated.  by default, create a series of recurring appointments. Expressed as a subset of RRULE fields (see [rrule.js docs](https://github.com/jakubroztocil/rrule#api) for more context, but note that we only support a limited subset of the full RRULE spec).\n\nNote that creating an appointment using an appointment type that defines default 'recurrence' configuration will not automatically result in a recurring series being created. You must define the full recurrence configuration on the appointment itself.\n\nNote: the recurring appointments feature is currently in preview. Please contact Source for more details."
                  }
                },
                "required": [
                  "appointment_type",
                  "time_zone",
                  "start_at",
                  "participants"
                ]
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/appointment"
                }
              }
            }
          }
        },
        "x-methodName": "create",
        "x-belongsToResource": "appointment"
      },
      "get": {
        "summary": "List all Appointments",
        "description": "List all appointments in a given time range, or for a given set of participants.\n\nBy default, this method will not return canceled appointments. You can optionally specify include_canceled to true in order to include canceled appointments.",
        "tags": [
          "Appointment"
        ],
        "parameters": [
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "ending_before",
            "schema": {
              "type": "string",
              "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_bar, your subsequent call can include ending_before=obj_bar in order to fetch the previous page of the list."
            },
            "required": false,
            "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_bar, your subsequent call can include ending_before=obj_bar in order to fetch the previous page of the list."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "starting_after",
            "schema": {
              "type": "string",
              "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include starting_after=obj_foo in order to fetch the next page of the list."
            },
            "required": false,
            "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include starting_after=obj_foo in order to fetch the next page of the list."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "limit",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100."
            },
            "required": false,
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "sort",
            "schema": {
              "type": "string",
              "enum": [
                "start_at",
                "end_at",
                "created_at",
                "-start_at",
                "-end_at",
                "-created_at"
              ],
              "description": "Sort field for the results. A '-' prefix indicates sorting by that field in descending order, otherwise the order will be ascending.",
              "example": "start_at"
            },
            "required": false,
            "description": "Sort field for the results. A '-' prefix indicates sorting by that field in descending order, otherwise the order will be ascending."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "status",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "booked",
                  "confirmed",
                  "no_show",
                  "completed",
                  "canceled"
                ]
              },
              "description": "Filter appointments by their status. You may provide multiple statuses."
            },
            "required": false,
            "description": "Filter appointments by their status. You may provide multiple statuses."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "member",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "mem_5QW8j1oKqQjNaPk4Hv3f"
              },
              "description": "Filter appointments by the member. This parameter is inferred when called as a member."
            },
            "required": false,
            "description": "Filter appointments by the member. This parameter is inferred when called as a member."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "participant",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "usr_qoGndHzx8KwdYsEByt9X"
              },
              "description": "Filter appointments by their participants. Participants must be provided as a list of user identifiers."
            },
            "required": false,
            "description": "Filter appointments by their participants. Participants must be provided as a list of user identifiers."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "type",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Filter appointments by their type. You may provide appointment type identifiers or keys."
            },
            "required": false,
            "description": "Filter appointments by their type. You may provide appointment type identifiers or keys."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "externally_managed",
            "schema": {
              "type": "boolean",
              "description": "Filter appointments by whether they are externally managed or not (e.g. imported from a Google calendar)."
            },
            "required": false,
            "description": "Filter appointments by whether they are externally managed or not (e.g. imported from a Google calendar)."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "include_series_parent",
            "schema": {
              "type": "boolean",
              "description": "When set to true, include the `series_parent` appointments that represent the parent appointments for recurring series."
            },
            "required": false,
            "description": "When set to true, include the `series_parent` appointments that represent the parent appointments for recurring series."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "series",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "appt_mTvufYJBBgYmbEAEZ6rE"
              },
              "description": "Filter appointments to those within the recurring series specified by the ID of the `series_parent` appointment(s)."
            },
            "required": false,
            "description": "Filter appointments to those within the recurring series specified by the ID of the `series_parent` appointment(s)."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "start_at",
            "schema": {
              "type": "object",
              "properties": {
                "lt": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Return results where the start_at field is less than this value."
                },
                "lte": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Return results where the start_at field is less than or equal to this value."
                },
                "gt": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Return results where the start_at field is greater than this value."
                },
                "gte": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Return results where the start_at field is greater than or equal to this value."
                }
              },
              "description": "A time based range filter on the list based on the object start_at field. For example `?start_at[gt]=2021-05-10T16:51:38.075Z&start_at[lte]=2021-05-26T16:51:38.075Z`. The value is a dictionary with the following:"
            },
            "required": false,
            "description": "A time based range filter on the list based on the object start_at field. For example `?start_at[gt]=2021-05-10T16:51:38.075Z&start_at[lte]=2021-05-26T16:51:38.075Z`. The value is a dictionary with the following:"
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "end_at",
            "schema": {
              "type": "object",
              "properties": {
                "lt": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Return results where the end_at field is less than this value."
                },
                "lte": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Return results where the end_at field is less than or equal to this value."
                },
                "gt": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Return results where the end_at field is greater than this value."
                },
                "gte": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Return results where the end_at field is greater than or equal to this value."
                }
              },
              "description": "A time based range filter on the list based on the object end_at field. For example `?end_at[gt]=2021-05-10T16:51:38.075Z&end_at[lte]=2021-05-26T16:51:38.075Z`. The value is a dictionary with the following:"
            },
            "required": false,
            "description": "A time based range filter on the list based on the object end_at field. For example `?end_at[gt]=2021-05-10T16:51:38.075Z&end_at[lte]=2021-05-26T16:51:38.075Z`. The value is a dictionary with the following:"
          }
        ],
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "object": {
                      "type": "string",
                      "default": "list",
                      "enum": [
                        "list"
                      ],
                      "example": "list",
                      "description": "Always `list`."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/appointment"
                      },
                      "description": "Array of results"
                    },
                    "has_more": {
                      "type": "boolean",
                      "description": "Contains `true` if there is another page of results available."
                    }
                  },
                  "required": [
                    "object",
                    "data",
                    "has_more"
                  ]
                }
              }
            }
          }
        },
        "x-methodName": "list",
        "x-belongsToResource": "appointment"
      }
    },
    "/v1/scheduling/appointments/{id}": {
      "post": {
        "summary": "Update an Appointment",
        "description": "Updates an appointment in Source.\n\nParameters that are omitted from this endpoint will be left untouched. When changing the time of an appointment, you can provide an updated start_at and duration. If you omit one of these two, it will be inferred from the current state of the event.\n\nWhen adding participants to an existing appointment, Source will only perform conflict checks on the newly added participants, ignoring any potential conflicts for participants who are already on the appointment. You may bypass this check by setting the `skip_constraints` param to true.",
        "tags": [
          "Appointment"
        ],
        "parameters": [
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "id",
            "schema": {
              "type": "string",
              "example": "appt_mTvufYJBBgYmbEAEZ6rE",
              "description": "Unique ID of the appointment."
            },
            "required": true,
            "description": "Unique ID of the appointment."
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "appointment_type": {
                    "type": "string",
                    "description": "Unique ID or key of the appointment type for this appointment.",
                    "example": "intake_visit"
                  },
                  "time_zone": {
                    "type": "string",
                    "description": "Time zone in which the appointment should be scheduled. Changing this value has no impact on the actual time of the appointment, which is always provided in UTC. However, this value may be used when formatting the appointment time for representation, and recalculating the UTC time in the event of a time zone rule change.",
                    "example": "America/New_York"
                  },
                  "start_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Start time for this appointment. Appointments can be created which start in the past, if you want to record an appointment that has already occured. Appointment times must always be provided in UTC, regardless of the value of the time_zone property.",
                    "example": "2021-05-13T16:33:00.000Z"
                  },
                  "duration": {
                    "type": "number",
                    "maximum": 1440,
                    "description": "The duration of the appointment, in minutes. If no duration is provided, it will be automatically determined based on the appointment type provided.",
                    "example": 30
                  },
                  "end_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "End time for this appointment. When creating an appointment, you can optionally specify either a duration or an end date. If both are specified, the end_at timestamp will take precedence. If neither are provided, the appointment type's default duration will be used.",
                    "example": "2021-05-13T16:33:00.000Z"
                  },
                  "subject": {
                    "type": "string",
                    "maxLength": 255,
                    "nullable": true,
                    "description": "Subject of this appointment. This will be shown to all participants. It may also be transmitted via email or SMS, so it should not include PHI.",
                    "example": "Pre-Op Check-In"
                  },
                  "instructions": {
                    "type": "string",
                    "maxLength": 1024,
                    "nullable": true,
                    "description": "Member instructions for the appointment, which will be shared in advance. It may also be transmitted via email or SMS, so it should not include PHI.",
                    "example": "Please fast for 12 hours prior to your appointment"
                  },
                  "participants": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "participant": {
                          "type": "string",
                          "example": "usr_qoGndHzx8KwdYsEByt9X",
                          "description": "The participant to include on this appointment. Must be a valid user identifier."
                        }
                      },
                      "required": [
                        "participant"
                      ]
                    },
                    "description": "The participants that should be included on this appointment. At least one participant is required."
                  },
                  "skip_constraints": {
                    "type": "boolean",
                    "description": "By default, Source runs a number of checks to prevent you from creating appointments that seem unsafe. For example, we prevent you from creating appointments that take place in the past, from creating appointments outside of the bookable window for an appointment type, from creating appointments that require licensure with unlicensed participants, or from creating appointments during which one of the participants has a conflict.\n\nWhen calling the appointments endpoints with your API key, you can override this behavior by setting the skip_constraints param to true, allowing you to create your appointment. Note that some checks, such as ensuring the appointment end time is after the start time, cannot be bypassed.\n\nMember tokens are unable to provide this parameter, and will receive a permissions error if they attempt to."
                  },
                  "video_call": {
                    "type": "object",
                    "properties": {
                      "provider": {
                        "type": "string",
                        "enum": [
                          "custom",
                          "source"
                        ],
                        "description": "The video call provider. Source automatically generates video call links for every appointment type that is configured to do so. Alternatively, you can use the value `custom` to provide your own video call link.  When providing `custom`, you must provide a join URL and can optionally include a token or passcode.",
                        "example": "custom"
                      },
                      "join_url": {
                        "type": "string",
                        "nullable": true,
                        "description": "The URL to access the video call. Anyone with this link will be able to request to join this video call, so you should ensure it is kept safe. Only for 'custom' video calls - for 'source' video calls, we generate the join URL.",
                        "example": "https://video-provider.example.com/?join=eeh4Eec1ahBoquohshe1fooh"
                      },
                      "passcode": {
                        "type": "string",
                        "nullable": true,
                        "description": "Passcode used when joining the call. This value is not used for Source-generated video calls, but it may be used if using a custom video provider that requires a passcode.",
                        "example": "letmein"
                      }
                    },
                    "required": [
                      "provider"
                    ],
                    "nullable": true,
                    "description": "Set the details of a video call, if this appointment will be a video visit. By default any appointment for an appointment type with `video_enabled: true` will have a Source video call created when the appointment is created.\n\nMembers may not override the video call settings of an appointment, but users and API keys are able to set `provider: 'source'` to create a Source-managed call, or provide the details of a third-party video call.\n\nTo remove all video call details, set this parameter to null."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/appointment"
                }
              }
            }
          }
        },
        "x-methodName": "update",
        "x-belongsToResource": "appointment"
      },
      "get": {
        "summary": "Retrieve an Appointment",
        "description": "Retrieves an existing appointment by its unique identifier.\n\nAppointments can be accessed by users in your organization. Additionally, members can access their own appointments provided that they've been added as a participant.",
        "tags": [
          "Appointment"
        ],
        "parameters": [
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "id",
            "schema": {
              "type": "string",
              "example": "appt_mTvufYJBBgYmbEAEZ6rE",
              "description": "Unique ID of the appointment."
            },
            "required": true,
            "description": "Unique ID of the appointment."
          }
        ],
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/appointment"
                }
              }
            }
          }
        },
        "x-methodName": "retrieve",
        "x-belongsToResource": "appointment"
      }
    },
    "/v1/scheduling/appointments/{id}/transition": {
      "post": {
        "summary": "Transition an Appointment",
        "description": "Transitions an existing appointment into another status.\n\nCanceled appointments will not show up by default when listing appointments, but they can be optionally requested. Appointments must be canceled before they can be deleted. Once an appointment is canceled, it can no longer be modified.\n\nWhen canceling an appointment that is part of a series, you can optionally set `apply_to_series: true`, which will additionally cancel any appointments in the series after the given appointment.",
        "tags": [
          "Appointment"
        ],
        "parameters": [
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "id",
            "schema": {
              "type": "string",
              "example": "appt_mTvufYJBBgYmbEAEZ6rE",
              "description": "Unique ID of the appointment."
            },
            "required": true,
            "description": "Unique ID of the appointment."
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string",
                    "enum": [
                      "booked",
                      "confirmed",
                      "no_show",
                      "completed",
                      "canceled"
                    ]
                  },
                  "apply_to_series": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "status"
                ]
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/appointment"
                }
              }
            }
          }
        },
        "x-methodName": "transition",
        "x-belongsToResource": "appointment"
      }
    },
    "/v1/scheduling/appointments/{id}/cancel": {
      "post": {
        "summary": "Cancel an Appointment",
        "description": "Cancels an existing appointment.\n\nCanceled appointments will not show up by default when listing appointments, but they can be optionally requested. Appointments must be canceled before they can be deleted. Once an appointment is canceled, it can no longer be modified.",
        "tags": [
          "Appointment"
        ],
        "parameters": [
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "id",
            "schema": {
              "type": "string",
              "example": "appt_mTvufYJBBgYmbEAEZ6rE",
              "description": "Unique ID of the appointment."
            },
            "required": true,
            "description": "Unique ID of the appointment."
          }
        ],
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/appointment"
                }
              }
            }
          }
        },
        "x-methodName": "cancel",
        "x-belongsToResource": "appointment"
      }
    },
    "/v1/scheduling/appointment_types": {
      "post": {
        "summary": "Create an Appointment Type",
        "description": "Creates a new appointment type on Source.\n\nAfter creating an appointment type, you can use the availability endpoints to begin searching your team and scheduling them.",
        "tags": [
          "Appointment Type"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "key": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 255,
                    "pattern": "^[a-z0-9_-]+$",
                    "description": "Unique key for this appointment type. You can use this when creating appointments via the API.",
                    "example": "intake_visit"
                  },
                  "name": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 255,
                    "description": "Name of this appointment type. This will be visible to members when booking appointments, and to users when using the Source UI.",
                    "example": "Intake Visit"
                  },
                  "description": {
                    "type": "string",
                    "maxLength": 1024,
                    "nullable": true,
                    "description": "A few sentence description of this appointment type. This description will be shown to members when attempting to book an appointment of this type. While not required, it can be helpful to share what the member might expect to happen during this appointment or any resources thay should bring.",
                    "example": "Meet with your new care team and complete a baseline visit"
                  },
                  "default_instructions": {
                    "type": "string",
                    "maxLength": 1024,
                    "nullable": true,
                    "description": "The default instructions that should be provided to members when booking this type of appointment. When creating appointments via the API, these instructions will automatically be applied to the appointment unless overriden. Members are not able to change the instructions on an appointment when creating one, and will also receive this set of instructions by default.",
                    "example": "Please fast for 12 hours before your visit."
                  },
                  "color": {
                    "type": "string",
                    "enum": [
                      "gray",
                      "blue",
                      "teal",
                      "yellow",
                      "green",
                      "red",
                      "orange",
                      "purple"
                    ],
                    "description": "The color used when showing appointments of this type on the calendar. This is primarily used in the Source UI, but you're able to use this in your own system as well. If no color is set, it will default to gray.",
                    "example": "blue"
                  },
                  "duration": {
                    "type": "number",
                    "minimum": 5,
                    "maximum": 1440,
                    "description": "The default duration to apply to appointments of this type. Default durations must be in multiples of 5 minutes. For example, 5 and 10 are valid durations, but 6 and 14 are not. Always measured in minutes. Defaults to 30.",
                    "example": 30
                  },
                  "slot_interval": {
                    "type": "number",
                    "minimum": 5,
                    "maximum": 1440,
                    "description": "The interval between two bookable slots for appointments of this type. Like durations, intervals must also be in multiples of 5 minutes. Always measured in minutes. Defaults to 15.",
                    "example": 15
                  },
                  "bookable": {
                    "type": "boolean",
                    "description": "Whether or not this appointment can be booked directly by a member. If set to false, this appointment can only be scheduled by a user. Note that appointment types with bookable set to false are still visible to members, as they may still have an appointment of that type scheduled. As a result, this does not function as a security or privacy control. Defaults to true.",
                    "example": false
                  },
                  "buffer_before": {
                    "type": "number",
                    "minimum": 0,
                    "maximum": 60,
                    "description": "Provides an additional buffer of time before an appointment to prepare. Buffers do not change the appointment duration, but rather make the participants appear \"busy\" for a certain amount of time before the appointment begins. Measured in minutes. Must not be greater than 60 minutes.",
                    "example": 0
                  },
                  "buffer_after": {
                    "type": "number",
                    "minimum": 0,
                    "maximum": 60,
                    "description": "Provides an additional buffer of time after an appointment to wrap up. Buffers do not change the appointment duration, but rather make the participants appear \"busy\" for a certain amount of time after the appointment ends. Measured in minutes. Must not be greater than 60 minutes.",
                    "example": 5
                  },
                  "planning_horizon": {
                    "type": "number",
                    "minimum": 0,
                    "maximum": 365,
                    "description": "Controls how far in the future appointments can be booked. By default, appointment types have a 60 day planning horizon. You can extend this if you'd like members to be able to book appointments farther in the future. Omitting this field will set the planning horizon to the maximum supported value of 365 days.",
                    "example": 60
                  },
                  "minimum_notice": {
                    "type": "number",
                    "minimum": 0,
                    "description": "Controls the minimum amount of advance notice in order to book appointments of this type. For example, if this parameter is set to 60, members will only be able to book appointments starting at least 60 minutes from now. This option is only considered when members are booking appointments directly. Users can book appointments at any time, including appointments in the past. Measured in minutes.",
                    "example": 60
                  },
                  "routing_strategy": {
                    "type": "string",
                    "enum": [
                      "care_team_required",
                      "care_team_preferred",
                      "care_team_hybrid",
                      "round_robin"
                    ],
                    "description": "Defines how an incoming slot availability query for the appointment type should be routed to possible users. Because of the complexity in routing, it's best explained by example. Assume you have created an appointment type that can be fulfilled by users in the Physicians group. The behavior of each routing strategy is as follows:\n\n- care_team_required - Appointment slots will only be shown for Physicians who are on the member's care team. If there are   no Physicians on the member's care team, the request will fail.\n\n- care_team_preferred - Appointment slots will be shown for any Physicians on the member's care team.   If the Physicians on the care team aren't available, slots will not be returned.   If there are no Physicians on the member's care team, then slots will be returned for any available Physician.\n\n- care_team_hybrid - Appointment slots will be shown for all users in the Physicians group. For any given appointment slot,   if a Physician of the member's care team is available, they will be preferred. However, slots for other Physicians will   still be shown.\n\n- round_robin - Appointment slots will be shown for all users in the Physicians group, and no preference will be given to   users who are also on the member's care team.\n\nBy default, Source uses the care_team_preferred strategy to provide continuity of care and ensure patients have a consistent experience. However, this is not always the right booking strategy for all practices. In fact, even for a single practice, you may sometimes need to reach for another routing method.\n\nIf you have a need for a routing model that isn't covered above, please don't hesitate to reach out to our team.",
                    "example": "care_team_preferred"
                  },
                  "groups": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "example": "grp_IlGhgsstvgsagl6lV89Q"
                    },
                    "description": "Select the groups that should be evaluated when booking an appointment. If no group is specified, you will not be able to use the appointment slot API to find bookable slots. When using the appointment slot API, you can specify more specific users and groups. For example, if your appointment type is linked to the group \"Physicians,\" and when calling the slot API you provide an include parameter for the group \"Nurses,\" you only receive available slots for users who are in both the Physicians and Nurses group.",
                    "example": [
                      "grp_IlGhgsstvgsagl6lV89Q"
                    ]
                  },
                  "license_types": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code"
                      ]
                    },
                    "nullable": true,
                    "description": "The user license(s) that are required to perform appointments of this type. When looking for appointment slots, only the availability of licensed users will be returned. When booking an appointment without the skip_constraints parameter, any licensed user must have a matching license type, otherwise a warning will be returned. If more than one license code is provided, a licensed user with any of the license codes can participate in the appointment. Providing any value will override the entire array. Providing null or an empty array will empty out the array.",
                    "example": [
                      {
                        "code": "MD"
                      }
                    ]
                  },
                  "video_enabled": {
                    "type": "boolean",
                    "description": "Whether or not to create a video call for appointments of this type. Defaults to false.",
                    "example": true
                  },
                  "reminders": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "when": {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "default": "before",
                              "enum": [
                                "before"
                              ],
                              "example": "before",
                              "description": "The trigger for when this reminder should be scheduled. Currently, the only supported value is `before`, indicating that this reminder should be triggered based on the requested duration prior to the start of the appointment."
                            },
                            "unit": {
                              "type": "string",
                              "enum": [
                                "minute",
                                "hour",
                                "day"
                              ],
                              "description": "The unit of time used in this reminder configuration. Units are interpreted within the appointment's scheduled time zone, meaning 24 hours and 1 day are not necessarily the same if the reminder window spans daylight savings."
                            },
                            "time": {
                              "type": "number",
                              "description": "The number of units before the appointment at which this reminder should trigger. Must be an integer greater than zero."
                            }
                          },
                          "required": [
                            "type",
                            "unit",
                            "time"
                          ]
                        }
                      },
                      "required": [
                        "when"
                      ]
                    },
                    "description": "The reminder configuration for this appointment type. Each appointment created with this type will inherit the reminder configuration of the appointment type. Changes to reminder configuration will be applied to all future appointments.\n\nYou may configure up to five reminders per appointment type."
                  },
                  "recurrence": {
                    "type": "object",
                    "properties": {
                      "frequency": {
                        "type": "string",
                        "enum": [
                          "weekly"
                        ],
                        "description": "How often the appointments should recur. Source only supports 'weekly' at this time (including \"every N weeks\", using 'interval')",
                        "example": "weekly"
                      },
                      "interval": {
                        "type": "number",
                        "minimum": 1,
                        "maximum": 20,
                        "description": "How many of the `frequency` intervals between each appointment, i.e. 'every N weeks'.",
                        "example": 1
                      },
                      "count": {
                        "type": "number",
                        "minimum": 1,
                        "maximum": 52,
                        "description": "How many total appointments should be in the series.\n\nOne and only one of `count` or `duration` must be set."
                      },
                      "duration": {
                        "type": "object",
                        "properties": {
                          "amount": {
                            "type": "number"
                          },
                          "unit": {
                            "type": "string",
                            "enum": [
                              "days",
                              "weeks"
                            ]
                          }
                        },
                        "required": [
                          "amount",
                          "unit"
                        ],
                        "description": "Total length of time, expressed in number of days or weeks.\n\nOne and only one of `count` or `duration` must be set."
                      }
                    },
                    "required": [
                      "frequency",
                      "interval"
                    ],
                    "nullable": true,
                    "description": "Defines the default recurrence of this appointment type, if any.  Because creating an actual recurring series requires more information than can be defined in the default (in particular, 'days_of_week' defining which day(s) to recur on), setting the appointment type recurrence will not cause an appointment created with that type to have a recurring series. The appointment must be explicitly created with the full recurrence config for the series.\n\nExpressed as a subset of RRULE fields (see [rrule.js docs](https://github.com/jakubroztocil/rrule#api) for more context, but note that we only support a limited subset of the full RRULE spec).\n\nRecurrence configuration at the appointment type level is slightly different than what is allowed on an actual recurring series, notably rather than `until`, we can specifiy a `duration`. Also, specifying the day of week or month using `days_of_week` is not allowed at the appointment type level.\n\nNote: the recurring appointments feature is currently in preview. Please contact Source for more details."
                  },
                  "encounter_type": {
                    "anyOf": [
                      {
                        "type": "string",
                        "example": "entp_0IcPhnnAMjWduezNQRaC"
                      },
                      {
                        "type": "string"
                      }
                    ],
                    "nullable": true,
                    "description": "The encounter type to use by default when creating encounters related to appointments of this type."
                  },
                  "forms": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "example": "form_hSGPOT5BMusNLwDI3Z4N"
                    },
                    "description": "A list of forms that members should complete before appointments of this type. When an appointment is booked, form responses to these forms are automatically created for the member to complete.",
                    "example": [
                      "form_hSGPOT5BMusNLwDI3Z4N"
                    ]
                  }
                },
                "required": [
                  "key",
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/appointment_type"
                }
              }
            }
          }
        },
        "x-methodName": "create",
        "x-belongsToResource": "appointment_type"
      },
      "get": {
        "summary": "List all Appointment Types",
        "description": "Lists all available appointment types.",
        "tags": [
          "Appointment Type"
        ],
        "parameters": [
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "ending_before",
            "schema": {
              "type": "string",
              "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_bar, your subsequent call can include ending_before=obj_bar in order to fetch the previous page of the list."
            },
            "required": false,
            "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_bar, your subsequent call can include ending_before=obj_bar in order to fetch the previous page of the list."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "starting_after",
            "schema": {
              "type": "string",
              "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include starting_after=obj_foo in order to fetch the next page of the list."
            },
            "required": false,
            "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include starting_after=obj_foo in order to fetch the next page of the list."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "limit",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100."
            },
            "required": false,
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "sort",
            "schema": {
              "type": "string",
              "enum": [
                "created_at",
                "name",
                "-created_at",
                "-name"
              ],
              "description": "Sort field for the results. A '-' prefix indicates sorting by that field in descending order, otherwise the order will be ascending.",
              "example": "created_at"
            },
            "required": false,
            "description": "Sort field for the results. A '-' prefix indicates sorting by that field in descending order, otherwise the order will be ascending."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "name",
            "schema": {
              "type": "string",
              "description": "Only return appointment types containing this substring. Case insensitive."
            },
            "required": false,
            "description": "Only return appointment types containing this substring. Case insensitive."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "key",
            "schema": {
              "type": "string",
              "description": "Only return appointment types with this key. Appointment type keys are unique, so when specifying a key through this param, you will only receive up to one appointment type."
            },
            "required": false,
            "description": "Only return appointment types with this key. Appointment type keys are unique, so when specifying a key through this param, you will only receive up to one appointment type."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "bookable",
            "schema": {
              "type": "boolean",
              "description": "When set to true, filter appointment types to only those which are bookable by a member."
            },
            "required": false,
            "description": "When set to true, filter appointment types to only those which are bookable by a member."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "include_deleted",
            "schema": {
              "type": "boolean",
              "description": "When set to true, deleted appointment types are included."
            },
            "required": false,
            "description": "When set to true, deleted appointment types are included."
          }
        ],
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "object": {
                      "type": "string",
                      "default": "list",
                      "enum": [
                        "list"
                      ],
                      "example": "list",
                      "description": "Always `list`."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/appointment_type"
                      },
                      "description": "Array of results"
                    },
                    "has_more": {
                      "type": "boolean",
                      "description": "Contains `true` if there is another page of results available."
                    }
                  },
                  "required": [
                    "object",
                    "data",
                    "has_more"
                  ]
                }
              }
            }
          }
        },
        "x-methodName": "list",
        "x-belongsToResource": "appointment_type"
      }
    },
    "/v1/scheduling/appointment_types/{id}": {
      "get": {
        "summary": "Retrieve an Appointment Type",
        "description": "Retrieve an appointment type by its unique identifier.",
        "tags": [
          "Appointment Type"
        ],
        "parameters": [
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "id",
            "schema": {
              "type": "string",
              "example": "aptp_meYUvkuaI2akjnb5Kwt7",
              "description": "Unique ID of the appointment_type."
            },
            "required": true,
            "description": "Unique ID of the appointment_type."
          }
        ],
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/appointment_type"
                }
              }
            }
          }
        },
        "x-methodName": "retrieve",
        "x-belongsToResource": "appointment_type"
      },
      "post": {
        "summary": "Update an Appointment Type",
        "description": "Updates an appointment type.\n\nAppointments are linked to appointment types in Source, so changes made to an appointment type will be visible on past appointments as well. However, some fields, such as the duration and location of the appointment, are copied at the time the appointment is created. Changing the duration of an appointment type will not change the duration of past appointments.",
        "tags": [
          "Appointment Type"
        ],
        "parameters": [
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "id",
            "schema": {
              "type": "string",
              "example": "aptp_meYUvkuaI2akjnb5Kwt7",
              "description": "Unique ID of the appointment_type."
            },
            "required": true,
            "description": "Unique ID of the appointment_type."
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "key": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 255,
                    "pattern": "^[a-z0-9_-]+$",
                    "description": "Unique key for this appointment type. You can use this when creating appointments via the API.",
                    "example": "intake_visit"
                  },
                  "name": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 255,
                    "description": "Name of this appointment type. This will be visible to members when booking appointments, and to users when using the Source UI.",
                    "example": "Intake Visit"
                  },
                  "description": {
                    "type": "string",
                    "maxLength": 1024,
                    "nullable": true,
                    "description": "A few sentence description of this appointment type. This description will be shown to members when attempting to book an appointment of this type. While not required, it can be helpful to share what the member might expect to happen during this appointment or any resources thay should bring.",
                    "example": "Meet with your new care team and complete a baseline visit"
                  },
                  "default_instructions": {
                    "type": "string",
                    "maxLength": 1024,
                    "nullable": true,
                    "description": "The default instructions that should be provided to members when booking this type of appointment. When creating appointments via the API, these instructions will automatically be applied to the appointment unless overriden. Members are not able to change the instructions on an appointment when creating one, and will also receive this set of instructions by default.",
                    "example": "Please fast for 12 hours before your visit."
                  },
                  "color": {
                    "type": "string",
                    "enum": [
                      "gray",
                      "blue",
                      "teal",
                      "yellow",
                      "green",
                      "red",
                      "orange",
                      "purple"
                    ],
                    "description": "The color used when showing appointments of this type on the calendar. This is primarily used in the Source UI, but you're able to use this in your own system as well. If no color is set, it will default to gray.",
                    "example": "blue"
                  },
                  "duration": {
                    "type": "number",
                    "minimum": 5,
                    "maximum": 1440,
                    "description": "The default duration to apply to appointments of this type. Default durations must be in multiples of 5 minutes. For example, 5 and 10 are valid durations, but 6 and 14 are not. Always measured in minutes. Defaults to 30.",
                    "example": 30
                  },
                  "slot_interval": {
                    "type": "number",
                    "minimum": 5,
                    "maximum": 1440,
                    "description": "The interval between two bookable slots for appointments of this type. Like durations, intervals must also be in multiples of 5 minutes. Always measured in minutes. Defaults to 15.",
                    "example": 15
                  },
                  "bookable": {
                    "type": "boolean",
                    "description": "Whether or not this appointment can be booked directly by a member. If set to false, this appointment can only be scheduled by a user. Note that appointment types with bookable set to false are still visible to members, as they may still have an appointment of that type scheduled. As a result, this does not function as a security or privacy control. Defaults to true.",
                    "example": false
                  },
                  "buffer_before": {
                    "type": "number",
                    "minimum": 0,
                    "maximum": 60,
                    "description": "Provides an additional buffer of time before an appointment to prepare. Buffers do not change the appointment duration, but rather make the participants appear \"busy\" for a certain amount of time before the appointment begins. Measured in minutes. Must not be greater than 60 minutes.",
                    "example": 0
                  },
                  "buffer_after": {
                    "type": "number",
                    "minimum": 0,
                    "maximum": 60,
                    "description": "Provides an additional buffer of time after an appointment to wrap up. Buffers do not change the appointment duration, but rather make the participants appear \"busy\" for a certain amount of time after the appointment ends. Measured in minutes. Must not be greater than 60 minutes.",
                    "example": 5
                  },
                  "planning_horizon": {
                    "type": "number",
                    "minimum": 0,
                    "maximum": 365,
                    "description": "Controls how far in the future appointments can be booked. By default, appointment types have a 60 day planning horizon. You can extend this if you'd like members to be able to book appointments farther in the future. Omitting this field will set the planning horizon to the maximum supported value of 365 days.",
                    "example": 60
                  },
                  "minimum_notice": {
                    "type": "number",
                    "minimum": 0,
                    "description": "Controls the minimum amount of advance notice in order to book appointments of this type. For example, if this parameter is set to 60, members will only be able to book appointments starting at least 60 minutes from now. This option is only considered when members are booking appointments directly. Users can book appointments at any time, including appointments in the past. Measured in minutes.",
                    "example": 60
                  },
                  "routing_strategy": {
                    "type": "string",
                    "enum": [
                      "care_team_required",
                      "care_team_preferred",
                      "care_team_hybrid",
                      "round_robin"
                    ],
                    "description": "Defines how an incoming slot availability query for the appointment type should be routed to possible users. Because of the complexity in routing, it's best explained by example. Assume you have created an appointment type that can be fulfilled by users in the Physicians group. The behavior of each routing strategy is as follows:\n\n- care_team_required - Appointment slots will only be shown for Physicians who are on the member's care team. If there are   no Physicians on the member's care team, the request will fail.\n\n- care_team_preferred - Appointment slots will be shown for any Physicians on the member's care team.   If the Physicians on the care team aren't available, slots will not be returned.   If there are no Physicians on the member's care team, then slots will be returned for any available Physician.\n\n- care_team_hybrid - Appointment slots will be shown for all users in the Physicians group. For any given appointment slot,   if a Physician of the member's care team is available, they will be preferred. However, slots for other Physicians will   still be shown.\n\n- round_robin - Appointment slots will be shown for all users in the Physicians group, and no preference will be given to   users who are also on the member's care team.\n\nBy default, Source uses the care_team_preferred strategy to provide continuity of care and ensure patients have a consistent experience. However, this is not always the right booking strategy for all practices. In fact, even for a single practice, you may sometimes need to reach for another routing method.\n\nIf you have a need for a routing model that isn't covered above, please don't hesitate to reach out to our team.",
                    "example": "care_team_preferred"
                  },
                  "groups": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "example": "grp_IlGhgsstvgsagl6lV89Q"
                    },
                    "description": "Select the groups that should be evaluated when booking an appointment. If no group is specified, you will not be able to use the appointment slot API to find bookable slots. When using the appointment slot API, you can specify more specific users and groups. For example, if your appointment type is linked to the group \"Physicians,\" and when calling the slot API you provide an include parameter for the group \"Nurses,\" you only receive available slots for users who are in both the Physicians and Nurses group.",
                    "example": [
                      "grp_IlGhgsstvgsagl6lV89Q"
                    ]
                  },
                  "license_types": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code"
                      ]
                    },
                    "nullable": true,
                    "description": "The user license(s) that are required to perform appointments of this type. When looking for appointment slots, only the availability of licensed users will be returned. When booking an appointment without the skip_constraints parameter, any licensed user must have a matching license type, otherwise a warning will be returned. If more than one license code is provided, a licensed user with any of the license codes can participate in the appointment. Providing any value will override the entire array. Providing null or an empty array will empty out the array.",
                    "example": [
                      {
                        "code": "MD"
                      }
                    ]
                  },
                  "video_enabled": {
                    "type": "boolean",
                    "description": "Whether or not to create a video call for appointments of this type. Defaults to false.",
                    "example": true
                  },
                  "reminders": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "when": {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "default": "before",
                              "enum": [
                                "before"
                              ],
                              "example": "before",
                              "description": "The trigger for when this reminder should be scheduled. Currently, the only supported value is `before`, indicating that this reminder should be triggered based on the requested duration prior to the start of the appointment."
                            },
                            "unit": {
                              "type": "string",
                              "enum": [
                                "minute",
                                "hour",
                                "day"
                              ],
                              "description": "The unit of time used in this reminder configuration. Units are interpreted within the appointment's scheduled time zone, meaning 24 hours and 1 day are not necessarily the same if the reminder window spans daylight savings."
                            },
                            "time": {
                              "type": "number",
                              "description": "The number of units before the appointment at which this reminder should trigger. Must be an integer greater than zero."
                            }
                          },
                          "required": [
                            "type",
                            "unit",
                            "time"
                          ]
                        }
                      },
                      "required": [
                        "when"
                      ]
                    },
                    "description": "The reminder configuration for this appointment type. Each appointment created with this type will inherit the reminder configuration of the appointment type. Changes to reminder configuration will be applied to all future appointments.\n\nYou may configure up to five reminders per appointment type."
                  },
                  "recurrence": {
                    "type": "object",
                    "properties": {
                      "frequency": {
                        "type": "string",
                        "enum": [
                          "weekly"
                        ],
                        "description": "How often the appointments should recur. Source only supports 'weekly' at this time (including \"every N weeks\", using 'interval')",
                        "example": "weekly"
                      },
                      "interval": {
                        "type": "number",
                        "minimum": 1,
                        "maximum": 20,
                        "description": "How many of the `frequency` intervals between each appointment, i.e. 'every N weeks'.",
                        "example": 1
                      },
                      "count": {
                        "type": "number",
                        "minimum": 1,
                        "maximum": 52,
                        "description": "How many total appointments should be in the series.\n\nOne and only one of `count` or `duration` must be set."
                      },
                      "duration": {
                        "type": "object",
                        "properties": {
                          "amount": {
                            "type": "number"
                          },
                          "unit": {
                            "type": "string",
                            "enum": [
                              "days",
                              "weeks"
                            ]
                          }
                        },
                        "required": [
                          "amount",
                          "unit"
                        ],
                        "description": "Total length of time, expressed in number of days or weeks.\n\nOne and only one of `count` or `duration` must be set."
                      }
                    },
                    "required": [
                      "frequency",
                      "interval"
                    ],
                    "nullable": true,
                    "description": "Defines the default recurrence of this appointment type, if any.  Because creating an actual recurring series requires more information than can be defined in the default (in particular, 'days_of_week' defining which day(s) to recur on), setting the appointment type recurrence will not cause an appointment created with that type to have a recurring series. The appointment must be explicitly created with the full recurrence config for the series.\n\nExpressed as a subset of RRULE fields (see [rrule.js docs](https://github.com/jakubroztocil/rrule#api) for more context, but note that we only support a limited subset of the full RRULE spec).\n\nRecurrence configuration at the appointment type level is slightly different than what is allowed on an actual recurring series, notably rather than `until`, we can specifiy a `duration`. Also, specifying the day of week or month using `days_of_week` is not allowed at the appointment type level.\n\nNote: the recurring appointments feature is currently in preview. Please contact Source for more details."
                  },
                  "encounter_type": {
                    "anyOf": [
                      {
                        "type": "string",
                        "example": "entp_0IcPhnnAMjWduezNQRaC"
                      },
                      {
                        "type": "string"
                      }
                    ],
                    "nullable": true,
                    "description": "The encounter type to use by default when creating encounters related to appointments of this type."
                  },
                  "forms": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "example": "form_hSGPOT5BMusNLwDI3Z4N"
                    },
                    "description": "A list of forms that members should complete before appointments of this type. When an appointment is booked, form responses to these forms are automatically created for the member to complete.",
                    "example": [
                      "form_hSGPOT5BMusNLwDI3Z4N"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/appointment_type"
                }
              }
            }
          }
        },
        "x-methodName": "update",
        "x-belongsToResource": "appointment_type"
      },
      "delete": {
        "summary": "Delete an Appointment Type",
        "description": "Deletes an appointment type from Source.\n\nOnce an appointment type is deleted, it can no longer be used to schedule further appointments. It will still be visible on past appointments that used this type. You can delete an appontment type at any time.",
        "tags": [
          "Appointment Type"
        ],
        "parameters": [
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "id",
            "schema": {
              "type": "string",
              "example": "aptp_meYUvkuaI2akjnb5Kwt7",
              "description": "Unique ID of the appointment_type."
            },
            "required": true,
            "description": "Unique ID of the appointment_type."
          }
        ],
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/appointment_type"
                }
              }
            }
          }
        },
        "x-methodName": "delete",
        "x-belongsToResource": "appointment_type"
      }
    },
    "/v1/users/{user}/availability": {
      "get": {
        "summary": "Retrieve a User Availability Schedule",
        "description": "Retrieves the availability schedule for a user.\n\nEach user in Source has an availability schedule created for them by default. The availability schedules are unique for each environment, so test and live mode will have different availability objects.",
        "tags": [
          "Availability"
        ],
        "parameters": [
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "user",
            "schema": {
              "type": "string",
              "example": "usr_qoGndHzx8KwdYsEByt9X",
              "description": "Unique ID for the user."
            },
            "required": true,
            "description": "Unique ID for the user."
          }
        ],
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/availability"
                }
              }
            }
          }
        },
        "x-methodName": "retrieveForUser",
        "x-belongsToResource": "availability"
      },
      "post": {
        "summary": "Update a User Availability Schedule",
        "description": "Updates an availability schedule for a user.\n\nYou'll need to update a user's availability schedule to make them bookable for appointments in Source.",
        "tags": [
          "Availability"
        ],
        "parameters": [
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "user",
            "schema": {
              "type": "string",
              "example": "usr_qoGndHzx8KwdYsEByt9X",
              "description": "Unique ID for the user."
            },
            "required": true,
            "description": "Unique ID for the user."
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "time_zone": {
                    "type": "string",
                    "nullable": true,
                    "description": "The time zone in which rules on this schedule should be evaluated."
                  },
                  "rules": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "day": {
                          "type": "number",
                          "minimum": 1,
                          "maximum": 7,
                          "description": "The day of the week to which this rule applies, as an ISO day of week. The value of this property must be a number from 1 to 7, where 1 represents Monday, and 7 represents Sunday.",
                          "example": 1
                        },
                        "start": {
                          "type": "string",
                          "format": "time",
                          "description": "The start time of this rule. The value of this property is an ISO local time, formatted as HH:mm, using 24 hour time. Valid values for the start time of a rule range from 00:00 to 23:59.",
                          "example": "09:00"
                        },
                        "end": {
                          "type": "string",
                          "format": "time",
                          "description": "The end time of this rule. The value of this property is an ISO local time, formatted as HH:mm, using 24 hour time. Unlike rule start times, end times may range from 00:00 to 24:00, where 24:00 represents midnight at the end of the day.",
                          "example": "17:00"
                        },
                        "start_date": {
                          "type": "string",
                          "format": "date",
                          "nullable": true,
                          "description": "The first date from which this rule should apply, expressed as an ISO date. If set to a non-null value, this rule will not be considered when evaluating availability before the given date.",
                          "example": "2022-08-10"
                        },
                        "end_date": {
                          "type": "string",
                          "format": "date",
                          "nullable": true,
                          "description": "The last date on which this rule should apply, expressed as an ISO date. If set to a non-null value, this rule will not be considered when evaluating availability after the given date.",
                          "example": null
                        },
                        "appointment_types": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "example": "aptp_meYUvkuaI2akjnb5Kwt7"
                          },
                          "description": "An optional set of appointment types that this availability rule is restricted to. Only appointments of the specified types are bookable during the period of this rule. Omitting this field or providing an empty array implies the rule can accommodate booking any appointment type.\n\nRules are additive - when rules with different appointment type restrictions overlap in time, the set of all allowed appointment types in all overlapping rules may be booked during the overlap."
                        },
                        "release_window": {
                          "type": "object",
                          "properties": {
                            "unit": {
                              "type": "string",
                              "enum": [
                                "day",
                                "hour",
                                "minute"
                              ]
                            },
                            "time": {
                              "type": "number"
                            }
                          },
                          "required": [
                            "unit",
                            "time"
                          ],
                          "nullable": true,
                          "description": "The time (in hours) before this availability rule when this availability is released and appointments that don't match the rule criteria can be booked.\n\nFor example, say you have a 3pm - 5pm availability rule restricted to Urgent Care visits. Typically, this would mean that only Urgent Care visits could be scheduled during that time. If you only had one hour of Urgent Care visits booked, then an hour of your day would go unutilized.\n\nUsing release windows, you can set the time at which the remaining Urgent Care visit capacity is released for any appointment type. if you set release window to 1 hour, for example, then starting at 2pm, your members would be able to book non-Urgent Care visits at 3pm. Starting at 3pm, members would be able to book non-Urgent Care visits at 4pm, and so on."
                        },
                        "virtual": {
                          "type": "boolean",
                          "description": "Whether or not the user should be considered available for virtual appointments (i.e. video and phone calls) during the available time block. You may choose to set this to false if the user is working in a physical location and should not be taking telemedicine visits during this time."
                        },
                        "location": {
                          "type": "string",
                          "example": "loc_EtTXhFHUtCXO1JWBd8TN",
                          "nullable": true,
                          "description": "The physical location in which the user will be located during this availability block. A user may only be assigned to a single physical location per time block. When a location is added to a time block, the user will be able to be booked at that location.\n\nNote that this field is present on availability schedules for locations as well, but is ignored."
                        }
                      },
                      "required": [
                        "day",
                        "start",
                        "end"
                      ]
                    },
                    "description": "The list of rules for this person's availability. Each rule defines a day of week, start time, and end time of the rule. There may be multiple rules for a single day of the week. When that happens, the rules represent multiple blocks of times that the user is available in a given day. For example, you may be available from 9am-12pm, break for lunch, and then be available 1pm-5pm. If two availability blocks are provided on the same day which overlap with one another, Source will merge those rules into one rule."
                  },
                  "overrides": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "date": {
                          "type": "string",
                          "format": "date",
                          "description": "The specific date of the override, specified as an ISO 8601 date string in the format YYYY-mm-dd. There can only be one override object per date in this list.",
                          "example": "2022-01-01"
                        },
                        "rules": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "start": {
                                "type": "string",
                                "format": "time",
                                "description": "The start time of this rule. The value of this property is an ISO local time, formatted as HH:mm, using 24 hour time. Valid values for the start time of a rule range from 00:00 to 23:59.",
                                "example": "09:00"
                              },
                              "end": {
                                "type": "string",
                                "format": "time",
                                "description": "The end time of this rule. The value of this property is an ISO local time, formatted as HH:mm, using 24 hour time. Unlike rule start times, end times may range from 00:00 to 24:00, where 24:00 represents midnight at the end of the day.",
                                "example": "17:00"
                              },
                              "appointment_types": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "example": "aptp_meYUvkuaI2akjnb5Kwt7"
                                },
                                "description": "An optional set of appointment types that this override rule is restricted to. Only appointments of the specified types are bookable during the period of this override. Omitting this field or providing an empty array implies the override can accommodate booking any appointment type.\n\nAppointment type constraints are additive - when overrides with different appointment type restrictions overlap in time, the set of all allowed appointment types in all overlapping rules may be booked during the overlap."
                              },
                              "release_window": {
                                "type": "object",
                                "properties": {
                                  "unit": {
                                    "type": "string",
                                    "enum": [
                                      "day",
                                      "hour",
                                      "minute"
                                    ]
                                  },
                                  "time": {
                                    "type": "number"
                                  }
                                },
                                "required": [
                                  "unit",
                                  "time"
                                ],
                                "nullable": true,
                                "description": "The time (in hours) before this availability rule when this availability is released and appointments that don't match the rule criteria can be booked.\n\nFor example, say you have a 3pm - 5pm availability rule restricted to Urgent Care visits. Typically, this would mean that only Urgent Care visits could be scheduled during that time. If you only had one hour of Urgent Care visits booked, then an hour of your day would go unutilized.\n\nUsing release windows, you can set the time at which the remaining Urgent Care visit capacity is released for any appointment type. if you set release window to 1 hour, for example, then starting at 2pm, your members would be able to book non-Urgent Care visits at 3pm. Starting at 3pm, members would be able to book non-Urgent Care visits at 4pm, and so on."
                              },
                              "virtual": {
                                "type": "boolean",
                                "description": "Whether or not the user should be considered available for virtual appointments (i.e. video and phone calls) during the available time block. By default, this field is true. You may choose to set this to false if the user is working in a physical location and should not be taking telemedicine visits during this time.\n\nNote that this field is present on availability schedules for locations as well, but is ignored."
                              },
                              "location": {
                                "type": "string",
                                "example": "loc_EtTXhFHUtCXO1JWBd8TN",
                                "nullable": true,
                                "description": "The physical location in which the user will be located during this availability block. A user may only be assigned to a single physical location per time block. When a location is added to a time block, the user will be able to be booked at that location.\n\nNote that this field is present on availability schedules for locations as well, but is ignored."
                              }
                            },
                            "required": [
                              "start",
                              "end"
                            ]
                          }
                        }
                      },
                      "required": [
                        "date",
                        "rules"
                      ]
                    },
                    "description": "Overrides to the availability rules for this schedule. Overrides are specific dates on which the user's availability differs from their general rules. For example, you may be available Monday through Friday 9am-5pm, but not available on New Years Day.",
                    "example": [
                      {
                        "date": "2022-01-01",
                        "rules": []
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/availability"
                }
              }
            }
          }
        },
        "x-methodName": "updateForUser",
        "x-belongsToResource": "availability"
      }
    },
    "/v1/locations/{location}/availability": {
      "get": {
        "summary": "Retrieve a Location Availability Schedule",
        "description": "Retrieves the availability schedule for a location.",
        "tags": [
          "Availability"
        ],
        "parameters": [
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "location",
            "schema": {
              "type": "string",
              "example": "loc_EtTXhFHUtCXO1JWBd8TN",
              "description": "Unique ID for the location."
            },
            "required": true,
            "description": "Unique ID for the location."
          }
        ],
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/availability"
                }
              }
            }
          }
        },
        "x-methodName": "retrieveForLocation",
        "x-belongsToResource": "availability"
      },
      "post": {
        "summary": "Update a Location Availability Schedule",
        "description": "Updates an availability schedule for a location.",
        "tags": [
          "Availability"
        ],
        "parameters": [
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "location",
            "schema": {
              "type": "string",
              "example": "loc_EtTXhFHUtCXO1JWBd8TN",
              "description": "Unique ID for the location."
            },
            "required": true,
            "description": "Unique ID for the location."
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "time_zone": {
                    "type": "string",
                    "nullable": true,
                    "description": "The time zone in which rules on this schedule should be evaluated."
                  },
                  "rules": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "day": {
                          "type": "number",
                          "minimum": 1,
                          "maximum": 7,
                          "description": "The day of the week to which this rule applies, as an ISO day of week. The value of this property must be a number from 1 to 7, where 1 represents Monday, and 7 represents Sunday.",
                          "example": 1
                        },
                        "start": {
                          "type": "string",
                          "format": "time",
                          "description": "The start time of this rule. The value of this property is an ISO local time, formatted as HH:mm, using 24 hour time. Valid values for the start time of a rule range from 00:00 to 23:59.",
                          "example": "09:00"
                        },
                        "end": {
                          "type": "string",
                          "format": "time",
                          "description": "The end time of this rule. The value of this property is an ISO local time, formatted as HH:mm, using 24 hour time. Unlike rule start times, end times may range from 00:00 to 24:00, where 24:00 represents midnight at the end of the day.",
                          "example": "17:00"
                        },
                        "start_date": {
                          "type": "string",
                          "format": "date",
                          "nullable": true,
                          "description": "The first date from which this rule should apply, expressed as an ISO date. If set to a non-null value, this rule will not be considered when evaluating availability before the given date.",
                          "example": "2022-08-10"
                        },
                        "end_date": {
                          "type": "string",
                          "format": "date",
                          "nullable": true,
                          "description": "The last date on which this rule should apply, expressed as an ISO date. If set to a non-null value, this rule will not be considered when evaluating availability after the given date.",
                          "example": null
                        },
                        "appointment_types": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "example": "aptp_meYUvkuaI2akjnb5Kwt7"
                          },
                          "description": "An optional set of appointment types that this availability rule is restricted to. Only appointments of the specified types are bookable during the period of this rule. Omitting this field or providing an empty array implies the rule can accommodate booking any appointment type.\n\nRules are additive - when rules with different appointment type restrictions overlap in time, the set of all allowed appointment types in all overlapping rules may be booked during the overlap."
                        },
                        "release_window": {
                          "type": "object",
                          "properties": {
                            "unit": {
                              "type": "string",
                              "enum": [
                                "day",
                                "hour",
                                "minute"
                              ]
                            },
                            "time": {
                              "type": "number"
                            }
                          },
                          "required": [
                            "unit",
                            "time"
                          ],
                          "nullable": true,
                          "description": "The time (in hours) before this availability rule when this availability is released and appointments that don't match the rule criteria can be booked.\n\nFor example, say you have a 3pm - 5pm availability rule restricted to Urgent Care visits. Typically, this would mean that only Urgent Care visits could be scheduled during that time. If you only had one hour of Urgent Care visits booked, then an hour of your day would go unutilized.\n\nUsing release windows, you can set the time at which the remaining Urgent Care visit capacity is released for any appointment type. if you set release window to 1 hour, for example, then starting at 2pm, your members would be able to book non-Urgent Care visits at 3pm. Starting at 3pm, members would be able to book non-Urgent Care visits at 4pm, and so on."
                        },
                        "virtual": {
                          "type": "boolean",
                          "description": "Whether or not the user should be considered available for virtual appointments (i.e. video and phone calls) during the available time block. You may choose to set this to false if the user is working in a physical location and should not be taking telemedicine visits during this time."
                        },
                        "location": {
                          "type": "string",
                          "example": "loc_EtTXhFHUtCXO1JWBd8TN",
                          "nullable": true,
                          "description": "The physical location in which the user will be located during this availability block. A user may only be assigned to a single physical location per time block. When a location is added to a time block, the user will be able to be booked at that location.\n\nNote that this field is present on availability schedules for locations as well, but is ignored."
                        }
                      },
                      "required": [
                        "day",
                        "start",
                        "end"
                      ]
                    },
                    "description": "The list of rules for this person's availability. Each rule defines a day of week, start time, and end time of the rule. There may be multiple rules for a single day of the week. When that happens, the rules represent multiple blocks of times that the user is available in a given day. For example, you may be available from 9am-12pm, break for lunch, and then be available 1pm-5pm. If two availability blocks are provided on the same day which overlap with one another, Source will merge those rules into one rule."
                  },
                  "overrides": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "date": {
                          "type": "string",
                          "format": "date",
                          "description": "The specific date of the override, specified as an ISO 8601 date string in the format YYYY-mm-dd. There can only be one override object per date in this list.",
                          "example": "2022-01-01"
                        },
                        "rules": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "start": {
                                "type": "string",
                                "format": "time",
                                "description": "The start time of this rule. The value of this property is an ISO local time, formatted as HH:mm, using 24 hour time. Valid values for the start time of a rule range from 00:00 to 23:59.",
                                "example": "09:00"
                              },
                              "end": {
                                "type": "string",
                                "format": "time",
                                "description": "The end time of this rule. The value of this property is an ISO local time, formatted as HH:mm, using 24 hour time. Unlike rule start times, end times may range from 00:00 to 24:00, where 24:00 represents midnight at the end of the day.",
                                "example": "17:00"
                              },
                              "appointment_types": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "example": "aptp_meYUvkuaI2akjnb5Kwt7"
                                },
                                "description": "An optional set of appointment types that this override rule is restricted to. Only appointments of the specified types are bookable during the period of this override. Omitting this field or providing an empty array implies the override can accommodate booking any appointment type.\n\nAppointment type constraints are additive - when overrides with different appointment type restrictions overlap in time, the set of all allowed appointment types in all overlapping rules may be booked during the overlap."
                              },
                              "release_window": {
                                "type": "object",
                                "properties": {
                                  "unit": {
                                    "type": "string",
                                    "enum": [
                                      "day",
                                      "hour",
                                      "minute"
                                    ]
                                  },
                                  "time": {
                                    "type": "number"
                                  }
                                },
                                "required": [
                                  "unit",
                                  "time"
                                ],
                                "nullable": true,
                                "description": "The time (in hours) before this availability rule when this availability is released and appointments that don't match the rule criteria can be booked.\n\nFor example, say you have a 3pm - 5pm availability rule restricted to Urgent Care visits. Typically, this would mean that only Urgent Care visits could be scheduled during that time. If you only had one hour of Urgent Care visits booked, then an hour of your day would go unutilized.\n\nUsing release windows, you can set the time at which the remaining Urgent Care visit capacity is released for any appointment type. if you set release window to 1 hour, for example, then starting at 2pm, your members would be able to book non-Urgent Care visits at 3pm. Starting at 3pm, members would be able to book non-Urgent Care visits at 4pm, and so on."
                              },
                              "virtual": {
                                "type": "boolean",
                                "description": "Whether or not the user should be considered available for virtual appointments (i.e. video and phone calls) during the available time block. By default, this field is true. You may choose to set this to false if the user is working in a physical location and should not be taking telemedicine visits during this time.\n\nNote that this field is present on availability schedules for locations as well, but is ignored."
                              },
                              "location": {
                                "type": "string",
                                "example": "loc_EtTXhFHUtCXO1JWBd8TN",
                                "nullable": true,
                                "description": "The physical location in which the user will be located during this availability block. A user may only be assigned to a single physical location per time block. When a location is added to a time block, the user will be able to be booked at that location.\n\nNote that this field is present on availability schedules for locations as well, but is ignored."
                              }
                            },
                            "required": [
                              "start",
                              "end"
                            ]
                          }
                        }
                      },
                      "required": [
                        "date",
                        "rules"
                      ]
                    },
                    "description": "Overrides to the availability rules for this schedule. Overrides are specific dates on which the user's availability differs from their general rules. For example, you may be available Monday through Friday 9am-5pm, but not available on New Years Day.",
                    "example": [
                      {
                        "date": "2022-01-01",
                        "rules": []
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/availability"
                }
              }
            }
          }
        },
        "x-methodName": "updateForLocation",
        "x-belongsToResource": "availability"
      }
    },
    "/v1/care_plans": {
      "post": {
        "summary": "Create a Care Plan",
        "description": "Creates a new care plan for a member.\n\nBy default, the care plan is created in an active status using the current time as the `start_at` timestamp. You can optionally set `start_at` to a time in the past if you are creating a care plan that is already in progress. In order to backload a care plan that has already ended, you can set both the `start_at` and `end_at` parameters to times in the past, in which case you must also set the status parameter to either `completed` or `canceled`. A completed or canceled care plan cannot be reactivated or updated.",
        "tags": [
          "Care Plan"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "member": {
                    "type": "string",
                    "example": "mem_5QW8j1oKqQjNaPk4Hv3f",
                    "description": "Member to whom this care plan relates."
                  },
                  "name": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 255,
                    "description": "Name of this care plan. This name is visible to both members and users.",
                    "example": "Diabetes Maintenance"
                  },
                  "description": {
                    "type": "string",
                    "nullable": true,
                    "description": "A long-form description of this care plan. This description is visible to members and can be used to describe the purpose of the care plan in more detail.",
                    "example": "Long-term care plan for diabetes"
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "active",
                      "paused",
                      "completed",
                      "canceled"
                    ],
                    "description": "Current status of this care plan. By default, care plans are created in an `active` status. You can use the `paused` status to stop activities associated with the care plan and prevent any updates to the care plan, with the expectation that the care plan will be reactivated in the future. Pausing a care plan does not cancel associated tasks and intents that have already been created. If you create a care plan ending in the past, for example as a backload, you must also set the status to either `completed` or `canceled`. Care plans in a `canceled` or `completed` status cannot be reactivated.",
                    "example": "active"
                  },
                  "start_at": {
                    "type": "string",
                    "format": "date-time",
                    "nullable": true,
                    "description": "Timestamp indicating the start of the care plan. By default, `start_at` is set to the current time on care plan creation. You can optionally set start_at to a time in the past, for example in order to backload a historical care plan. `start_at` cannot be set to a time in the future.",
                    "example": null
                  },
                  "end_at": {
                    "type": "string",
                    "format": "date-time",
                    "nullable": true,
                    "description": "Timestamp indicating the end of the care plan. When a care plan is completed or canceled, the `end_at` time is automatically updated. You can optionally specify `end_at` when creating a care plan in a canceled or completed status, in order to reflect a time in the past, for example when backloading a historical care plan. `end_at` must be a time at or after `start_at` and cannot be a time in the future.",
                    "example": null
                  },
                  "activities": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "action": {
                          "oneOf": [
                            {
                              "type": "object",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "default": "task",
                                  "enum": [
                                    "task"
                                  ],
                                  "example": "task"
                                },
                                "config": {
                                  "type": "object",
                                  "properties": {
                                    "task_definition": {
                                      "type": "string",
                                      "minLength": 1,
                                      "description": "The ID or key of the task definition to use when creating the task.",
                                      "example": "tskd_2Lc2yr7YIYxfN3RCSlBU"
                                    },
                                    "summary": {
                                      "type": "string",
                                      "minLength": 1,
                                      "description": "A brief summary of the task.",
                                      "example": "Measure A1C level."
                                    }
                                  },
                                  "required": [
                                    "task_definition",
                                    "summary"
                                  ]
                                }
                              },
                              "required": [
                                "type",
                                "config"
                              ]
                            },
                            {
                              "type": "object",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "default": "form",
                                  "enum": [
                                    "form"
                                  ],
                                  "example": "form"
                                },
                                "config": {
                                  "type": "object",
                                  "properties": {
                                    "form": {
                                      "type": "string",
                                      "minLength": 1,
                                      "description": "The ID or key of the form to use when creating the form intent. At the time of creating the care plan, the form must have a published version.",
                                      "example": "form_hSGPOT5BMusNLwDI3Z4N"
                                    }
                                  },
                                  "required": [
                                    "form"
                                  ]
                                }
                              },
                              "required": [
                                "type",
                                "config"
                              ]
                            }
                          ],
                          "discriminator": {
                            "propertyName": "type"
                          },
                          "description": "Action to take when the activity is run. The action must specify an action type and corresponding configuration matching the action type.",
                          "example": {
                            "type": "task",
                            "config": {
                              "task_definition": "tskd_2Lc2yr7YIYxfN3RCSlBU",
                              "summary": "Quarterly checkin"
                            }
                          }
                        },
                        "trigger": {
                          "oneOf": [
                            {
                              "type": "object",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "default": "absolute",
                                  "enum": [
                                    "absolute"
                                  ],
                                  "example": "absolute",
                                  "description": "Type of time-based trigger to use for this activity. If set to `absolute`, specify the timestamp in the date parameter when this activity should run. If set to `relative`, specify in the `amount` and `unit` parameters the amount of time to wait after creation for the activity to run."
                                },
                                "date": {
                                  "type": "string",
                                  "format": "date-time",
                                  "description": "Timestamp at which to trigger the activity."
                                }
                              },
                              "required": [
                                "type",
                                "date"
                              ]
                            },
                            {
                              "type": "object",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "default": "relative",
                                  "enum": [
                                    "relative"
                                  ],
                                  "example": "relative",
                                  "description": "Type of time-based trigger to use for this activity. If set to `absolute`, specify the timestamp in the date parameter when this activity should run. If set to `relative`, specify in the `amount` and `unit` parameters the amount of time to wait after creation for the activity to run."
                                },
                                "unit": {
                                  "type": "string",
                                  "enum": [
                                    "day",
                                    "week",
                                    "month"
                                  ],
                                  "description": "Units for the time specified in `amount`."
                                },
                                "amount": {
                                  "type": "number",
                                  "description": "Together with the `unit` parameter, the amount of time to wait after activity creation until triggering the activity."
                                }
                              },
                              "required": [
                                "type",
                                "unit",
                                "amount"
                              ]
                            }
                          ],
                          "discriminator": {
                            "propertyName": "type"
                          },
                          "description": "When the activity should begin running. You can specify either an `absolute` trigger type along with a specific date and time or a `relative` trigger type to indicate a period of time after the start of the care plan. The relative trigger type supports units of `day`, `week`, and `month`.",
                          "example": {
                            "type": "relative",
                            "unit": "week",
                            "amount": 1
                          }
                        },
                        "recurrence": {
                          "type": "object",
                          "properties": {
                            "frequency": {
                              "type": "string",
                              "enum": [
                                "weekly"
                              ],
                              "description": "How often the activity should recur. Source only supports 'weekly' at this time (including \"every N weeks\", using `interval`).",
                              "example": "weekly"
                            },
                            "interval": {
                              "type": "number",
                              "minimum": 1,
                              "description": "How many of the `frequency` intervals between each activity execution, i.e. 'every N weeks'.",
                              "example": 1
                            },
                            "count": {
                              "type": "number",
                              "minimum": 1,
                              "description": "How many total times the activity should execute.\n\nOnly one of `count` or `until` can be set."
                            },
                            "until": {
                              "type": "string",
                              "format": "date",
                              "description": "The date at which the recurring activity ends. This date is inclusive, so if an activity execution falls on this date, it will run. Only one of `count` or `until` can be set."
                            },
                            "days_of_week": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "enum": [
                                  "monday",
                                  "tuesday",
                                  "wednesday",
                                  "thursday",
                                  "friday",
                                  "saturday",
                                  "sunday"
                                ]
                              },
                              "description": "The days of the week on which the activity should occur. By providing multiple days, you can indicate multiple recurring activities per week."
                            }
                          },
                          "required": [
                            "frequency",
                            "interval",
                            "days_of_week"
                          ],
                          "description": "Defines the activity’s recurrence. If not set, the activity is expected to run once. If neither `count` nor `until` is set, the activity runs indefinitely."
                        },
                        "time_zone": {
                          "type": "string"
                        },
                        "completed_at": {
                          "type": "string",
                          "format": "date-time",
                          "nullable": true,
                          "description": "Timestamp when the activity was completed."
                        }
                      },
                      "required": [
                        "action",
                        "time_zone"
                      ]
                    },
                    "description": "An ordered list of activities associated with this care plan. Activities represent actions the system should take while the care plan remains active. An activity can optionally be configured to start at a future time and to recur. For example, you can configure an activity to create a particular type of task every four weeks, starting one month after the care plan's start date."
                  }
                },
                "required": [
                  "member",
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/care_plan"
                }
              }
            }
          }
        },
        "x-methodName": "create",
        "x-belongsToResource": "care_plan"
      },
      "get": {
        "summary": "List all Care Plans",
        "description": "Lists all care plans.\n\nBy default, the care plans returned are sorted by creation date, with the most recently added care plan appearing first.",
        "tags": [
          "Care Plan"
        ],
        "parameters": [
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "ending_before",
            "schema": {
              "type": "string",
              "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_bar, your subsequent call can include ending_before=obj_bar in order to fetch the previous page of the list."
            },
            "required": false,
            "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_bar, your subsequent call can include ending_before=obj_bar in order to fetch the previous page of the list."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "starting_after",
            "schema": {
              "type": "string",
              "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include starting_after=obj_foo in order to fetch the next page of the list."
            },
            "required": false,
            "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include starting_after=obj_foo in order to fetch the next page of the list."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "limit",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100."
            },
            "required": false,
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "sort",
            "schema": {
              "type": "string",
              "enum": [
                "created_at",
                "start_at",
                "end_at",
                "-created_at",
                "-start_at",
                "-end_at"
              ],
              "description": "Sort field for the results. A '-' prefix indicates sorting by that field in descending order, otherwise the order will be ascending.",
              "example": "created_at"
            },
            "required": false,
            "description": "Sort field for the results. A '-' prefix indicates sorting by that field in descending order, otherwise the order will be ascending."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "member",
            "schema": {
              "type": "string",
              "example": "mem_5QW8j1oKqQjNaPk4Hv3f",
              "description": "Filter results by member."
            },
            "required": false,
            "description": "Filter results by member."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "status",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "active",
                  "paused",
                  "completed",
                  "canceled"
                ]
              },
              "description": "Filter results by status. If multiple statuses are provided, care plans matching any of the provided statuses will be returned."
            },
            "required": false,
            "description": "Filter results by status. If multiple statuses are provided, care plans matching any of the provided statuses will be returned."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "start_at",
            "schema": {
              "type": "object",
              "properties": {
                "lt": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Return results where the start_at field is less than this value."
                },
                "lte": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Return results where the start_at field is less than or equal to this value."
                },
                "gt": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Return results where the start_at field is greater than this value."
                },
                "gte": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Return results where the start_at field is greater than or equal to this value."
                }
              },
              "description": "A time based range filter on the list based on the object start_at field. For example `?start_at[gt]=2021-05-10T16:51:38.075Z&start_at[lte]=2021-05-26T16:51:38.075Z`. The value is a dictionary with the following:"
            },
            "required": false,
            "description": "A time based range filter on the list based on the object start_at field. For example `?start_at[gt]=2021-05-10T16:51:38.075Z&start_at[lte]=2021-05-26T16:51:38.075Z`. The value is a dictionary with the following:"
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "end_at",
            "schema": {
              "type": "object",
              "properties": {
                "lt": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Return results where the end_at field is less than this value."
                },
                "lte": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Return results where the end_at field is less than or equal to this value."
                },
                "gt": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Return results where the end_at field is greater than this value."
                },
                "gte": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Return results where the end_at field is greater than or equal to this value."
                }
              },
              "description": "A time based range filter on the list based on the object end_at field. For example `?end_at[gt]=2021-05-10T16:51:38.075Z&end_at[lte]=2021-05-26T16:51:38.075Z`. The value is a dictionary with the following:"
            },
            "required": false,
            "description": "A time based range filter on the list based on the object end_at field. For example `?end_at[gt]=2021-05-10T16:51:38.075Z&end_at[lte]=2021-05-26T16:51:38.075Z`. The value is a dictionary with the following:"
          }
        ],
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "object": {
                      "type": "string",
                      "default": "list",
                      "enum": [
                        "list"
                      ],
                      "example": "list",
                      "description": "Always `list`."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/care_plan"
                      },
                      "description": "Array of results"
                    },
                    "has_more": {
                      "type": "boolean",
                      "description": "Contains `true` if there is another page of results available."
                    }
                  },
                  "required": [
                    "object",
                    "data",
                    "has_more"
                  ]
                }
              }
            }
          }
        },
        "x-methodName": "list",
        "x-belongsToResource": "care_plan"
      }
    },
    "/v1/care_plans/{id}": {
      "post": {
        "summary": "Update a Care Plan",
        "description": "Updates a care plan. Any parameters not provided will be left unchanged.\n\nCanceled and completed care plans can no longer be modified or reactivated. Once a care plan is canceled or completed, associated unresolved actions (for example, tasks and intents) are canceled. You can pause a care plan to indicate that its activities should no longer generate new actions, while unresolved actions that have already been created remain active. You can later update the paused care plan to an active status when the plan is again in use.",
        "tags": [
          "Care Plan"
        ],
        "parameters": [
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "id",
            "schema": {
              "type": "string",
              "example": "cp_Ahql1iW9f9blBVgf40aL",
              "description": "Unique ID of the care_plan."
            },
            "required": true,
            "description": "Unique ID of the care_plan."
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 255,
                    "description": "Name of this care plan. This name is visible to both members and users.",
                    "example": "Diabetes Maintenance"
                  },
                  "description": {
                    "type": "string",
                    "nullable": true,
                    "description": "A long-form description of this care plan. This description is visible to members and can be used to describe the purpose of the care plan in more detail.",
                    "example": "Long-term care plan for diabetes"
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "active",
                      "paused",
                      "completed",
                      "canceled"
                    ],
                    "description": "Current status of this care plan. By default, care plans are created in an `active` status. You can use the `paused` status to stop activities associated with the care plan and prevent any updates to the care plan, with the expectation that the care plan will be reactivated in the future. Pausing a care plan does not cancel associated tasks and intents that have already been created. If you create a care plan ending in the past, for example as a backload, you must also set the status to either `completed` or `canceled`. Once a care plan is canceled or completed, associated unresolved actions (for example, tasks and intents) are canceled. Care plans in a `canceled` or `completed` status cannot be reactivated."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/care_plan"
                }
              }
            }
          }
        },
        "x-methodName": "update",
        "x-belongsToResource": "care_plan"
      },
      "get": {
        "summary": "Retrieve a Care Plan",
        "description": "Retrieves an existing care plan by its unique identifier.\n\nCare plans can be accessed by users in your organization. Additionally, members can access their own care plans.",
        "tags": [
          "Care Plan"
        ],
        "parameters": [
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "id",
            "schema": {
              "type": "string",
              "example": "cp_Ahql1iW9f9blBVgf40aL",
              "description": "Unique ID of the care_plan."
            },
            "required": true,
            "description": "Unique ID of the care_plan."
          }
        ],
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/care_plan"
                }
              }
            }
          }
        },
        "x-methodName": "retrieve",
        "x-belongsToResource": "care_plan"
      },
      "delete": {
        "summary": "Delete a Care Plan",
        "description": "Deletes a care plan.\n\nOnce a care plan is deleted, it can no longer be accessed or used. Associated unresolved actions (for example, tasks and intents) are canceled. The deleted care plan will still be visible on past completed and canceled actions that reference the care plan. In general, deleting a care plan should only be done to remove care plans that were entered in error. Otherwise, you can cancel or complete the care plan.",
        "tags": [
          "Care Plan"
        ],
        "parameters": [
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "id",
            "schema": {
              "type": "string",
              "example": "cp_Ahql1iW9f9blBVgf40aL",
              "description": "Unique ID of the care_plan."
            },
            "required": true,
            "description": "Unique ID of the care_plan."
          }
        ],
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/care_plan"
                }
              }
            }
          }
        },
        "x-methodName": "delete",
        "x-belongsToResource": "care_plan"
      }
    },
    "/v1/care_teams/{id}": {
      "post": {
        "summary": "Update a Care Team",
        "description": "Updates the specified care team by setting the values of the parameters passed.\n\nAny parameters not provided will be left unchanged. For example, if you pass the member parameter, that assigns the care team to the given member.",
        "tags": [
          "Care Team"
        ],
        "parameters": [
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "id",
            "schema": {
              "type": "string",
              "example": "crtm_Ar5vww6wrniLv8ubdP4A",
              "description": "Unique ID of the care_team."
            },
            "required": true,
            "description": "Unique ID of the care_team."
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "participants": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "user": {
                          "type": "string",
                          "example": "usr_NC6MQ3FyxddKoJJpfSVL",
                          "description": "Unique ID of the user to add to the care team. The user must have a care team role defined."
                        }
                      },
                      "required": [
                        "user"
                      ]
                    },
                    "description": "List of users to put on the care team."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/care_team"
                }
              }
            }
          }
        },
        "x-methodName": "update",
        "x-belongsToResource": "care_team"
      },
      "get": {
        "summary": "Retrieve a Care Team",
        "description": "Retrieves the details of an existing care team. You need only supply the unique care team identifier that was returned upon creation, or that is associated with a particular member (see the `care_team` property in the [Member](/docs/api/reference/member/) object).",
        "tags": [
          "Care Team"
        ],
        "parameters": [
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "id",
            "schema": {
              "type": "string",
              "example": "crtm_Ar5vww6wrniLv8ubdP4A",
              "description": "Unique ID of the care_team."
            },
            "required": true,
            "description": "Unique ID of the care_team."
          }
        ],
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/care_team"
                }
              }
            }
          }
        },
        "x-methodName": "retrieve",
        "x-belongsToResource": "care_team"
      }
    },
    "/v1/tasks/{taskId}/comments": {
      "post": {
        "summary": "Create a Comment on a Task",
        "description": "Creates a new comment on a task.",
        "tags": [
          "Comment"
        ],
        "parameters": [
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "taskId",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "text": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Markdown formatted contents of the comment. Comments support limited Markdown syntax.",
                    "example": "@John can you take a look at this?"
                  },
                  "attachments": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "example": "file_0A9zrLzCO7KPcnIbs40e"
                    },
                    "description": "Any attachments related to this comment. Currently, up to five file attachments are supported.",
                    "example": []
                  }
                },
                "required": [
                  "text"
                ]
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/comment"
                }
              }
            }
          }
        },
        "x-methodName": "create",
        "x-belongsToResource": "comment"
      },
      "get": {
        "summary": "List all Comments on a Task",
        "description": "Returns a list of all comments related to a task.\n\nThe comments returned are sorted by creation date, with the most recently added comments appearing first.",
        "tags": [
          "Comment"
        ],
        "parameters": [
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "taskId",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "ending_before",
            "schema": {
              "type": "string",
              "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_bar, your subsequent call can include ending_before=obj_bar in order to fetch the previous page of the list."
            },
            "required": false,
            "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_bar, your subsequent call can include ending_before=obj_bar in order to fetch the previous page of the list."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "starting_after",
            "schema": {
              "type": "string",
              "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include starting_after=obj_foo in order to fetch the next page of the list."
            },
            "required": false,
            "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include starting_after=obj_foo in order to fetch the next page of the list."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "limit",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100."
            },
            "required": false,
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "sort",
            "schema": {
              "type": "string",
              "enum": [
                "created_at",
                "-created_at"
              ],
              "description": "Sort field for the results. A '-' prefix indicates sorting by that field in descending order, otherwise the order will be ascending.",
              "example": "created_at"
            },
            "required": false,
            "description": "Sort field for the results. A '-' prefix indicates sorting by that field in descending order, otherwise the order will be ascending."
          }
        ],
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "object": {
                      "type": "string",
                      "default": "list",
                      "enum": [
                        "list"
                      ],
                      "example": "list",
                      "description": "Always `list`."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/comment"
                      },
                      "description": "Array of results"
                    },
                    "has_more": {
                      "type": "boolean",
                      "description": "Contains `true` if there is another page of results available."
                    }
                  },
                  "required": [
                    "object",
                    "data",
                    "has_more"
                  ]
                }
              }
            }
          }
        },
        "x-methodName": "list",
        "x-belongsToResource": "comment"
      }
    },
    "/v1/tasks/{taskId}/comments/{id}": {
      "post": {
        "summary": "Update a Comment on a Task",
        "description": "Updates an existing comment on a task.",
        "tags": [
          "Comment"
        ],
        "parameters": [
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "taskId",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "id",
            "schema": {
              "type": "string",
              "example": "cmt_qJfs2rwurnbKXt2kbRYz",
              "description": "Unique ID of the comment."
            },
            "required": true,
            "description": "Unique ID of the comment."
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "text": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Markdown formatted contents of the comment. Comments support limited Markdown syntax.",
                    "example": "@John can you take a look at this?"
                  },
                  "attachments": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "example": "file_0A9zrLzCO7KPcnIbs40e"
                    },
                    "description": "Any attachments related to this comment. Currently, up to five file attachments are supported.",
                    "example": []
                  }
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/comment"
                }
              }
            }
          }
        },
        "x-methodName": "update",
        "x-belongsToResource": "comment"
      },
      "get": {
        "summary": "Retrieve a Comment on a Task",
        "description": "Finds a comment on a task",
        "tags": [
          "Comment"
        ],
        "parameters": [
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "taskId",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "id",
            "schema": {
              "type": "string",
              "example": "cmt_qJfs2rwurnbKXt2kbRYz",
              "description": "Unique ID of the comment."
            },
            "required": true,
            "description": "Unique ID of the comment."
          }
        ],
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/comment"
                }
              }
            }
          }
        },
        "x-methodName": "retrieve",
        "x-belongsToResource": "comment"
      },
      "delete": {
        "summary": "Delete a Comment on a Task",
        "description": "Deletes the specified comment. A deleted comment is no longer visible.",
        "tags": [
          "Comment"
        ],
        "parameters": [
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "taskId",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "id",
            "schema": {
              "type": "string",
              "example": "cmt_qJfs2rwurnbKXt2kbRYz",
              "description": "Unique ID of the comment."
            },
            "required": true,
            "description": "Unique ID of the comment."
          }
        ],
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/comment"
                }
              }
            }
          }
        },
        "x-methodName": "delete",
        "x-belongsToResource": "comment"
      }
    },
    "/v1/devices/{id}": {
      "get": {
        "summary": "Retrieve a Device",
        "description": "Retrieves the details of an existing device. You need only supply the unique device identifier that was returned upon device creation.",
        "tags": [
          "Device"
        ],
        "parameters": [
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "id",
            "schema": {
              "type": "string",
              "example": "dev_79Dek9tjwNUZqMWU576Q",
              "description": "Unique ID of the device."
            },
            "required": true,
            "description": "Unique ID of the device."
          }
        ],
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/device"
                }
              }
            }
          }
        },
        "x-methodName": "retrieve",
        "x-belongsToResource": "device"
      }
    },
    "/v1/devices": {
      "get": {
        "summary": "List all Devices",
        "description": "Returns a list of devices within the current account. The devices returned are sorted by creation date, with the most recently added devices appearing first.",
        "tags": [
          "Device"
        ],
        "parameters": [
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "ending_before",
            "schema": {
              "type": "string",
              "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_bar, your subsequent call can include ending_before=obj_bar in order to fetch the previous page of the list."
            },
            "required": false,
            "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_bar, your subsequent call can include ending_before=obj_bar in order to fetch the previous page of the list."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "starting_after",
            "schema": {
              "type": "string",
              "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include starting_after=obj_foo in order to fetch the next page of the list."
            },
            "required": false,
            "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include starting_after=obj_foo in order to fetch the next page of the list."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "limit",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100."
            },
            "required": false,
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "member",
            "schema": {
              "type": "string",
              "example": "mem_5QW8j1oKqQjNaPk4Hv3f",
              "description": "The ID of the member whose devices should be returned."
            },
            "required": false,
            "description": "The ID of the member whose devices should be returned."
          }
        ],
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "object": {
                      "type": "string",
                      "default": "list",
                      "enum": [
                        "list"
                      ],
                      "example": "list",
                      "description": "Always `list`."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/device"
                      },
                      "description": "Array of results"
                    },
                    "has_more": {
                      "type": "boolean",
                      "description": "Contains `true` if there is another page of results available."
                    }
                  },
                  "required": [
                    "object",
                    "data",
                    "has_more"
                  ]
                }
              }
            }
          }
        },
        "x-methodName": "list",
        "x-belongsToResource": "device"
      }
    },
    "/v1/documents": {
      "post": {
        "summary": "Create a Document",
        "description": "Creates a new document for the member you specify. Use the [Files API](../file/) to upload a file with a purpose of document to include in the document resource.",
        "tags": [
          "Document"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "member": {
                    "type": "string",
                    "example": "mem_5QW8j1oKqQjNaPk4Hv3f",
                    "description": "The member associated with the document."
                  },
                  "file": {
                    "type": "string",
                    "example": "file_0A9zrLzCO7KPcnIbs40e",
                    "description": "The file that represents the document."
                  },
                  "date": {
                    "type": "string",
                    "format": "date-time",
                    "description": "When the document was originally created or authored. When creating a document, if no date is provided, the date the document is created is used.",
                    "example": "2021-05-13T16:33:00.000Z"
                  },
                  "internal": {
                    "type": "boolean",
                    "description": "Whether only internal users or a member can view this document. If not specified, the default is false and a member can view the document.",
                    "example": true
                  },
                  "name": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 255,
                    "description": "A short-form name of the document.",
                    "example": "Lab Result 05/01/22"
                  },
                  "description": {
                    "type": "string",
                    "maxLength": 4096,
                    "nullable": true,
                    "description": "A long-form text description of the document.",
                    "example": "Lab Results from May 1st, 2022. Includes a CBC, Lipid Panel, and Chem-12."
                  }
                },
                "required": [
                  "member",
                  "file",
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/document"
                }
              }
            }
          }
        },
        "x-methodName": "create",
        "x-belongsToResource": "document"
      },
      "get": {
        "summary": "List all Documents",
        "description": "Returns a list of documents within the current account.\n\nThe documents returned are sorted by creation date, with the most recently added document appearing first.",
        "tags": [
          "Document"
        ],
        "parameters": [
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "ending_before",
            "schema": {
              "type": "string",
              "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_bar, your subsequent call can include ending_before=obj_bar in order to fetch the previous page of the list."
            },
            "required": false,
            "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_bar, your subsequent call can include ending_before=obj_bar in order to fetch the previous page of the list."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "starting_after",
            "schema": {
              "type": "string",
              "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include starting_after=obj_foo in order to fetch the next page of the list."
            },
            "required": false,
            "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include starting_after=obj_foo in order to fetch the next page of the list."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "limit",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100."
            },
            "required": false,
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "sort",
            "schema": {
              "type": "string",
              "enum": [
                "created_at",
                "name",
                "date",
                "-created_at",
                "-name",
                "-date"
              ],
              "description": "Sort field for the results. A '-' prefix indicates sorting by that field in descending order, otherwise the order will be ascending.",
              "example": "created_at"
            },
            "required": false,
            "description": "Sort field for the results. A '-' prefix indicates sorting by that field in descending order, otherwise the order will be ascending."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "member",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "mem_5QW8j1oKqQjNaPk4Hv3f"
              },
              "description": "Filter results by member. If multiple member ids are provided, documents matching any of the provided members will be returned."
            },
            "required": false,
            "description": "Filter results by member. If multiple member ids are provided, documents matching any of the provided members will be returned."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "name",
            "schema": {
              "type": "string",
              "description": "Filter results by document name."
            },
            "required": false,
            "description": "Filter results by document name."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "internal",
            "schema": {
              "type": "boolean",
              "description": "Filter results by whether or not the document is internal-only or can be viewed by the member."
            },
            "required": false,
            "description": "Filter results by whether or not the document is internal-only or can be viewed by the member."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "date",
            "schema": {
              "type": "object",
              "properties": {
                "lt": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Return results where the date field is less than this value."
                },
                "lte": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Return results where the date field is less than or equal to this value."
                },
                "gt": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Return results where the date field is greater than this value."
                },
                "gte": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Return results where the date field is greater than or equal to this value."
                }
              },
              "description": "A time based range filter on the list based on the object date field. For example `?date[gt]=2021-05-10T16:51:38.075Z&date[lte]=2021-05-26T16:51:38.075Z`. The value is a dictionary with the following:"
            },
            "required": false,
            "description": "A time based range filter on the list based on the object date field. For example `?date[gt]=2021-05-10T16:51:38.075Z&date[lte]=2021-05-26T16:51:38.075Z`. The value is a dictionary with the following:"
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "created_at",
            "schema": {
              "type": "object",
              "properties": {
                "lt": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Return results where the created_at field is less than this value."
                },
                "lte": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Return results where the created_at field is less than or equal to this value."
                },
                "gt": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Return results where the created_at field is greater than this value."
                },
                "gte": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Return results where the created_at field is greater than or equal to this value."
                }
              },
              "description": "A time based range filter on the list based on the object created_at field. For example `?created_at[gt]=2021-05-10T16:51:38.075Z&created_at[lte]=2021-05-26T16:51:38.075Z`. The value is a dictionary with the following:"
            },
            "required": false,
            "description": "A time based range filter on the list based on the object created_at field. For example `?created_at[gt]=2021-05-10T16:51:38.075Z&created_at[lte]=2021-05-26T16:51:38.075Z`. The value is a dictionary with the following:"
          }
        ],
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "object": {
                      "type": "string",
                      "default": "list",
                      "enum": [
                        "list"
                      ],
                      "example": "list",
                      "description": "Always `list`."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/document"
                      },
                      "description": "Array of results"
                    },
                    "has_more": {
                      "type": "boolean",
                      "description": "Contains `true` if there is another page of results available."
                    }
                  },
                  "required": [
                    "object",
                    "data",
                    "has_more"
                  ]
                }
              }
            }
          }
        },
        "x-methodName": "list",
        "x-belongsToResource": "document"
      }
    },
    "/v1/documents/{id}": {
      "post": {
        "summary": "Update a Document",
        "description": "Updates the specified document by setting the values of the parameters passed. Any parameters not provided will be left unchanged.",
        "tags": [
          "Document"
        ],
        "parameters": [
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "id",
            "schema": {
              "type": "string",
              "example": "doc_XVkdMBfc6BXlkFJ9K23G",
              "description": "Unique ID of the document."
            },
            "required": true,
            "description": "Unique ID of the document."
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "date": {
                    "type": "string",
                    "format": "date-time",
                    "description": "When the document was originally created or authored. When creating a document, if no date is provided, the date the document is created is used.",
                    "example": "2021-05-13T16:33:00.000Z"
                  },
                  "internal": {
                    "type": "boolean",
                    "description": "Whether only internal users or a member can view this document. If not specified, the default is false and a member can view the document.",
                    "example": true
                  },
                  "name": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 255,
                    "description": "A short-form name of the document.",
                    "example": "Lab Result 05/01/22"
                  },
                  "description": {
                    "type": "string",
                    "maxLength": 4096,
                    "nullable": true,
                    "description": "A long-form text description of the document.",
                    "example": "Lab Results from May 1st, 2022. Includes a CBC, Lipid Panel, and Chem-12."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/document"
                }
              }
            }
          }
        },
        "x-methodName": "update",
        "x-belongsToResource": "document"
      },
      "get": {
        "summary": "Retrieve a Document",
        "description": "Retrieves the details of an existing document. You need only supply the unique document identifier that was returned upon creation or when listing documents.",
        "tags": [
          "Document"
        ],
        "parameters": [
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "id",
            "schema": {
              "type": "string",
              "example": "doc_XVkdMBfc6BXlkFJ9K23G",
              "description": "Unique ID of the document."
            },
            "required": true,
            "description": "Unique ID of the document."
          }
        ],
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/document"
                }
              }
            }
          }
        },
        "x-methodName": "retrieve",
        "x-belongsToResource": "document"
      },
      "delete": {
        "summary": "Delete a Document",
        "description": "Deletes the specified document. When a document is deleted, the associated file is not guaranteed to remain stored by Source and can no longer be accessed by a member.",
        "tags": [
          "Document"
        ],
        "parameters": [
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "id",
            "schema": {
              "type": "string",
              "example": "doc_XVkdMBfc6BXlkFJ9K23G",
              "description": "Unique ID of the document."
            },
            "required": true,
            "description": "Unique ID of the document."
          }
        ],
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/document"
                }
              }
            }
          }
        },
        "x-methodName": "delete",
        "x-belongsToResource": "document"
      }
    },
    "/v1/encounters": {
      "post": {
        "summary": "Create an Encounter",
        "description": "Creates a new encounter for the specified member. An encounter requires at least a start timestamp and can optionally include resources related to the encounter.",
        "tags": [
          "Encounter"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "encounter_type": {
                    "type": "string",
                    "example": "entp_0IcPhnnAMjWduezNQRaC",
                    "description": "The encounter type to use for this encounter."
                  },
                  "member": {
                    "type": "string",
                    "example": "mem_5QW8j1oKqQjNaPk4Hv3f",
                    "description": "The member to which this encounter belongs."
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "open",
                      "closed"
                    ],
                    "description": "Whether or not the encounter is open and requires follow-up or further documentation. Any note associated with an encounter must be signed before the encounter can be closed.",
                    "example": "open"
                  },
                  "start_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Timestamp of when the encounter started.",
                    "example": "2021-05-13T16:33:00.000Z"
                  },
                  "end_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Timestamp of when the encounter ended.",
                    "example": "2021-05-13T16:33:00.000Z"
                  },
                  "related": {
                    "type": "array",
                    "items": {
                      "anyOf": [
                        {
                          "type": "string",
                          "example": "appt_mTvufYJBBgYmbEAEZ6rE"
                        },
                        {
                          "type": "string",
                          "example": "fr_mk29zZR6Qr5u5Q0BRHwu"
                        }
                      ],
                      "description": "Unique identifier for the related resource.",
                      "example": "appt_mTvufYJBBgYmbEAEZ6rE"
                    },
                    "nullable": true,
                    "description": "List of unique identifiers of resources related to the encounter, such as appointments and form responses. Providing related resources input replaces any existing related resources on the encounter. Providing null or an empty list empties out the list of related resources."
                  },
                  "assignee": {
                    "type": "string",
                    "example": "usr_qoGndHzx8KwdYsEByt9X",
                    "nullable": true,
                    "description": "The user to which the task associated with the open encounter should be assigned. If not specified, the task follows task routing configuration to choose an assignee. When creating or updating an open encounter, you can use this parameter for convenience to route the encounter task to a specific assignee. The task itself can also be updated directly using the Task API."
                  }
                },
                "required": [
                  "encounter_type",
                  "member"
                ]
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/encounter"
                }
              }
            }
          }
        },
        "x-methodName": "create",
        "x-belongsToResource": "encounter"
      },
      "get": {
        "summary": "List all Encounters",
        "description": "Returns a list of encounters within the current account.\n\nThe encounters by default are sorted by creation date, with the most recently created encounter appearing first.",
        "tags": [
          "Encounter"
        ],
        "parameters": [
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "ending_before",
            "schema": {
              "type": "string",
              "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_bar, your subsequent call can include ending_before=obj_bar in order to fetch the previous page of the list."
            },
            "required": false,
            "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_bar, your subsequent call can include ending_before=obj_bar in order to fetch the previous page of the list."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "starting_after",
            "schema": {
              "type": "string",
              "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include starting_after=obj_foo in order to fetch the next page of the list."
            },
            "required": false,
            "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include starting_after=obj_foo in order to fetch the next page of the list."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "limit",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100."
            },
            "required": false,
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "sort",
            "schema": {
              "type": "string",
              "enum": [
                "created_at",
                "-created_at"
              ],
              "description": "Sort field for the results. A '-' prefix indicates sorting by that field in descending order, otherwise the order will be ascending.",
              "example": "created_at"
            },
            "required": false,
            "description": "Sort field for the results. A '-' prefix indicates sorting by that field in descending order, otherwise the order will be ascending."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "encounter_type",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "entp_0IcPhnnAMjWduezNQRaC"
              },
              "description": "Filter results by encounter type. If multiple encounter type ids are provided, encounters matching any of the provided encounter types will be returned."
            },
            "required": false,
            "description": "Filter results by encounter type. If multiple encounter type ids are provided, encounters matching any of the provided encounter types will be returned."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "member",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "mem_5QW8j1oKqQjNaPk4Hv3f"
              },
              "description": "Filter results by member. If multiple member ids are provided, encounters matching any of the provided members will be returned."
            },
            "required": false,
            "description": "Filter results by member. If multiple member ids are provided, encounters matching any of the provided members will be returned."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "status",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "open",
                  "closed"
                ]
              },
              "description": "Filter results by status."
            },
            "required": false,
            "description": "Filter results by status."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "related",
            "schema": {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "type": "string",
                    "example": "appt_mTvufYJBBgYmbEAEZ6rE"
                  },
                  {
                    "type": "string",
                    "example": "fr_mk29zZR6Qr5u5Q0BRHwu"
                  }
                ],
                "description": "Unique identifier for the related resource.",
                "example": "appt_mTvufYJBBgYmbEAEZ6rE"
              },
              "description": "Filter results by related resources."
            },
            "required": false,
            "description": "Filter results by related resources."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "start_at",
            "schema": {
              "type": "object",
              "properties": {
                "lt": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Return results where the start_at field is less than this value."
                },
                "lte": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Return results where the start_at field is less than or equal to this value."
                },
                "gt": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Return results where the start_at field is greater than this value."
                },
                "gte": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Return results where the start_at field is greater than or equal to this value."
                }
              },
              "description": "A time based range filter on the list based on the object start_at field. For example `?start_at[gt]=2021-05-10T16:51:38.075Z&start_at[lte]=2021-05-26T16:51:38.075Z`. The value is a dictionary with the following:"
            },
            "required": false,
            "description": "A time based range filter on the list based on the object start_at field. For example `?start_at[gt]=2021-05-10T16:51:38.075Z&start_at[lte]=2021-05-26T16:51:38.075Z`. The value is a dictionary with the following:"
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "include_deleted",
            "schema": {
              "type": "boolean",
              "description": "When set to true, deleted encounters are included."
            },
            "required": false,
            "description": "When set to true, deleted encounters are included."
          }
        ],
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "object": {
                      "type": "string",
                      "default": "list",
                      "enum": [
                        "list"
                      ],
                      "example": "list",
                      "description": "Always `list`."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/encounter"
                      },
                      "description": "Array of results"
                    },
                    "has_more": {
                      "type": "boolean",
                      "description": "Contains `true` if there is another page of results available."
                    }
                  },
                  "required": [
                    "object",
                    "data",
                    "has_more"
                  ]
                }
              }
            }
          }
        },
        "x-methodName": "list",
        "x-belongsToResource": "encounter"
      }
    },
    "/v1/encounters/{id}": {
      "post": {
        "summary": "Update an Encounter",
        "description": "Updates the specified encounter by setting the values of the parameters passed. Any parameters not provided will be left unchanged.",
        "tags": [
          "Encounter"
        ],
        "parameters": [
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "id",
            "schema": {
              "type": "string",
              "example": "enc_QTt9bgcEaw5e9jpGnmzj",
              "description": "Unique ID of the encounter."
            },
            "required": true,
            "description": "Unique ID of the encounter."
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string",
                    "enum": [
                      "open",
                      "closed"
                    ],
                    "description": "Whether or not the encounter is open and requires follow-up or further documentation. Any note associated with an encounter must be signed before the encounter can be closed.",
                    "example": "open"
                  },
                  "start_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Timestamp of when the encounter started.",
                    "example": "2021-05-13T16:33:00.000Z"
                  },
                  "end_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Timestamp of when the encounter ended.",
                    "example": "2021-05-13T16:33:00.000Z"
                  },
                  "related": {
                    "type": "array",
                    "items": {
                      "anyOf": [
                        {
                          "type": "string",
                          "example": "appt_mTvufYJBBgYmbEAEZ6rE"
                        },
                        {
                          "type": "string",
                          "example": "fr_mk29zZR6Qr5u5Q0BRHwu"
                        }
                      ],
                      "description": "Unique identifier for the related resource.",
                      "example": "appt_mTvufYJBBgYmbEAEZ6rE"
                    },
                    "nullable": true,
                    "description": "List of unique identifiers of resources related to the encounter, such as appointments and form responses. Providing related resources input replaces any existing related resources on the encounter. Providing null or an empty list empties out the list of related resources."
                  },
                  "assignee": {
                    "type": "string",
                    "example": "usr_qoGndHzx8KwdYsEByt9X",
                    "nullable": true,
                    "description": "The user to which the task associated with the open encounter should be assigned. If not specified, the task follows task routing configuration to choose an assignee. When creating or updating an open encounter, you can use this parameter for convenience to route the encounter task to a specific assignee. The task itself can also be updated directly using the Task API."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/encounter"
                }
              }
            }
          }
        },
        "x-methodName": "update",
        "x-belongsToResource": "encounter"
      },
      "delete": {
        "summary": "Delete an Encounter",
        "description": "Deletes an encounter.\n\nDeleting an encounter is only possible when any associated notes are themselves deleted. The associated encounter.deleted event will contain the array of related resources for the encounter as it existed prior to deletion. When retrieving deleted encounters, note that the array or related resources will be empty.",
        "tags": [
          "Encounter"
        ],
        "parameters": [
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "id",
            "schema": {
              "type": "string",
              "example": "enc_QTt9bgcEaw5e9jpGnmzj",
              "description": "Unique ID of the encounter."
            },
            "required": true,
            "description": "Unique ID of the encounter."
          }
        ],
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/encounter"
                }
              }
            }
          }
        },
        "x-methodName": "delete",
        "x-belongsToResource": "encounter"
      },
      "get": {
        "summary": "Retrieve an Encounter",
        "description": "Retrieves the details of an existing encounter. You need only supply the unique encounter identifier that was returned upon creation.",
        "tags": [
          "Encounter"
        ],
        "parameters": [
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "id",
            "schema": {
              "type": "string",
              "example": "enc_QTt9bgcEaw5e9jpGnmzj",
              "description": "Unique ID of the encounter."
            },
            "required": true,
            "description": "Unique ID of the encounter."
          }
        ],
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/encounter"
                }
              }
            }
          }
        },
        "x-methodName": "retrieve",
        "x-belongsToResource": "encounter"
      }
    },
    "/v1/encounter_types": {
      "post": {
        "summary": "Create an Encounter Type",
        "description": "Creates a new encounter type in Source.\n\nAfter creating an encounter type, you can relate the encounter type to appointment types and forms in order to begin creating encounters.",
        "tags": [
          "Encounter Type"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "key": {
                    "type": "string",
                    "description": "Unique key for this encounter type. You can use this when creating encounters via the API. In order to avoid potential confusion when distinguishing between encounter type IDs and keys, keys must not start with `entp_`.",
                    "example": "form-response-completed"
                  },
                  "name": {
                    "type": "string",
                    "description": "Name of this encounter type. When a task associated with an encounter is created, the encounter type's name is used to populate the task summary.",
                    "example": "Form Response Completed"
                  },
                  "description": {
                    "type": "string",
                    "nullable": true,
                    "description": "Description of this encounter type. This description is not displayed and is used to capture administrative notes about the encounter type."
                  },
                  "queue": {
                    "type": "string",
                    "example": "que_6NGuKD4KdMCGXLP6uBda",
                    "nullable": true,
                    "description": "Queue through which tasks related to encounters of this type should be routed in order to find an assignee. This queue overrides any queue specified in the task definition for open encounters. You can always change the queue for a given task once that task has been created."
                  },
                  "quick": {
                    "type": "boolean",
                    "description": "Whether or not the encounter type is available for users to create ad hoc encounters in the Source Clinical UI without first booking an appointment or receiving a form response. If not specified, by default, the encounter type is not available in the Clinical UI for creating ad hoc encounters."
                  }
                },
                "required": [
                  "key",
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/encounter_type"
                }
              }
            }
          }
        },
        "x-methodName": "create",
        "x-belongsToResource": "encounter_type"
      },
      "get": {
        "summary": "List all Encounter Types",
        "description": "Returns a list of encounter types within the current account. The encounter types returned are sorted by creation date, with the most recently added encounter type appearing first.",
        "tags": [
          "Encounter Type"
        ],
        "parameters": [
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "ending_before",
            "schema": {
              "type": "string",
              "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_bar, your subsequent call can include ending_before=obj_bar in order to fetch the previous page of the list."
            },
            "required": false,
            "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_bar, your subsequent call can include ending_before=obj_bar in order to fetch the previous page of the list."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "starting_after",
            "schema": {
              "type": "string",
              "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include starting_after=obj_foo in order to fetch the next page of the list."
            },
            "required": false,
            "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include starting_after=obj_foo in order to fetch the next page of the list."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "limit",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100."
            },
            "required": false,
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "sort",
            "schema": {
              "type": "string",
              "enum": [
                "created_at",
                "name",
                "-created_at",
                "-name"
              ],
              "description": "Sort field for the results. A '-' prefix indicates sorting by that field in descending order, otherwise the order will be ascending.",
              "example": "created_at"
            },
            "required": false,
            "description": "Sort field for the results. A '-' prefix indicates sorting by that field in descending order, otherwise the order will be ascending."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "queue",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "que_6NGuKD4KdMCGXLP6uBda"
              },
              "description": "Filter results by queue. If multiple queue ids are provided, encounter types matching any of the provided queues will be returned."
            },
            "required": false,
            "description": "Filter results by queue. If multiple queue ids are provided, encounter types matching any of the provided queues will be returned."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "archived",
            "schema": {
              "type": "boolean",
              "description": "Filter encounter types to only those whose archive status matches the provided value. By default, this operation return all encounter types. You may pass `archived=true` to show archived encounter types, or `archived=false` to show unarchived encounter types."
            },
            "required": false,
            "description": "Filter encounter types to only those whose archive status matches the provided value. By default, this operation return all encounter types. You may pass `archived=true` to show archived encounter types, or `archived=false` to show unarchived encounter types."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "name",
            "schema": {
              "type": "string",
              "description": "Limit results to encounters with name containing the given query."
            },
            "required": false,
            "description": "Limit results to encounters with name containing the given query."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "quick",
            "schema": {
              "type": "boolean",
              "description": "Filter encounter types to only those whose quick status matches the provided value. By default, this operation return all encounter types. You may pass `quick=true` to show quick encounter types, or `quick=false` to show non quick encounter types."
            },
            "required": false,
            "description": "Filter encounter types to only those whose quick status matches the provided value. By default, this operation return all encounter types. You may pass `quick=true` to show quick encounter types, or `quick=false` to show non quick encounter types."
          }
        ],
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "object": {
                      "type": "string",
                      "default": "list",
                      "enum": [
                        "list"
                      ],
                      "example": "list",
                      "description": "Always `list`."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/encounter_type"
                      },
                      "description": "Array of results"
                    },
                    "has_more": {
                      "type": "boolean",
                      "description": "Contains `true` if there is another page of results available."
                    }
                  },
                  "required": [
                    "object",
                    "data",
                    "has_more"
                  ]
                }
              }
            }
          }
        },
        "x-methodName": "list",
        "x-belongsToResource": "encounter_type"
      }
    },
    "/v1/encounter_types/{id}": {
      "post": {
        "summary": "Update an Encounter Type",
        "description": "Updates the specified encounter type by setting the values of the parameters passed. Any parameters not provided will be left unchanged.\n\nEncounters are linked to encounter types in Source, so some changes made to an encounter type will be visible on past encounters. However, changes to fields that influence encounter behavior, such as the queue, will apply only to new tasks that are related to open encounters.",
        "tags": [
          "Encounter Type"
        ],
        "parameters": [
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "id",
            "schema": {
              "type": "string",
              "example": "entp_0IcPhnnAMjWduezNQRaC",
              "description": "Unique ID of the encounter_type."
            },
            "required": true,
            "description": "Unique ID of the encounter_type."
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "key": {
                    "type": "string",
                    "description": "Unique key for this encounter type. You can use this when creating encounters via the API. In order to avoid potential confusion when distinguishing between encounter type IDs and keys, keys must not start with `entp_`.",
                    "example": "form-response-completed"
                  },
                  "name": {
                    "type": "string",
                    "description": "Name of this encounter type. When a task associated with an encounter is created, the encounter type's name is used to populate the task summary.",
                    "example": "Form Response Completed"
                  },
                  "description": {
                    "type": "string",
                    "nullable": true,
                    "description": "Description of this encounter type. This description is not displayed and is used to capture administrative notes about the encounter type."
                  },
                  "queue": {
                    "type": "string",
                    "example": "que_6NGuKD4KdMCGXLP6uBda",
                    "nullable": true,
                    "description": "Queue through which tasks related to encounters of this type should be routed in order to find an assignee. This queue overrides any queue specified in the task definition for open encounters. You can always change the queue for a given task once that task has been created."
                  },
                  "quick": {
                    "type": "boolean",
                    "description": "Whether or not the encounter type is available for users to create ad hoc encounters in the Source Clinical UI without first booking an appointment or receiving a form response. If not specified, by default, the encounter type is not available in the Clinical UI for creating ad hoc encounters."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/encounter_type"
                }
              }
            }
          }
        },
        "x-methodName": "update",
        "x-belongsToResource": "encounter_type"
      },
      "get": {
        "summary": "Retrieve an Encounter Type",
        "description": "Retrieves an encounter type by its unique identifier.",
        "tags": [
          "Encounter Type"
        ],
        "parameters": [
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "id",
            "schema": {
              "type": "string",
              "example": "entp_0IcPhnnAMjWduezNQRaC",
              "description": "Unique ID of the encounter_type."
            },
            "required": true,
            "description": "Unique ID of the encounter_type."
          }
        ],
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/encounter_type"
                }
              }
            }
          }
        },
        "x-methodName": "retrieve",
        "x-belongsToResource": "encounter_type"
      }
    },
    "/v1/encounter_types/{id}/archive": {
      "post": {
        "summary": "Archive an Encounter Type",
        "description": "Archives the specified encounter type. An archived encounter type can be viewed on any encounter it relates to but cannot be used to create new encounters.",
        "tags": [
          "Encounter Type"
        ],
        "parameters": [
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "id",
            "schema": {
              "type": "string",
              "example": "entp_0IcPhnnAMjWduezNQRaC",
              "description": "Unique ID of the encounter_type."
            },
            "required": true,
            "description": "Unique ID of the encounter_type."
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "replacement_encounter_type": {
                    "anyOf": [
                      {
                        "type": "string",
                        "example": "entp_0IcPhnnAMjWduezNQRaC"
                      },
                      {
                        "type": "string"
                      }
                    ],
                    "description": "The ID of the encounter type to use as a replacement for resources such as appointment types and forms that reference the archived encounter type. If not specified and the encounter type is related to an appointment type or a form, archiving will fail."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/encounter_type"
                }
              }
            }
          }
        },
        "x-methodName": "archive",
        "x-belongsToResource": "encounter_type"
      }
    },
    "/v1/encounter_types/{id}/unarchive": {
      "post": {
        "summary": "Unarchive an Encounter Type",
        "description": "Unarchives the specified encounter type. Once unarchived, the encounter type can be used to create new encounters.",
        "tags": [
          "Encounter Type"
        ],
        "parameters": [
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "id",
            "schema": {
              "type": "string",
              "example": "entp_0IcPhnnAMjWduezNQRaC",
              "description": "Unique ID of the encounter_type."
            },
            "required": true,
            "description": "Unique ID of the encounter_type."
          }
        ],
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/encounter_type"
                }
              }
            }
          }
        },
        "x-methodName": "unarchive",
        "x-belongsToResource": "encounter_type"
      }
    },
    "/v1/events/{id}": {
      "get": {
        "summary": "Retrieve an Event",
        "description": "Each event data is rendered according to Source API version at its creation time,       specified in event object api_version attribute (not according to your current Source       API version or Source-Version header).",
        "tags": [
          "Event"
        ],
        "parameters": [
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "id",
            "schema": {
              "type": "string",
              "example": "evt_9wV0vJk7AIdew6qi6fAQ",
              "description": "Unique ID of the event."
            },
            "required": true,
            "description": "Unique ID of the event."
          }
        ],
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/event"
                }
              }
            }
          }
        },
        "x-methodName": "retrieve",
        "x-belongsToResource": "event"
      }
    },
    "/v1/events": {
      "get": {
        "summary": "List all Events",
        "description": "List all stored events. Each event data is rendered according to Source API       version at its creation time, specified in event object api_version attribute (not according       to your current Source API version or Source-Version header).",
        "tags": [
          "Event"
        ],
        "parameters": [
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "ending_before",
            "schema": {
              "type": "string",
              "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_bar, your subsequent call can include ending_before=obj_bar in order to fetch the previous page of the list."
            },
            "required": false,
            "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_bar, your subsequent call can include ending_before=obj_bar in order to fetch the previous page of the list."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "starting_after",
            "schema": {
              "type": "string",
              "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include starting_after=obj_foo in order to fetch the next page of the list."
            },
            "required": false,
            "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include starting_after=obj_foo in order to fetch the next page of the list."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "limit",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100."
            },
            "required": false,
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "type",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Filter results by event type. Repeat this parameter to filter by multiple event types,         e.g. `?type=member.created&type=member.updated`"
            },
            "required": false,
            "description": "Filter results by event type. Repeat this parameter to filter by multiple event types,         e.g. `?type=member.created&type=member.updated`"
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "actor_type",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "user",
                  "member",
                  "api",
                  "system",
                  "anonymous",
                  "unknown"
                ]
              },
              "description": "Filter results to show only those events that were performed by a certain type of actor",
              "example": [
                "anonymous"
              ]
            },
            "required": false,
            "description": "Filter results to show only those events that were performed by a certain type of actor"
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "actor",
            "schema": {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "type": "string",
                    "example": "usr_qoGndHzx8KwdYsEByt9X"
                  },
                  {
                    "type": "string",
                    "example": "mem_5QW8j1oKqQjNaPk4Hv3f"
                  }
                ]
              },
              "description": "Filter results to show only those events that were performed by a specific actor",
              "example": [
                "usr_qoGndHzx8KwdYsEByt9X"
              ]
            },
            "required": false,
            "description": "Filter results to show only those events that were performed by a specific actor"
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "resource",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Filter results to show only those events that were performed on a specific resource"
            },
            "required": false,
            "description": "Filter results to show only those events that were performed on a specific resource"
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "member",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "mem_5QW8j1oKqQjNaPk4Hv3f"
              },
              "description": "Filter events for only those which pertain to the given members"
            },
            "required": false,
            "description": "Filter events for only those which pertain to the given members"
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "created_at",
            "schema": {
              "type": "object",
              "properties": {
                "lt": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Return results where the created_at field is less than this value."
                },
                "lte": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Return results where the created_at field is less than or equal to this value."
                },
                "gt": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Return results where the created_at field is greater than this value."
                },
                "gte": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Return results where the created_at field is greater than or equal to this value."
                }
              },
              "description": "A time based range filter on the list based on the object created_at field. For example `?created_at[gt]=2021-05-10T16:51:38.075Z&created_at[lte]=2021-05-26T16:51:38.075Z`. The value is a dictionary with the following:"
            },
            "required": false,
            "description": "A time based range filter on the list based on the object created_at field. For example `?created_at[gt]=2021-05-10T16:51:38.075Z&created_at[lte]=2021-05-26T16:51:38.075Z`. The value is a dictionary with the following:"
          }
        ],
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "object": {
                      "type": "string",
                      "default": "list",
                      "enum": [
                        "list"
                      ],
                      "example": "list",
                      "description": "Always `list`."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/event"
                      },
                      "description": "Array of results"
                    },
                    "has_more": {
                      "type": "boolean",
                      "description": "Contains `true` if there is another page of results available."
                    }
                  },
                  "required": [
                    "object",
                    "data",
                    "has_more"
                  ]
                }
              }
            }
          }
        },
        "x-methodName": "list",
        "x-belongsToResource": "event"
      }
    },
    "/v1/objects/{object}/fields": {
      "post": {
        "summary": "Create a Field",
        "description": "Creates a new field.\n\nCurrently, Source only allows the creation of custom fields on a member resource. Other resources will support fields in future API updates.",
        "tags": [
          "Field"
        ],
        "parameters": [
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "object",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "key": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 255,
                    "pattern": "^[a-z0-9_-]+$",
                    "description": "The key for this field, for use in the API. Keys must be alphanumeric strings and can contain hyphens or underscores.\n\nOnce a field has been created, its key cannot change. You are able to change its display name.",
                    "example": "payer"
                  },
                  "name": {
                    "type": "string",
                    "description": "The display name for a custom field. This is the name that will show in visual presentations of this field to members or users.",
                    "example": "Payer"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "string",
                      "text",
                      "number",
                      "date",
                      "enum"
                    ],
                    "description": "The data type of this custom field. The following data types are supported:\n\n- string: a single line of text, up to 255 characters\n\n- text: a long form text input, with no predefined length\n\n- number: a number, or string which can be interpreted as a number\n\n- date: a date, without a time component\n\nNote that once a field is created, its data type cannot change.",
                    "example": "string"
                  },
                  "description": {
                    "type": "string",
                    "nullable": true,
                    "description": "User-facing description for this field. This description can be updated as needed. Descriptions are not shared with members.",
                    "example": "Carrier for this member's insurance policy"
                  },
                  "member_access": {
                    "type": "string",
                    "enum": [
                      "none",
                      "read",
                      "write"
                    ],
                    "description": "Access level that members should be granted to this field. By default, fields are created with member access level 'none', indicating they can not read or write ot the field. You may also use 'read', which will allow members to read field data, but not write. Alternatively, you can use 'write' which grants the member read/write access.",
                    "example": "none"
                  },
                  "options": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "key": {
                          "type": "string"
                        },
                        "label": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "key",
                        "label"
                      ]
                    },
                    "description": "A list of options available for this field. You can create and update an array of options, each with a unique key and a display label, in order to store discrete values within the field.",
                    "example": [
                      {
                        "key": "aetna",
                        "label": "Aetna"
                      },
                      {
                        "key": "humana",
                        "label": "Humana"
                      }
                    ]
                  }
                },
                "required": [
                  "key",
                  "name",
                  "type"
                ]
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/field"
                }
              }
            }
          }
        },
        "x-methodName": "create",
        "x-belongsToResource": "field"
      },
      "get": {
        "summary": "List all Fields",
        "description": "Lists all fields belonging to the provided object.",
        "tags": [
          "Field"
        ],
        "parameters": [
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "object",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "ending_before",
            "schema": {
              "type": "string",
              "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_bar, your subsequent call can include ending_before=obj_bar in order to fetch the previous page of the list."
            },
            "required": false,
            "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_bar, your subsequent call can include ending_before=obj_bar in order to fetch the previous page of the list."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "starting_after",
            "schema": {
              "type": "string",
              "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include starting_after=obj_foo in order to fetch the next page of the list."
            },
            "required": false,
            "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include starting_after=obj_foo in order to fetch the next page of the list."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "limit",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100."
            },
            "required": false,
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100."
          }
        ],
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "object": {
                      "type": "string",
                      "default": "list",
                      "enum": [
                        "list"
                      ],
                      "example": "list",
                      "description": "Always `list`."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/field"
                      },
                      "description": "Array of results"
                    },
                    "has_more": {
                      "type": "boolean",
                      "description": "Contains `true` if there is another page of results available."
                    }
                  },
                  "required": [
                    "object",
                    "data",
                    "has_more"
                  ]
                }
              }
            }
          }
        },
        "x-methodName": "list",
        "x-belongsToResource": "field"
      }
    },
    "/v1/objects/{object}/fields/{id}": {
      "post": {
        "summary": "Update a Field",
        "description": "Updates an existing field, referenced by its unique identifier.\n\nOnce a field is created, its neither its key nor data type can be modified. If you need to change data types, you may create another field, migrate the data using the API, and delete the first field.",
        "tags": [
          "Field"
        ],
        "parameters": [
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "object",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "id",
            "schema": {
              "type": "string",
              "example": "cf_LQliw4doEFtGKl1Bb9vJ",
              "description": "Unique ID of the field."
            },
            "required": true,
            "description": "Unique ID of the field."
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The display name for a custom field. This is the name that will show in visual presentations of this field to members or users.",
                    "example": "Payer"
                  },
                  "description": {
                    "type": "string",
                    "nullable": true,
                    "description": "User-facing description for this field. This description can be updated as needed. Descriptions are not shared with members.",
                    "example": "Carrier for this member's insurance policy"
                  },
                  "member_access": {
                    "type": "string",
                    "enum": [
                      "none",
                      "read",
                      "write"
                    ],
                    "description": "Access level that members should be granted to this field. By default, fields are created with member access level 'none', indicating they can not read or write ot the field. You may also use 'read', which will allow members to read field data, but not write. Alternatively, you can use 'write' which grants the member read/write access.",
                    "example": "none"
                  },
                  "options": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "key": {
                          "type": "string"
                        },
                        "label": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "key",
                        "label"
                      ]
                    },
                    "description": "A list of options available for this field. You can create and update an array of options, each with a unique key and a display label, in order to store discrete values within the field.",
                    "example": [
                      {
                        "key": "aetna",
                        "label": "Aetna"
                      },
                      {
                        "key": "humana",
                        "label": "Humana"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/field"
                }
              }
            }
          }
        },
        "x-methodName": "update",
        "x-belongsToResource": "field"
      },
      "get": {
        "summary": "Retrieve a Field",
        "description": "Retrieves the details of an existing field on an object.",
        "tags": [
          "Field"
        ],
        "parameters": [
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "object",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "id",
            "schema": {
              "type": "string",
              "example": "cf_LQliw4doEFtGKl1Bb9vJ",
              "description": "Unique ID of the field."
            },
            "required": true,
            "description": "Unique ID of the field."
          }
        ],
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/field"
                }
              }
            }
          }
        },
        "x-methodName": "retrieve",
        "x-belongsToResource": "field"
      },
      "delete": {
        "summary": "Delete a Field",
        "description": "Deletes an existing field, referenced by its unique identifier.\n\n**Important**: Deleting a field is a destructive action. When deleting a field, Source schedules a cleanup action that will remove any value provided to that field, for any resource referencing the field. This action is irreversible.\n\nPlease ensure you no longer need the data in a field before deleting it.",
        "tags": [
          "Field"
        ],
        "parameters": [
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "object",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "id",
            "schema": {
              "type": "string",
              "example": "cf_LQliw4doEFtGKl1Bb9vJ",
              "description": "Unique ID of the field."
            },
            "required": true,
            "description": "Unique ID of the field."
          }
        ],
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/field"
                }
              }
            }
          }
        },
        "x-methodName": "delete",
        "x-belongsToResource": "field"
      }
    },
    "/v1/files": {
      "post": {
        "summary": "Upload a File",
        "description": "Uploads a file to Source by sending a `multipart/form-data` request containing the file to upload and any additional metadata.\n\nFiles must be uploaded through the files API before they can be attached to messages, set as profile photos, or otherwise used by the Source platform.",
        "tags": [
          "File"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary",
                    "description": "A file to upload. This field must be provided in a `multipart/form-data` request."
                  },
                  "purpose": {
                    "type": "string",
                    "enum": [
                      "message_attachment",
                      "photo",
                      "user_profile_photo",
                      "document",
                      "comment_attachment",
                      "account_logo",
                      "location_photo"
                    ],
                    "description": "The purpose of the uploaded file. Each purpose imposes restrictions on supported file types and use cases.",
                    "example": "message_attachment"
                  }
                },
                "required": [
                  "file",
                  "purpose"
                ]
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/file"
                }
              }
            }
          }
        },
        "x-overrideRequestBodyCodec": {
          "options": {},
          "props": {
            "file": {
              "options": {
                "description": "A file to upload. This field must be provided in a `multipart/form-data` request."
              },
              "_tag": "FileCodec"
            },
            "purpose": {
              "options": {
                "description": "The purpose of the uploaded file. Each purpose imposes restrictions on supported file types and use cases.",
                "example": "message_attachment"
              },
              "enumObject": [
                "message_attachment",
                "photo",
                "user_profile_photo",
                "document",
                "comment_attachment",
                "account_logo",
                "location_photo"
              ],
              "_tag": "EnumCodec",
              "enumValues": {}
            }
          },
          "_tag": "ObjectCodec",
          "properties": {},
          "requiredProperties": {}
        },
        "x-methodName": "create",
        "x-belongsToResource": "file"
      }
    },
    "/v1/files/{id}": {
      "get": {
        "summary": "Retrieve a File",
        "description": "Retrieves the details of an existing file. You need only supply the unique file identifier that was returned upon file creation.",
        "tags": [
          "File"
        ],
        "parameters": [
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "id",
            "schema": {
              "type": "string",
              "example": "file_0A9zrLzCO7KPcnIbs40e",
              "description": "Unique ID of the file."
            },
            "required": true,
            "description": "Unique ID of the file."
          }
        ],
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/file"
                }
              }
            }
          }
        },
        "x-methodName": "retrieve",
        "x-belongsToResource": "file"
      }
    },
    "/v1/forms": {
      "post": {
        "summary": "Create a Form",
        "description": "Creates a new form with a single draft form version. After creating a form, you can use the update draft version endpoint to modify the form's contents.",
        "tags": [
          "Form"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "key": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 255,
                    "pattern": "^[a-z0-9_-]+$",
                    "description": "Unique key for this form. You can use this when creating form responses via the API. In order to avoid potential confusion when distinguishing between form IDs and form keys, keys must not start with `form_`.",
                    "example": "intake"
                  },
                  "name": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 255,
                    "description": "Description of this form. This description will be shown to responders when attempting to respond to this form. While not required, it can be helpful to share details about the form's purpose.",
                    "example": "Intake"
                  },
                  "description": {
                    "type": "string",
                    "maxLength": 4096,
                    "nullable": true,
                    "description": "Description of this form",
                    "example": "Intake questionnaire to be filled out before first appointment."
                  },
                  "public": {
                    "type": "boolean",
                    "description": "Whether or not this form can be directly accessed by a public responder. For example, set public to true for a public-facing intake form that should be accessible to anyone.",
                    "example": false
                  },
                  "encounter_type": {
                    "anyOf": [
                      {
                        "type": "string",
                        "example": "entp_0IcPhnnAMjWduezNQRaC"
                      },
                      {
                        "type": "string"
                      }
                    ],
                    "description": "The encounter type for the encounter that Source creates automatically when a response to this form is submitted. If this field is null, an encounter is not created automatically for each form response."
                  }
                },
                "required": [
                  "key",
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/form"
                }
              }
            }
          }
        },
        "x-methodName": "create",
        "x-belongsToResource": "form"
      },
      "get": {
        "summary": "List all Forms",
        "description": "Returns a list of forms within the current account. The forms returned are sorted by creation date, with the most recently added form appearing first.",
        "tags": [
          "Form"
        ],
        "parameters": [
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "ending_before",
            "schema": {
              "type": "string",
              "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_bar, your subsequent call can include ending_before=obj_bar in order to fetch the previous page of the list."
            },
            "required": false,
            "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_bar, your subsequent call can include ending_before=obj_bar in order to fetch the previous page of the list."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "starting_after",
            "schema": {
              "type": "string",
              "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include starting_after=obj_foo in order to fetch the next page of the list."
            },
            "required": false,
            "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include starting_after=obj_foo in order to fetch the next page of the list."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "limit",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100."
            },
            "required": false,
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "sort",
            "schema": {
              "type": "string",
              "enum": [
                "name",
                "created_at",
                "-name",
                "-created_at"
              ],
              "description": "Sort field for the results. A '-' prefix indicates sorting by that field in descending order, otherwise the order will be ascending.",
              "example": "name"
            },
            "required": false,
            "description": "Sort field for the results. A '-' prefix indicates sorting by that field in descending order, otherwise the order will be ascending."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "name",
            "schema": {
              "type": "string",
              "description": "Limit results to forms with name containing the given query."
            },
            "required": false,
            "description": "Limit results to forms with name containing the given query."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "archived",
            "schema": {
              "type": "boolean",
              "description": "Filter forms by archived or unarchived."
            },
            "required": false,
            "description": "Filter forms by archived or unarchived."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "published",
            "schema": {
              "type": "boolean",
              "description": "Filter forms by published or unpublished."
            },
            "required": false,
            "description": "Filter forms by published or unpublished."
          }
        ],
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "object": {
                      "type": "string",
                      "default": "list",
                      "enum": [
                        "list"
                      ],
                      "example": "list",
                      "description": "Always `list`."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/form"
                      },
                      "description": "Array of results"
                    },
                    "has_more": {
                      "type": "boolean",
                      "description": "Contains `true` if there is another page of results available."
                    }
                  },
                  "required": [
                    "object",
                    "data",
                    "has_more"
                  ]
                }
              }
            }
          }
        },
        "x-methodName": "list",
        "x-belongsToResource": "form"
      }
    },
    "/v1/forms/{id}": {
      "post": {
        "summary": "Update a Form",
        "description": "Updates a form. You can update the name, key, or description of a form. Updates to these fields affect all versions of the form.",
        "tags": [
          "Form"
        ],
        "parameters": [
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "id",
            "schema": {
              "type": "string",
              "example": "form_hSGPOT5BMusNLwDI3Z4N",
              "description": "Unique ID of the form."
            },
            "required": true,
            "description": "Unique ID of the form."
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "key": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 255,
                    "pattern": "^[a-z0-9_-]+$",
                    "description": "Unique key for this form. You can use this when creating form responses via the API. In order to avoid potential confusion when distinguishing between form IDs and form keys, keys must not start with `form_`.",
                    "example": "intake"
                  },
                  "name": {
                    "type": "string",
                    "maxLength": 255,
                    "description": "Description of this form. This description will be shown to responders when attempting to respond to this form. While not required, it can be helpful to share details about the form's purpose.",
                    "example": "Intake"
                  },
                  "description": {
                    "type": "string",
                    "maxLength": 4096,
                    "nullable": true,
                    "description": "Description of this form",
                    "example": "Intake questionnaire to be filled out before first appointment."
                  },
                  "encounter_type": {
                    "anyOf": [
                      {
                        "type": "string",
                        "example": "entp_0IcPhnnAMjWduezNQRaC"
                      },
                      {
                        "type": "string"
                      }
                    ],
                    "nullable": true,
                    "description": "The encounter type for the encounter that Source creates automatically when a response to this form is submitted. If this field is null, an encounter is not created automatically for each form response."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/form"
                }
              }
            }
          }
        },
        "x-methodName": "update",
        "x-belongsToResource": "form"
      },
      "get": {
        "summary": "Retrieve a Form",
        "description": "Retrieves the details of an existing form. You need only supply the unique form identifier that was returned upon creation.",
        "tags": [
          "Form"
        ],
        "parameters": [
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "id",
            "schema": {
              "type": "string",
              "example": "form_hSGPOT5BMusNLwDI3Z4N",
              "description": "Unique ID of the form."
            },
            "required": true,
            "description": "Unique ID of the form."
          }
        ],
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/form"
                }
              }
            }
          }
        },
        "x-methodName": "retrieve",
        "x-belongsToResource": "form"
      }
    },
    "/v1/forms/{id}/archive": {
      "post": {
        "summary": "Archive a Form",
        "description": "Archives a specified form. Once archived, it can no longer be used to generate new form responses.  Existing form responses are not affected when a form is archived.",
        "tags": [
          "Form"
        ],
        "parameters": [
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "id",
            "schema": {
              "type": "string",
              "example": "form_hSGPOT5BMusNLwDI3Z4N",
              "description": "Unique ID of the form."
            },
            "required": true,
            "description": "Unique ID of the form."
          }
        ],
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/form"
                }
              }
            }
          }
        },
        "x-methodName": "archive",
        "x-belongsToResource": "form"
      }
    },
    "/v1/forms/{id}/unarchive": {
      "post": {
        "summary": "Unarchive a Form",
        "description": "Unarchives the specified form. Once unarchived, the form's published version can be again accessed to create form responses and the draft version of the form can be edited.",
        "tags": [
          "Form"
        ],
        "parameters": [
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "id",
            "schema": {
              "type": "string",
              "example": "form_hSGPOT5BMusNLwDI3Z4N",
              "description": "Unique ID of the form."
            },
            "required": true,
            "description": "Unique ID of the form."
          }
        ],
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/form"
                }
              }
            }
          }
        },
        "x-methodName": "unarchive",
        "x-belongsToResource": "form"
      }
    },
    "/v1/form_responses": {
      "post": {
        "summary": "Create a Form Response",
        "description": "Creates a new form response for the current active version of the form you specify. Optionally, you can associate the form with a member.",
        "tags": [
          "Form Response"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "form_version": {
                    "type": "string",
                    "example": "fv_ByJdV5tV3eJf6KRRfoGU",
                    "description": "The version of the form associated with this form response.  The form version associated with the response cannot be changed after creation. Any updates to this response relate to this same form version."
                  },
                  "member": {
                    "type": "string",
                    "example": "mem_5QW8j1oKqQjNaPk4Hv3f",
                    "description": "Member to which the form response belongs. Members can only view responses that are associated with them or with a member whose data they are authorized to access via a relationship."
                  },
                  "responses": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "key": {
                          "type": "string"
                        },
                        "value": {}
                      },
                      "required": [
                        "key",
                        "value"
                      ]
                    },
                    "description": "The individual responses that capture the author's answers to corresponding items within the form version. Each response is associated with the item key of the corresponding question in the form version."
                  },
                  "submit": {
                    "type": "boolean",
                    "description": "If true, submits the response after updating any included responses. Updates the form response status to 'completed'."
                  }
                },
                "required": [
                  "form_version"
                ]
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/form_response"
                }
              }
            }
          }
        },
        "x-methodName": "create",
        "x-belongsToResource": "form_response"
      },
      "get": {
        "summary": "List all Forms Responses",
        "description": "Returns a list of form responses within the current account. The responses returned are sorted by creation date, with the most recently added appearing first.",
        "tags": [
          "Form Response"
        ],
        "parameters": [
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "ending_before",
            "schema": {
              "type": "string",
              "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_bar, your subsequent call can include ending_before=obj_bar in order to fetch the previous page of the list."
            },
            "required": false,
            "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_bar, your subsequent call can include ending_before=obj_bar in order to fetch the previous page of the list."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "starting_after",
            "schema": {
              "type": "string",
              "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include starting_after=obj_foo in order to fetch the next page of the list."
            },
            "required": false,
            "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include starting_after=obj_foo in order to fetch the next page of the list."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "limit",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100."
            },
            "required": false,
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "sort",
            "schema": {
              "type": "string",
              "enum": [
                "created_at",
                "completed_at",
                "-created_at",
                "-completed_at"
              ],
              "description": "Sort field for the results. A '-' prefix indicates sorting by that field in descending order, otherwise the order will be ascending.",
              "example": "created_at"
            },
            "required": false,
            "description": "Sort field for the results. A '-' prefix indicates sorting by that field in descending order, otherwise the order will be ascending."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "form",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "form_hSGPOT5BMusNLwDI3Z4N"
              },
              "description": "Filter results by form. If multiple form ids are provided, responses matching any of the provided forms will be returned."
            },
            "required": false,
            "description": "Filter results by form. If multiple form ids are provided, responses matching any of the provided forms will be returned."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "member",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "mem_5QW8j1oKqQjNaPk4Hv3f"
              },
              "description": "Filter results by member. If multiple member ids are provided, responses matching any of the provided members will be returned."
            },
            "required": false,
            "description": "Filter results by member. If multiple member ids are provided, responses matching any of the provided members will be returned."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "author",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Filter results by author."
            },
            "required": false,
            "description": "Filter results by author."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "status",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "not_started",
                  "started",
                  "completed"
                ]
              },
              "description": "Filter results by status."
            },
            "required": false,
            "description": "Filter results by status."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "created_at",
            "schema": {
              "type": "object",
              "properties": {
                "lt": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Return results where the created_at field is less than this value."
                },
                "lte": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Return results where the created_at field is less than or equal to this value."
                },
                "gt": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Return results where the created_at field is greater than this value."
                },
                "gte": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Return results where the created_at field is greater than or equal to this value."
                }
              },
              "description": "A time based range filter on the list based on the object created_at field. For example `?created_at[gt]=2021-05-10T16:51:38.075Z&created_at[lte]=2021-05-26T16:51:38.075Z`. The value is a dictionary with the following:"
            },
            "required": false,
            "description": "A time based range filter on the list based on the object created_at field. For example `?created_at[gt]=2021-05-10T16:51:38.075Z&created_at[lte]=2021-05-26T16:51:38.075Z`. The value is a dictionary with the following:"
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "completed_at",
            "schema": {
              "type": "object",
              "properties": {
                "lt": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Return results where the completed_at field is less than this value."
                },
                "lte": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Return results where the completed_at field is less than or equal to this value."
                },
                "gt": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Return results where the completed_at field is greater than this value."
                },
                "gte": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Return results where the completed_at field is greater than or equal to this value."
                }
              },
              "description": "A time based range filter on the list based on the object completed_at field. For example `?completed_at[gt]=2021-05-10T16:51:38.075Z&completed_at[lte]=2021-05-26T16:51:38.075Z`. The value is a dictionary with the following:"
            },
            "required": false,
            "description": "A time based range filter on the list based on the object completed_at field. For example `?completed_at[gt]=2021-05-10T16:51:38.075Z&completed_at[lte]=2021-05-26T16:51:38.075Z`. The value is a dictionary with the following:"
          }
        ],
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "object": {
                      "type": "string",
                      "default": "list",
                      "enum": [
                        "list"
                      ],
                      "example": "list",
                      "description": "Always `list`."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/form_response"
                      },
                      "description": "Array of results"
                    },
                    "has_more": {
                      "type": "boolean",
                      "description": "Contains `true` if there is another page of results available."
                    }
                  },
                  "required": [
                    "object",
                    "data",
                    "has_more"
                  ]
                }
              }
            }
          }
        },
        "x-methodName": "list",
        "x-belongsToResource": "form_response"
      }
    },
    "/v1/form_responses/{id}": {
      "post": {
        "summary": "Update a Form Response",
        "description": "Updates a form response.\n\nResponses included in the update request are updated and/or appended to the existing response based on each response's associated item key. You can submit a form response when the response is complete using the 'submit' parameter.",
        "tags": [
          "Form Response"
        ],
        "parameters": [
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "id",
            "schema": {
              "type": "string",
              "example": "fr_mk29zZR6Qr5u5Q0BRHwu",
              "description": "Unique ID of the form_response."
            },
            "required": true,
            "description": "Unique ID of the form_response."
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "responses": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "key": {
                          "type": "string"
                        },
                        "value": {}
                      },
                      "required": [
                        "key",
                        "value"
                      ]
                    },
                    "description": "The individual responses that capture the author's answers to corresponding items within the form version. Each response is associated with the item key of the corresponding question in the form version."
                  },
                  "submit": {
                    "type": "boolean",
                    "description": "If true, submits the response after updating any included responses. Updates the form response status to 'completed'."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/form_response"
                }
              }
            }
          }
        },
        "x-methodName": "update",
        "x-belongsToResource": "form_response"
      },
      "get": {
        "summary": "Retrieve a Form Response",
        "description": "Retrieves the details of an existing form response. You need only supply the unique form identifier that was returned upon creation.",
        "tags": [
          "Form Response"
        ],
        "parameters": [
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "id",
            "schema": {
              "type": "string",
              "example": "fr_mk29zZR6Qr5u5Q0BRHwu",
              "description": "Unique ID of the form_response."
            },
            "required": true,
            "description": "Unique ID of the form_response."
          }
        ],
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/form_response"
                }
              }
            }
          }
        },
        "x-methodName": "retrieve",
        "x-belongsToResource": "form_response"
      }
    },
    "/v1/forms/{form}/versions/latest": {
      "post": {
        "summary": "Update a Draft Form Version",
        "description": "Updates a form version. If there is no draft version of the form, a new draft version is created with the parameters provided.",
        "tags": [
          "Form"
        ],
        "parameters": [
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "form",
            "schema": {
              "type": "string",
              "example": "form_hSGPOT5BMusNLwDI3Z4N",
              "description": "Unique ID for the form."
            },
            "required": true,
            "description": "Unique ID for the form."
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "changelog": {
                    "type": "string",
                    "nullable": true,
                    "description": "Description of changes within this form version. You can use the changelog to describe the updates you are making within this form version relative to previous versions. The changelog is not visible to members and responders to the form."
                  },
                  "calculations": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "default": "calculation",
                          "enum": [
                            "calculation"
                          ],
                          "example": "calculation"
                        },
                        "key": {
                          "type": "string",
                          "minLength": 1,
                          "maxLength": 255,
                          "pattern": "^[a-zA-Z0-9_]+$",
                          "description": "Unique key of this item within the form. Used in responses and conditional logic.",
                          "example": "demographics_name"
                        },
                        "title": {
                          "type": "string",
                          "description": "Display title of this question in the form, i.e. the question text itself.",
                          "example": "How do you feel today?"
                        },
                        "expression": {
                          "type": "string",
                          "description": "Formula that should be evaluated for this calculation",
                          "example": "IF(yes_no_question, \"True\", \"False\")"
                        },
                        "data_type": {
                          "type": "string",
                          "enum": [
                            "number",
                            "string",
                            "date",
                            "date_time"
                          ],
                          "description": "Expected data type returned from the formula",
                          "example": "string"
                        }
                      },
                      "required": [
                        "type",
                        "key",
                        "title",
                        "expression",
                        "data_type"
                      ],
                      "description": "A calculation to be performed on values within the form. This form node can be used to calculate a value for a field based on the values of questions or even other calculations."
                    },
                    "description": "An array of items that describe the form version's content and configuration. Pages form the top-level item and contain additional elements, such as questions, display elements, and groups of items."
                  },
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "default": "page",
                          "enum": [
                            "page"
                          ],
                          "example": "page"
                        },
                        "items": {
                          "type": "array",
                          "items": {
                            "oneOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "default": "group",
                                    "enum": [
                                      "group"
                                    ],
                                    "example": "group"
                                  },
                                  "items": {
                                    "type": "array",
                                    "items": {
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "type": {
                                              "type": "string",
                                              "default": "rich_text",
                                              "enum": [
                                                "rich_text"
                                              ],
                                              "example": "rich_text"
                                            },
                                            "content_type": {
                                              "type": "string",
                                              "enum": [
                                                "md"
                                              ],
                                              "description": "Type of the rich text content. Currently only `md` (i.e. Markdown) is supported.",
                                              "example": "md"
                                            },
                                            "content": {
                                              "type": "string",
                                              "description": "The rich text content, represented as Markdown text.",
                                              "example": "# The Title\n\nA paragraph\n\n- List Item 1\n-List Item 2"
                                            },
                                            "key": {
                                              "type": "string",
                                              "minLength": 1,
                                              "maxLength": 255,
                                              "pattern": "^[a-zA-Z0-9_]+$",
                                              "description": "Unique key of this item within the form. Used in responses and conditional logic.",
                                              "example": "demographics_name"
                                            },
                                            "conditional": {
                                              "oneOf": [
                                                {
                                                  "$ref": "#/components/schemas/CompoundConditional"
                                                }
                                              ],
                                              "x-wrapped": true,
                                              "description": "A conditional statement - if it evaluates to true, this question will be displayed, if false the question will not be displayed and no response will be recorded for it."
                                            }
                                          },
                                          "required": [
                                            "type",
                                            "content_type",
                                            "content",
                                            "key"
                                          ]
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "type": {
                                              "type": "string",
                                              "default": "name",
                                              "enum": [
                                                "name"
                                              ],
                                              "example": "name"
                                            },
                                            "title": {
                                              "type": "string",
                                              "description": "Display title of this question in the form, i.e. the question text itself.",
                                              "example": "How do you feel today?"
                                            },
                                            "description": {
                                              "type": "string",
                                              "description": "An optional secondary text for this question, which will be displayed under the title and can contain, for example, instructions on how to answer the question."
                                            },
                                            "required": {
                                              "type": "boolean",
                                              "description": "Whether a response to this question is required or optional. Questions that are hidden by conditional rules are never required to have a response."
                                            },
                                            "key": {
                                              "type": "string",
                                              "minLength": 1,
                                              "maxLength": 255,
                                              "pattern": "^[a-zA-Z0-9_]+$",
                                              "description": "Unique key of this item within the form. Used in responses and conditional logic.",
                                              "example": "demographics_name"
                                            },
                                            "conditional": {
                                              "oneOf": [
                                                {
                                                  "$ref": "#/components/schemas/CompoundConditional"
                                                }
                                              ],
                                              "x-wrapped": true,
                                              "description": "A conditional statement - if it evaluates to true, this question will be displayed, if false the question will not be displayed and no response will be recorded for it."
                                            },
                                            "destination": {
                                              "type": "string",
                                              "enum": [
                                                "member.name"
                                              ],
                                              "description": "Indicates that the response from this question should be used to populate or update the member's name."
                                            },
                                            "fields": {
                                              "type": "object",
                                              "properties": {
                                                "preferred": {
                                                  "type": "string",
                                                  "enum": [
                                                    "none",
                                                    "optional",
                                                    "required"
                                                  ],
                                                  "description": "Indicates whether the given sub-field should be displayed or not, and if so, whether a response is optional or required.",
                                                  "example": "optional"
                                                }
                                              },
                                              "required": [
                                                "preferred"
                                              ],
                                              "description": "Indicates which fields are optional, required, or should not be shown at all."
                                            }
                                          },
                                          "required": [
                                            "type",
                                            "title",
                                            "required",
                                            "key",
                                            "fields"
                                          ],
                                          "description": "A question for recording a person's name. Source uses multiple fields for names: First, middle, and last names, and an optional 'preferred' name field which can be disabled."
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "type": {
                                              "type": "string",
                                              "default": "date",
                                              "enum": [
                                                "date"
                                              ],
                                              "example": "date"
                                            },
                                            "title": {
                                              "type": "string",
                                              "description": "Display title of this question in the form, i.e. the question text itself.",
                                              "example": "How do you feel today?"
                                            },
                                            "description": {
                                              "type": "string",
                                              "description": "An optional secondary text for this question, which will be displayed under the title and can contain, for example, instructions on how to answer the question."
                                            },
                                            "required": {
                                              "type": "boolean",
                                              "description": "Whether a response to this question is required or optional. Questions that are hidden by conditional rules are never required to have a response."
                                            },
                                            "key": {
                                              "type": "string",
                                              "minLength": 1,
                                              "maxLength": 255,
                                              "pattern": "^[a-zA-Z0-9_]+$",
                                              "description": "Unique key of this item within the form. Used in responses and conditional logic.",
                                              "example": "demographics_name"
                                            },
                                            "conditional": {
                                              "oneOf": [
                                                {
                                                  "$ref": "#/components/schemas/CompoundConditional"
                                                }
                                              ],
                                              "x-wrapped": true,
                                              "description": "A conditional statement - if it evaluates to true, this question will be displayed, if false the question will not be displayed and no response will be recorded for it."
                                            },
                                            "destination": {
                                              "type": "string",
                                              "enum": [
                                                "member.date_of_birth"
                                              ],
                                              "description": "Indicates that the response from this question should be used to populate or update the member's date of birth."
                                            },
                                            "input_type": {
                                              "type": "string",
                                              "enum": [
                                                "date_picker",
                                                "date_entry"
                                              ],
                                              "description": "Which type of UI element to use - a calendar-style date picker or direct keyboard entry input box."
                                            }
                                          },
                                          "required": [
                                            "type",
                                            "title",
                                            "required",
                                            "key",
                                            "input_type"
                                          ],
                                          "description": "A question for recording a date. You can choose from two types of date input: one with a calendar-style date picker, intended for dates around the current date; and another designed for keyboard input, such as for historical dates like dates of birth."
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "type": {
                                              "type": "string",
                                              "default": "address",
                                              "enum": [
                                                "address"
                                              ],
                                              "example": "address"
                                            },
                                            "title": {
                                              "type": "string",
                                              "description": "Display title of this question in the form, i.e. the question text itself.",
                                              "example": "How do you feel today?"
                                            },
                                            "description": {
                                              "type": "string",
                                              "description": "An optional secondary text for this question, which will be displayed under the title and can contain, for example, instructions on how to answer the question."
                                            },
                                            "required": {
                                              "type": "boolean",
                                              "description": "Whether a response to this question is required or optional. Questions that are hidden by conditional rules are never required to have a response."
                                            },
                                            "key": {
                                              "type": "string",
                                              "minLength": 1,
                                              "maxLength": 255,
                                              "pattern": "^[a-zA-Z0-9_]+$",
                                              "description": "Unique key of this item within the form. Used in responses and conditional logic.",
                                              "example": "demographics_name"
                                            },
                                            "conditional": {
                                              "oneOf": [
                                                {
                                                  "$ref": "#/components/schemas/CompoundConditional"
                                                }
                                              ],
                                              "x-wrapped": true,
                                              "description": "A conditional statement - if it evaluates to true, this question will be displayed, if false the question will not be displayed and no response will be recorded for it."
                                            },
                                            "destination": {
                                              "type": "string",
                                              "enum": [
                                                "member.address"
                                              ],
                                              "description": "Indicates that the response from this question should be used to populate or update the member's address."
                                            },
                                            "fields": {
                                              "type": "object",
                                              "properties": {
                                                "street_line_1": {
                                                  "type": "string",
                                                  "enum": [
                                                    "none",
                                                    "optional",
                                                    "required"
                                                  ],
                                                  "description": "Indicates whether the given sub-field should be displayed or not, and if so, whether a response is optional or required.",
                                                  "example": "optional"
                                                },
                                                "street_line_2": {
                                                  "type": "string",
                                                  "enum": [
                                                    "none",
                                                    "optional",
                                                    "required"
                                                  ],
                                                  "description": "Indicates whether the given sub-field should be displayed or not, and if so, whether a response is optional or required.",
                                                  "example": "optional"
                                                },
                                                "city": {
                                                  "type": "string",
                                                  "enum": [
                                                    "none",
                                                    "optional",
                                                    "required"
                                                  ],
                                                  "description": "Indicates whether the given sub-field should be displayed or not, and if so, whether a response is optional or required.",
                                                  "example": "optional"
                                                },
                                                "postal_code": {
                                                  "type": "string",
                                                  "enum": [
                                                    "none",
                                                    "optional",
                                                    "required"
                                                  ],
                                                  "description": "Indicates whether the given sub-field should be displayed or not, and if so, whether a response is optional or required.",
                                                  "example": "optional"
                                                }
                                              },
                                              "required": [
                                                "street_line_1",
                                                "street_line_2",
                                                "city",
                                                "postal_code"
                                              ],
                                              "description": "Indicates which fields are optional, required, or should not be shown at all."
                                            }
                                          },
                                          "required": [
                                            "type",
                                            "title",
                                            "required",
                                            "key",
                                            "fields"
                                          ],
                                          "description": "A question for recording an address. Source uses multiple fields for addresses: `region` (corresponding to US state) is required, and the others can be configured as optional, required, or not shown at all."
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "type": {
                                              "type": "string",
                                              "default": "gender_identity",
                                              "enum": [
                                                "gender_identity"
                                              ],
                                              "example": "gender_identity"
                                            },
                                            "title": {
                                              "type": "string",
                                              "description": "Display title of this question in the form, i.e. the question text itself.",
                                              "example": "How do you feel today?"
                                            },
                                            "description": {
                                              "type": "string",
                                              "description": "An optional secondary text for this question, which will be displayed under the title and can contain, for example, instructions on how to answer the question."
                                            },
                                            "required": {
                                              "type": "boolean",
                                              "description": "Whether a response to this question is required or optional. Questions that are hidden by conditional rules are never required to have a response."
                                            },
                                            "key": {
                                              "type": "string",
                                              "minLength": 1,
                                              "maxLength": 255,
                                              "pattern": "^[a-zA-Z0-9_]+$",
                                              "description": "Unique key of this item within the form. Used in responses and conditional logic.",
                                              "example": "demographics_name"
                                            },
                                            "conditional": {
                                              "oneOf": [
                                                {
                                                  "$ref": "#/components/schemas/CompoundConditional"
                                                }
                                              ],
                                              "x-wrapped": true,
                                              "description": "A conditional statement - if it evaluates to true, this question will be displayed, if false the question will not be displayed and no response will be recorded for it."
                                            },
                                            "destination": {
                                              "type": "string",
                                              "enum": [
                                                "member.gender_identity"
                                              ],
                                              "description": "Indicates that the response from this question should be used to populate or update the member's gender identity. See also: sex at birth, pronouns."
                                            }
                                          },
                                          "required": [
                                            "type",
                                            "title",
                                            "required",
                                            "key"
                                          ],
                                          "description": "A question for recording a gender identity. Source supports selecting between some standardized values or entering a user-generated text response."
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "type": {
                                              "type": "string",
                                              "default": "sex_at_birth",
                                              "enum": [
                                                "sex_at_birth"
                                              ],
                                              "example": "sex_at_birth"
                                            },
                                            "title": {
                                              "type": "string",
                                              "description": "Display title of this question in the form, i.e. the question text itself.",
                                              "example": "How do you feel today?"
                                            },
                                            "description": {
                                              "type": "string",
                                              "description": "An optional secondary text for this question, which will be displayed under the title and can contain, for example, instructions on how to answer the question."
                                            },
                                            "required": {
                                              "type": "boolean",
                                              "description": "Whether a response to this question is required or optional. Questions that are hidden by conditional rules are never required to have a response."
                                            },
                                            "key": {
                                              "type": "string",
                                              "minLength": 1,
                                              "maxLength": 255,
                                              "pattern": "^[a-zA-Z0-9_]+$",
                                              "description": "Unique key of this item within the form. Used in responses and conditional logic.",
                                              "example": "demographics_name"
                                            },
                                            "conditional": {
                                              "oneOf": [
                                                {
                                                  "$ref": "#/components/schemas/CompoundConditional"
                                                }
                                              ],
                                              "x-wrapped": true,
                                              "description": "A conditional statement - if it evaluates to true, this question will be displayed, if false the question will not be displayed and no response will be recorded for it."
                                            },
                                            "destination": {
                                              "type": "string",
                                              "enum": [
                                                "member.sex_at_birth"
                                              ],
                                              "description": "Indicates that the response from this question should be used to populate or update the member's sex at birth."
                                            }
                                          },
                                          "required": [
                                            "type",
                                            "title",
                                            "required",
                                            "key"
                                          ],
                                          "description": "A question for recording person's birth sex, which is a selection between standardized values only. See also: gender identity."
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "type": {
                                              "type": "string",
                                              "default": "pronouns",
                                              "enum": [
                                                "pronouns"
                                              ],
                                              "example": "pronouns"
                                            },
                                            "title": {
                                              "type": "string",
                                              "description": "Display title of this question in the form, i.e. the question text itself.",
                                              "example": "How do you feel today?"
                                            },
                                            "description": {
                                              "type": "string",
                                              "description": "An optional secondary text for this question, which will be displayed under the title and can contain, for example, instructions on how to answer the question."
                                            },
                                            "required": {
                                              "type": "boolean",
                                              "description": "Whether a response to this question is required or optional. Questions that are hidden by conditional rules are never required to have a response."
                                            },
                                            "key": {
                                              "type": "string",
                                              "minLength": 1,
                                              "maxLength": 255,
                                              "pattern": "^[a-zA-Z0-9_]+$",
                                              "description": "Unique key of this item within the form. Used in responses and conditional logic.",
                                              "example": "demographics_name"
                                            },
                                            "conditional": {
                                              "oneOf": [
                                                {
                                                  "$ref": "#/components/schemas/CompoundConditional"
                                                }
                                              ],
                                              "x-wrapped": true,
                                              "description": "A conditional statement - if it evaluates to true, this question will be displayed, if false the question will not be displayed and no response will be recorded for it."
                                            },
                                            "destination": {
                                              "type": "string",
                                              "enum": [
                                                "member.pronouns"
                                              ],
                                              "description": "Indicates that the response from this question should be used to populate or update the member's pronouns."
                                            }
                                          },
                                          "required": [
                                            "type",
                                            "title",
                                            "required",
                                            "key"
                                          ],
                                          "description": "A question for recording a person's pronouns. Source supports selecting between some standardized values or entering a user-generated text response. See also: gender identity."
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "type": {
                                              "type": "string",
                                              "default": "phone_numbers",
                                              "enum": [
                                                "phone_numbers"
                                              ],
                                              "example": "phone_numbers"
                                            },
                                            "title": {
                                              "type": "string",
                                              "description": "Display title of this question in the form, i.e. the question text itself.",
                                              "example": "How do you feel today?"
                                            },
                                            "description": {
                                              "type": "string",
                                              "description": "An optional secondary text for this question, which will be displayed under the title and can contain, for example, instructions on how to answer the question."
                                            },
                                            "required": {
                                              "type": "boolean",
                                              "description": "Whether a response to this question is required or optional. Questions that are hidden by conditional rules are never required to have a response."
                                            },
                                            "key": {
                                              "type": "string",
                                              "minLength": 1,
                                              "maxLength": 255,
                                              "pattern": "^[a-zA-Z0-9_]+$",
                                              "description": "Unique key of this item within the form. Used in responses and conditional logic.",
                                              "example": "demographics_name"
                                            },
                                            "conditional": {
                                              "oneOf": [
                                                {
                                                  "$ref": "#/components/schemas/CompoundConditional"
                                                }
                                              ],
                                              "x-wrapped": true,
                                              "description": "A conditional statement - if it evaluates to true, this question will be displayed, if false the question will not be displayed and no response will be recorded for it."
                                            },
                                            "destination": {
                                              "type": "string",
                                              "enum": [
                                                "member.phone_numbers"
                                              ],
                                              "description": "Indicates that the response from this question should be used to populate or update the member's phone numbers."
                                            },
                                            "allowed_uses": {
                                              "type": "array",
                                              "items": {
                                                "type": "string",
                                                "enum": [
                                                  "home",
                                                  "work",
                                                  "mobile",
                                                  "fax",
                                                  "other"
                                                ]
                                              },
                                              "description": "Control which 'use' values are allowed (e.g. 'mobile', or 'fax').",
                                              "example": [
                                                "home",
                                                "work",
                                                "mobile",
                                                "fax",
                                                "other"
                                              ]
                                            },
                                            "max": {
                                              "type": "number",
                                              "description": "The maximum number of phone numbers that can be collected.",
                                              "example": 5
                                            }
                                          },
                                          "required": [
                                            "type",
                                            "title",
                                            "required",
                                            "key",
                                            "allowed_uses",
                                            "max"
                                          ],
                                          "description": "A question for recording phone numbers. Source supports multiple phone numbers for a member, and requires a 'use' value for each number (e.g. mobile, work, or fax.)"
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "type": {
                                              "type": "string",
                                              "default": "free_text",
                                              "enum": [
                                                "free_text"
                                              ],
                                              "example": "free_text"
                                            },
                                            "title": {
                                              "type": "string",
                                              "description": "Display title of this question in the form, i.e. the question text itself.",
                                              "example": "How do you feel today?"
                                            },
                                            "description": {
                                              "type": "string",
                                              "description": "An optional secondary text for this question, which will be displayed under the title and can contain, for example, instructions on how to answer the question."
                                            },
                                            "required": {
                                              "type": "boolean",
                                              "description": "Whether a response to this question is required or optional. Questions that are hidden by conditional rules are never required to have a response."
                                            },
                                            "key": {
                                              "type": "string",
                                              "minLength": 1,
                                              "maxLength": 255,
                                              "pattern": "^[a-zA-Z0-9_]+$",
                                              "description": "Unique key of this item within the form. Used in responses and conditional logic.",
                                              "example": "demographics_name"
                                            },
                                            "conditional": {
                                              "oneOf": [
                                                {
                                                  "$ref": "#/components/schemas/CompoundConditional"
                                                }
                                              ],
                                              "x-wrapped": true,
                                              "description": "A conditional statement - if it evaluates to true, this question will be displayed, if false the question will not be displayed and no response will be recorded for it."
                                            }
                                          },
                                          "required": [
                                            "type",
                                            "title",
                                            "required",
                                            "key"
                                          ],
                                          "description": "A question type for recording free text responses in a single line of plain text."
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "type": {
                                              "type": "string",
                                              "default": "long_text",
                                              "enum": [
                                                "long_text"
                                              ],
                                              "example": "long_text"
                                            },
                                            "title": {
                                              "type": "string",
                                              "description": "Display title of this question in the form, i.e. the question text itself.",
                                              "example": "How do you feel today?"
                                            },
                                            "description": {
                                              "type": "string",
                                              "description": "An optional secondary text for this question, which will be displayed under the title and can contain, for example, instructions on how to answer the question."
                                            },
                                            "required": {
                                              "type": "boolean",
                                              "description": "Whether a response to this question is required or optional. Questions that are hidden by conditional rules are never required to have a response."
                                            },
                                            "key": {
                                              "type": "string",
                                              "minLength": 1,
                                              "maxLength": 255,
                                              "pattern": "^[a-zA-Z0-9_]+$",
                                              "description": "Unique key of this item within the form. Used in responses and conditional logic.",
                                              "example": "demographics_name"
                                            },
                                            "conditional": {
                                              "oneOf": [
                                                {
                                                  "$ref": "#/components/schemas/CompoundConditional"
                                                }
                                              ],
                                              "x-wrapped": true,
                                              "description": "A conditional statement - if it evaluates to true, this question will be displayed, if false the question will not be displayed and no response will be recorded for it."
                                            }
                                          },
                                          "required": [
                                            "type",
                                            "title",
                                            "required",
                                            "key"
                                          ],
                                          "description": "A question type for recording free text responses in a text area suitable for paragraphs."
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "type": {
                                              "type": "string",
                                              "default": "number",
                                              "enum": [
                                                "number"
                                              ],
                                              "example": "number"
                                            },
                                            "title": {
                                              "type": "string",
                                              "description": "Display title of this question in the form, i.e. the question text itself.",
                                              "example": "How do you feel today?"
                                            },
                                            "description": {
                                              "type": "string",
                                              "description": "An optional secondary text for this question, which will be displayed under the title and can contain, for example, instructions on how to answer the question."
                                            },
                                            "required": {
                                              "type": "boolean",
                                              "description": "Whether a response to this question is required or optional. Questions that are hidden by conditional rules are never required to have a response."
                                            },
                                            "key": {
                                              "type": "string",
                                              "minLength": 1,
                                              "maxLength": 255,
                                              "pattern": "^[a-zA-Z0-9_]+$",
                                              "description": "Unique key of this item within the form. Used in responses and conditional logic.",
                                              "example": "demographics_name"
                                            },
                                            "conditional": {
                                              "oneOf": [
                                                {
                                                  "$ref": "#/components/schemas/CompoundConditional"
                                                }
                                              ],
                                              "x-wrapped": true,
                                              "description": "A conditional statement - if it evaluates to true, this question will be displayed, if false the question will not be displayed and no response will be recorded for it."
                                            },
                                            "min": {
                                              "type": "number",
                                              "nullable": true,
                                              "description": "Control the minimum allowed value"
                                            },
                                            "max": {
                                              "type": "number",
                                              "nullable": true,
                                              "description": "Control the maximum allowed value"
                                            }
                                          },
                                          "required": [
                                            "type",
                                            "title",
                                            "required",
                                            "key"
                                          ],
                                          "description": "A question type for recording numerical responses as a single number, either an integer or decimal."
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "type": {
                                              "type": "string",
                                              "default": "single_select",
                                              "enum": [
                                                "single_select"
                                              ],
                                              "example": "single_select"
                                            },
                                            "title": {
                                              "type": "string",
                                              "description": "Display title of this question in the form, i.e. the question text itself.",
                                              "example": "How do you feel today?"
                                            },
                                            "description": {
                                              "type": "string",
                                              "description": "An optional secondary text for this question, which will be displayed under the title and can contain, for example, instructions on how to answer the question."
                                            },
                                            "required": {
                                              "type": "boolean",
                                              "description": "Whether a response to this question is required or optional. Questions that are hidden by conditional rules are never required to have a response."
                                            },
                                            "key": {
                                              "type": "string",
                                              "minLength": 1,
                                              "maxLength": 255,
                                              "pattern": "^[a-zA-Z0-9_]+$",
                                              "description": "Unique key of this item within the form. Used in responses and conditional logic.",
                                              "example": "demographics_name"
                                            },
                                            "conditional": {
                                              "oneOf": [
                                                {
                                                  "$ref": "#/components/schemas/CompoundConditional"
                                                }
                                              ],
                                              "x-wrapped": true,
                                              "description": "A conditional statement - if it evaluates to true, this question will be displayed, if false the question will not be displayed and no response will be recorded for it."
                                            },
                                            "options": {
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "properties": {
                                                  "key": {
                                                    "type": "string",
                                                    "description": "Hidden 'key' for this option. Must be unique within the question."
                                                  },
                                                  "label": {
                                                    "type": "string",
                                                    "description": "Display label for this option. Must be unique within the question."
                                                  },
                                                  "score": {
                                                    "type": "number"
                                                  }
                                                },
                                                "required": [
                                                  "key",
                                                  "label"
                                                ],
                                                "description": "Describes an option within a single- or multi-select input."
                                              },
                                              "description": "The list of options available for this question."
                                            },
                                            "other": {
                                              "type": "object",
                                              "properties": {
                                                "label": {
                                                  "type": "string",
                                                  "description": "Display label for the 'other' option.",
                                                  "example": "Other (please tell us where)"
                                                },
                                                "required": {
                                                  "type": "boolean",
                                                  "description": "Whether or not a response to the free-text input is required if the responder selected 'other'",
                                                  "example": false
                                                }
                                              },
                                              "required": [
                                                "label",
                                                "required"
                                              ],
                                              "description": "Controls whether a user-generated 'other' free text field is offered, and whether a free text response is required. If this object is blank or null, no 'other' option is presented.",
                                              "nullable": true,
                                              "example": null
                                            },
                                            "input_type": {
                                              "type": "string",
                                              "enum": [
                                                "radio",
                                                "drop_down"
                                              ],
                                              "description": "Control the input type of the single-select question.",
                                              "example": "drop_down"
                                            },
                                            "scoring_method": {
                                              "type": "string",
                                              "enum": [
                                                "none",
                                                "max"
                                              ]
                                            }
                                          },
                                          "required": [
                                            "type",
                                            "title",
                                            "required",
                                            "key",
                                            "options",
                                            "input_type"
                                          ],
                                          "description": "A question type for recording a single choice between provided options. Using the 'other' config, this question can optionally include a user-entered 'other' option."
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "type": {
                                              "type": "string",
                                              "default": "multi_select",
                                              "enum": [
                                                "multi_select"
                                              ],
                                              "example": "multi_select"
                                            },
                                            "title": {
                                              "type": "string",
                                              "description": "Display title of this question in the form, i.e. the question text itself.",
                                              "example": "How do you feel today?"
                                            },
                                            "description": {
                                              "type": "string",
                                              "description": "An optional secondary text for this question, which will be displayed under the title and can contain, for example, instructions on how to answer the question."
                                            },
                                            "required": {
                                              "type": "boolean",
                                              "description": "Whether a response to this question is required or optional. Questions that are hidden by conditional rules are never required to have a response."
                                            },
                                            "key": {
                                              "type": "string",
                                              "minLength": 1,
                                              "maxLength": 255,
                                              "pattern": "^[a-zA-Z0-9_]+$",
                                              "description": "Unique key of this item within the form. Used in responses and conditional logic.",
                                              "example": "demographics_name"
                                            },
                                            "conditional": {
                                              "oneOf": [
                                                {
                                                  "$ref": "#/components/schemas/CompoundConditional"
                                                }
                                              ],
                                              "x-wrapped": true,
                                              "description": "A conditional statement - if it evaluates to true, this question will be displayed, if false the question will not be displayed and no response will be recorded for it."
                                            },
                                            "options": {
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "properties": {
                                                  "key": {
                                                    "type": "string",
                                                    "description": "Hidden 'key' for this option. Must be unique within the question."
                                                  },
                                                  "label": {
                                                    "type": "string",
                                                    "description": "Display label for this option. Must be unique within the question."
                                                  },
                                                  "score": {
                                                    "type": "number"
                                                  }
                                                },
                                                "required": [
                                                  "key",
                                                  "label"
                                                ],
                                                "description": "Describes an option within a single- or multi-select input."
                                              },
                                              "description": "The list of options available for this question."
                                            },
                                            "other": {
                                              "type": "object",
                                              "properties": {
                                                "label": {
                                                  "type": "string",
                                                  "description": "Display label for the 'other' option.",
                                                  "example": "Other (please tell us where)"
                                                },
                                                "required": {
                                                  "type": "boolean",
                                                  "description": "Whether or not a response to the free-text input is required if the responder selected 'other'",
                                                  "example": false
                                                }
                                              },
                                              "required": [
                                                "label",
                                                "required"
                                              ],
                                              "description": "Controls whether user-generated 'other' free text fields is offered, and whether at least one free text response is required. If this object is blank or null, no 'other' option is presented.",
                                              "nullable": true,
                                              "example": null
                                            },
                                            "input_type": {
                                              "type": "string",
                                              "enum": [
                                                "checkbox"
                                              ],
                                              "description": "Control the input type of the multi-select question.",
                                              "example": "checkbox"
                                            },
                                            "scoring_method": {
                                              "type": "string",
                                              "enum": [
                                                "none",
                                                "max",
                                                "sum"
                                              ]
                                            }
                                          },
                                          "required": [
                                            "type",
                                            "title",
                                            "required",
                                            "key",
                                            "options",
                                            "input_type"
                                          ],
                                          "description": "A question type for recording a multiple choices among provided options. Using the 'other' config, this question can optionally include one or more user-generated 'other' options."
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "type": {
                                              "type": "string",
                                              "default": "yes_no",
                                              "enum": [
                                                "yes_no"
                                              ],
                                              "example": "yes_no"
                                            },
                                            "title": {
                                              "type": "string",
                                              "description": "Display title of this question in the form, i.e. the question text itself.",
                                              "example": "How do you feel today?"
                                            },
                                            "description": {
                                              "type": "string",
                                              "description": "An optional secondary text for this question, which will be displayed under the title and can contain, for example, instructions on how to answer the question."
                                            },
                                            "required": {
                                              "type": "boolean",
                                              "description": "Whether a response to this question is required or optional. Questions that are hidden by conditional rules are never required to have a response."
                                            },
                                            "key": {
                                              "type": "string",
                                              "minLength": 1,
                                              "maxLength": 255,
                                              "pattern": "^[a-zA-Z0-9_]+$",
                                              "description": "Unique key of this item within the form. Used in responses and conditional logic.",
                                              "example": "demographics_name"
                                            },
                                            "conditional": {
                                              "oneOf": [
                                                {
                                                  "$ref": "#/components/schemas/CompoundConditional"
                                                }
                                              ],
                                              "x-wrapped": true,
                                              "description": "A conditional statement - if it evaluates to true, this question will be displayed, if false the question will not be displayed and no response will be recorded for it."
                                            },
                                            "labels": {
                                              "type": "object",
                                              "properties": {
                                                "yes": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "description": "Display label for the 'yes' option.",
                                                  "example": "True"
                                                },
                                                "no": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "description": "Display label for the 'no' option.",
                                                  "example": "False"
                                                }
                                              },
                                              "nullable": true,
                                              "description": "Display labels for the yes or no options."
                                            }
                                          },
                                          "required": [
                                            "type",
                                            "title",
                                            "required",
                                            "key"
                                          ],
                                          "description": "A question type for recording a discrete yes or no response."
                                        }
                                      ],
                                      "discriminator": {
                                        "propertyName": "type"
                                      }
                                    },
                                    "description": "Array of form items, such as questions and display elements."
                                  },
                                  "key": {
                                    "type": "string",
                                    "minLength": 1,
                                    "maxLength": 255,
                                    "pattern": "^[a-zA-Z0-9_]+$",
                                    "description": "Unique key of this item within the form. Used in responses and conditional logic.",
                                    "example": "demographics_name"
                                  },
                                  "conditional": {
                                    "oneOf": [
                                      {
                                        "$ref": "#/components/schemas/CompoundConditional"
                                      }
                                    ],
                                    "x-wrapped": true,
                                    "description": "A conditional statement - if it evaluates to true, this question will be displayed, if false the question will not be displayed and no response will be recorded for it."
                                  }
                                },
                                "required": [
                                  "type",
                                  "items",
                                  "key"
                                ],
                                "description": "A group within a form is used to apply a conditional display to a group of questions and display elements. One common use for groups is to ask one question and then a series of follow-up questions for certain responses to the first question.\n\nGroups cannot span multiple pages nor contain other groups."
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "default": "rich_text",
                                    "enum": [
                                      "rich_text"
                                    ],
                                    "example": "rich_text"
                                  },
                                  "content_type": {
                                    "type": "string",
                                    "enum": [
                                      "md"
                                    ],
                                    "description": "Type of the rich text content. Currently only `md` (i.e. Markdown) is supported.",
                                    "example": "md"
                                  },
                                  "content": {
                                    "type": "string",
                                    "description": "The rich text content, represented as Markdown text.",
                                    "example": "# The Title\n\nA paragraph\n\n- List Item 1\n-List Item 2"
                                  },
                                  "key": {
                                    "type": "string",
                                    "minLength": 1,
                                    "maxLength": 255,
                                    "pattern": "^[a-zA-Z0-9_]+$",
                                    "description": "Unique key of this item within the form. Used in responses and conditional logic.",
                                    "example": "demographics_name"
                                  },
                                  "conditional": {
                                    "oneOf": [
                                      {
                                        "$ref": "#/components/schemas/CompoundConditional"
                                      }
                                    ],
                                    "x-wrapped": true,
                                    "description": "A conditional statement - if it evaluates to true, this question will be displayed, if false the question will not be displayed and no response will be recorded for it."
                                  }
                                },
                                "required": [
                                  "type",
                                  "content_type",
                                  "content",
                                  "key"
                                ]
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "default": "name",
                                    "enum": [
                                      "name"
                                    ],
                                    "example": "name"
                                  },
                                  "title": {
                                    "type": "string",
                                    "description": "Display title of this question in the form, i.e. the question text itself.",
                                    "example": "How do you feel today?"
                                  },
                                  "description": {
                                    "type": "string",
                                    "description": "An optional secondary text for this question, which will be displayed under the title and can contain, for example, instructions on how to answer the question."
                                  },
                                  "required": {
                                    "type": "boolean",
                                    "description": "Whether a response to this question is required or optional. Questions that are hidden by conditional rules are never required to have a response."
                                  },
                                  "key": {
                                    "type": "string",
                                    "minLength": 1,
                                    "maxLength": 255,
                                    "pattern": "^[a-zA-Z0-9_]+$",
                                    "description": "Unique key of this item within the form. Used in responses and conditional logic.",
                                    "example": "demographics_name"
                                  },
                                  "conditional": {
                                    "oneOf": [
                                      {
                                        "$ref": "#/components/schemas/CompoundConditional"
                                      }
                                    ],
                                    "x-wrapped": true,
                                    "description": "A conditional statement - if it evaluates to true, this question will be displayed, if false the question will not be displayed and no response will be recorded for it."
                                  },
                                  "destination": {
                                    "type": "string",
                                    "enum": [
                                      "member.name"
                                    ],
                                    "description": "Indicates that the response from this question should be used to populate or update the member's name."
                                  },
                                  "fields": {
                                    "type": "object",
                                    "properties": {
                                      "preferred": {
                                        "type": "string",
                                        "enum": [
                                          "none",
                                          "optional",
                                          "required"
                                        ],
                                        "description": "Indicates whether the given sub-field should be displayed or not, and if so, whether a response is optional or required.",
                                        "example": "optional"
                                      }
                                    },
                                    "required": [
                                      "preferred"
                                    ],
                                    "description": "Indicates which fields are optional, required, or should not be shown at all."
                                  }
                                },
                                "required": [
                                  "type",
                                  "title",
                                  "required",
                                  "key",
                                  "fields"
                                ],
                                "description": "A question for recording a person's name. Source uses multiple fields for names: First, middle, and last names, and an optional 'preferred' name field which can be disabled."
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "default": "date",
                                    "enum": [
                                      "date"
                                    ],
                                    "example": "date"
                                  },
                                  "title": {
                                    "type": "string",
                                    "description": "Display title of this question in the form, i.e. the question text itself.",
                                    "example": "How do you feel today?"
                                  },
                                  "description": {
                                    "type": "string",
                                    "description": "An optional secondary text for this question, which will be displayed under the title and can contain, for example, instructions on how to answer the question."
                                  },
                                  "required": {
                                    "type": "boolean",
                                    "description": "Whether a response to this question is required or optional. Questions that are hidden by conditional rules are never required to have a response."
                                  },
                                  "key": {
                                    "type": "string",
                                    "minLength": 1,
                                    "maxLength": 255,
                                    "pattern": "^[a-zA-Z0-9_]+$",
                                    "description": "Unique key of this item within the form. Used in responses and conditional logic.",
                                    "example": "demographics_name"
                                  },
                                  "conditional": {
                                    "oneOf": [
                                      {
                                        "$ref": "#/components/schemas/CompoundConditional"
                                      }
                                    ],
                                    "x-wrapped": true,
                                    "description": "A conditional statement - if it evaluates to true, this question will be displayed, if false the question will not be displayed and no response will be recorded for it."
                                  },
                                  "destination": {
                                    "type": "string",
                                    "enum": [
                                      "member.date_of_birth"
                                    ],
                                    "description": "Indicates that the response from this question should be used to populate or update the member's date of birth."
                                  },
                                  "input_type": {
                                    "type": "string",
                                    "enum": [
                                      "date_picker",
                                      "date_entry"
                                    ],
                                    "description": "Which type of UI element to use - a calendar-style date picker or direct keyboard entry input box."
                                  }
                                },
                                "required": [
                                  "type",
                                  "title",
                                  "required",
                                  "key",
                                  "input_type"
                                ],
                                "description": "A question for recording a date. You can choose from two types of date input: one with a calendar-style date picker, intended for dates around the current date; and another designed for keyboard input, such as for historical dates like dates of birth."
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "default": "address",
                                    "enum": [
                                      "address"
                                    ],
                                    "example": "address"
                                  },
                                  "title": {
                                    "type": "string",
                                    "description": "Display title of this question in the form, i.e. the question text itself.",
                                    "example": "How do you feel today?"
                                  },
                                  "description": {
                                    "type": "string",
                                    "description": "An optional secondary text for this question, which will be displayed under the title and can contain, for example, instructions on how to answer the question."
                                  },
                                  "required": {
                                    "type": "boolean",
                                    "description": "Whether a response to this question is required or optional. Questions that are hidden by conditional rules are never required to have a response."
                                  },
                                  "key": {
                                    "type": "string",
                                    "minLength": 1,
                                    "maxLength": 255,
                                    "pattern": "^[a-zA-Z0-9_]+$",
                                    "description": "Unique key of this item within the form. Used in responses and conditional logic.",
                                    "example": "demographics_name"
                                  },
                                  "conditional": {
                                    "oneOf": [
                                      {
                                        "$ref": "#/components/schemas/CompoundConditional"
                                      }
                                    ],
                                    "x-wrapped": true,
                                    "description": "A conditional statement - if it evaluates to true, this question will be displayed, if false the question will not be displayed and no response will be recorded for it."
                                  },
                                  "destination": {
                                    "type": "string",
                                    "enum": [
                                      "member.address"
                                    ],
                                    "description": "Indicates that the response from this question should be used to populate or update the member's address."
                                  },
                                  "fields": {
                                    "type": "object",
                                    "properties": {
                                      "street_line_1": {
                                        "type": "string",
                                        "enum": [
                                          "none",
                                          "optional",
                                          "required"
                                        ],
                                        "description": "Indicates whether the given sub-field should be displayed or not, and if so, whether a response is optional or required.",
                                        "example": "optional"
                                      },
                                      "street_line_2": {
                                        "type": "string",
                                        "enum": [
                                          "none",
                                          "optional",
                                          "required"
                                        ],
                                        "description": "Indicates whether the given sub-field should be displayed or not, and if so, whether a response is optional or required.",
                                        "example": "optional"
                                      },
                                      "city": {
                                        "type": "string",
                                        "enum": [
                                          "none",
                                          "optional",
                                          "required"
                                        ],
                                        "description": "Indicates whether the given sub-field should be displayed or not, and if so, whether a response is optional or required.",
                                        "example": "optional"
                                      },
                                      "postal_code": {
                                        "type": "string",
                                        "enum": [
                                          "none",
                                          "optional",
                                          "required"
                                        ],
                                        "description": "Indicates whether the given sub-field should be displayed or not, and if so, whether a response is optional or required.",
                                        "example": "optional"
                                      }
                                    },
                                    "required": [
                                      "street_line_1",
                                      "street_line_2",
                                      "city",
                                      "postal_code"
                                    ],
                                    "description": "Indicates which fields are optional, required, or should not be shown at all."
                                  }
                                },
                                "required": [
                                  "type",
                                  "title",
                                  "required",
                                  "key",
                                  "fields"
                                ],
                                "description": "A question for recording an address. Source uses multiple fields for addresses: `region` (corresponding to US state) is required, and the others can be configured as optional, required, or not shown at all."
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "default": "gender_identity",
                                    "enum": [
                                      "gender_identity"
                                    ],
                                    "example": "gender_identity"
                                  },
                                  "title": {
                                    "type": "string",
                                    "description": "Display title of this question in the form, i.e. the question text itself.",
                                    "example": "How do you feel today?"
                                  },
                                  "description": {
                                    "type": "string",
                                    "description": "An optional secondary text for this question, which will be displayed under the title and can contain, for example, instructions on how to answer the question."
                                  },
                                  "required": {
                                    "type": "boolean",
                                    "description": "Whether a response to this question is required or optional. Questions that are hidden by conditional rules are never required to have a response."
                                  },
                                  "key": {
                                    "type": "string",
                                    "minLength": 1,
                                    "maxLength": 255,
                                    "pattern": "^[a-zA-Z0-9_]+$",
                                    "description": "Unique key of this item within the form. Used in responses and conditional logic.",
                                    "example": "demographics_name"
                                  },
                                  "conditional": {
                                    "oneOf": [
                                      {
                                        "$ref": "#/components/schemas/CompoundConditional"
                                      }
                                    ],
                                    "x-wrapped": true,
                                    "description": "A conditional statement - if it evaluates to true, this question will be displayed, if false the question will not be displayed and no response will be recorded for it."
                                  },
                                  "destination": {
                                    "type": "string",
                                    "enum": [
                                      "member.gender_identity"
                                    ],
                                    "description": "Indicates that the response from this question should be used to populate or update the member's gender identity. See also: sex at birth, pronouns."
                                  }
                                },
                                "required": [
                                  "type",
                                  "title",
                                  "required",
                                  "key"
                                ],
                                "description": "A question for recording a gender identity. Source supports selecting between some standardized values or entering a user-generated text response."
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "default": "sex_at_birth",
                                    "enum": [
                                      "sex_at_birth"
                                    ],
                                    "example": "sex_at_birth"
                                  },
                                  "title": {
                                    "type": "string",
                                    "description": "Display title of this question in the form, i.e. the question text itself.",
                                    "example": "How do you feel today?"
                                  },
                                  "description": {
                                    "type": "string",
                                    "description": "An optional secondary text for this question, which will be displayed under the title and can contain, for example, instructions on how to answer the question."
                                  },
                                  "required": {
                                    "type": "boolean",
                                    "description": "Whether a response to this question is required or optional. Questions that are hidden by conditional rules are never required to have a response."
                                  },
                                  "key": {
                                    "type": "string",
                                    "minLength": 1,
                                    "maxLength": 255,
                                    "pattern": "^[a-zA-Z0-9_]+$",
                                    "description": "Unique key of this item within the form. Used in responses and conditional logic.",
                                    "example": "demographics_name"
                                  },
                                  "conditional": {
                                    "oneOf": [
                                      {
                                        "$ref": "#/components/schemas/CompoundConditional"
                                      }
                                    ],
                                    "x-wrapped": true,
                                    "description": "A conditional statement - if it evaluates to true, this question will be displayed, if false the question will not be displayed and no response will be recorded for it."
                                  },
                                  "destination": {
                                    "type": "string",
                                    "enum": [
                                      "member.sex_at_birth"
                                    ],
                                    "description": "Indicates that the response from this question should be used to populate or update the member's sex at birth."
                                  }
                                },
                                "required": [
                                  "type",
                                  "title",
                                  "required",
                                  "key"
                                ],
                                "description": "A question for recording person's birth sex, which is a selection between standardized values only. See also: gender identity."
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "default": "pronouns",
                                    "enum": [
                                      "pronouns"
                                    ],
                                    "example": "pronouns"
                                  },
                                  "title": {
                                    "type": "string",
                                    "description": "Display title of this question in the form, i.e. the question text itself.",
                                    "example": "How do you feel today?"
                                  },
                                  "description": {
                                    "type": "string",
                                    "description": "An optional secondary text for this question, which will be displayed under the title and can contain, for example, instructions on how to answer the question."
                                  },
                                  "required": {
                                    "type": "boolean",
                                    "description": "Whether a response to this question is required or optional. Questions that are hidden by conditional rules are never required to have a response."
                                  },
                                  "key": {
                                    "type": "string",
                                    "minLength": 1,
                                    "maxLength": 255,
                                    "pattern": "^[a-zA-Z0-9_]+$",
                                    "description": "Unique key of this item within the form. Used in responses and conditional logic.",
                                    "example": "demographics_name"
                                  },
                                  "conditional": {
                                    "oneOf": [
                                      {
                                        "$ref": "#/components/schemas/CompoundConditional"
                                      }
                                    ],
                                    "x-wrapped": true,
                                    "description": "A conditional statement - if it evaluates to true, this question will be displayed, if false the question will not be displayed and no response will be recorded for it."
                                  },
                                  "destination": {
                                    "type": "string",
                                    "enum": [
                                      "member.pronouns"
                                    ],
                                    "description": "Indicates that the response from this question should be used to populate or update the member's pronouns."
                                  }
                                },
                                "required": [
                                  "type",
                                  "title",
                                  "required",
                                  "key"
                                ],
                                "description": "A question for recording a person's pronouns. Source supports selecting between some standardized values or entering a user-generated text response. See also: gender identity."
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "default": "phone_numbers",
                                    "enum": [
                                      "phone_numbers"
                                    ],
                                    "example": "phone_numbers"
                                  },
                                  "title": {
                                    "type": "string",
                                    "description": "Display title of this question in the form, i.e. the question text itself.",
                                    "example": "How do you feel today?"
                                  },
                                  "description": {
                                    "type": "string",
                                    "description": "An optional secondary text for this question, which will be displayed under the title and can contain, for example, instructions on how to answer the question."
                                  },
                                  "required": {
                                    "type": "boolean",
                                    "description": "Whether a response to this question is required or optional. Questions that are hidden by conditional rules are never required to have a response."
                                  },
                                  "key": {
                                    "type": "string",
                                    "minLength": 1,
                                    "maxLength": 255,
                                    "pattern": "^[a-zA-Z0-9_]+$",
                                    "description": "Unique key of this item within the form. Used in responses and conditional logic.",
                                    "example": "demographics_name"
                                  },
                                  "conditional": {
                                    "oneOf": [
                                      {
                                        "$ref": "#/components/schemas/CompoundConditional"
                                      }
                                    ],
                                    "x-wrapped": true,
                                    "description": "A conditional statement - if it evaluates to true, this question will be displayed, if false the question will not be displayed and no response will be recorded for it."
                                  },
                                  "destination": {
                                    "type": "string",
                                    "enum": [
                                      "member.phone_numbers"
                                    ],
                                    "description": "Indicates that the response from this question should be used to populate or update the member's phone numbers."
                                  },
                                  "allowed_uses": {
                                    "type": "array",
                                    "items": {
                                      "type": "string",
                                      "enum": [
                                        "home",
                                        "work",
                                        "mobile",
                                        "fax",
                                        "other"
                                      ]
                                    },
                                    "description": "Control which 'use' values are allowed (e.g. 'mobile', or 'fax').",
                                    "example": [
                                      "home",
                                      "work",
                                      "mobile",
                                      "fax",
                                      "other"
                                    ]
                                  },
                                  "max": {
                                    "type": "number",
                                    "description": "The maximum number of phone numbers that can be collected.",
                                    "example": 5
                                  }
                                },
                                "required": [
                                  "type",
                                  "title",
                                  "required",
                                  "key",
                                  "allowed_uses",
                                  "max"
                                ],
                                "description": "A question for recording phone numbers. Source supports multiple phone numbers for a member, and requires a 'use' value for each number (e.g. mobile, work, or fax.)"
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "default": "free_text",
                                    "enum": [
                                      "free_text"
                                    ],
                                    "example": "free_text"
                                  },
                                  "title": {
                                    "type": "string",
                                    "description": "Display title of this question in the form, i.e. the question text itself.",
                                    "example": "How do you feel today?"
                                  },
                                  "description": {
                                    "type": "string",
                                    "description": "An optional secondary text for this question, which will be displayed under the title and can contain, for example, instructions on how to answer the question."
                                  },
                                  "required": {
                                    "type": "boolean",
                                    "description": "Whether a response to this question is required or optional. Questions that are hidden by conditional rules are never required to have a response."
                                  },
                                  "key": {
                                    "type": "string",
                                    "minLength": 1,
                                    "maxLength": 255,
                                    "pattern": "^[a-zA-Z0-9_]+$",
                                    "description": "Unique key of this item within the form. Used in responses and conditional logic.",
                                    "example": "demographics_name"
                                  },
                                  "conditional": {
                                    "oneOf": [
                                      {
                                        "$ref": "#/components/schemas/CompoundConditional"
                                      }
                                    ],
                                    "x-wrapped": true,
                                    "description": "A conditional statement - if it evaluates to true, this question will be displayed, if false the question will not be displayed and no response will be recorded for it."
                                  }
                                },
                                "required": [
                                  "type",
                                  "title",
                                  "required",
                                  "key"
                                ],
                                "description": "A question type for recording free text responses in a single line of plain text."
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "default": "long_text",
                                    "enum": [
                                      "long_text"
                                    ],
                                    "example": "long_text"
                                  },
                                  "title": {
                                    "type": "string",
                                    "description": "Display title of this question in the form, i.e. the question text itself.",
                                    "example": "How do you feel today?"
                                  },
                                  "description": {
                                    "type": "string",
                                    "description": "An optional secondary text for this question, which will be displayed under the title and can contain, for example, instructions on how to answer the question."
                                  },
                                  "required": {
                                    "type": "boolean",
                                    "description": "Whether a response to this question is required or optional. Questions that are hidden by conditional rules are never required to have a response."
                                  },
                                  "key": {
                                    "type": "string",
                                    "minLength": 1,
                                    "maxLength": 255,
                                    "pattern": "^[a-zA-Z0-9_]+$",
                                    "description": "Unique key of this item within the form. Used in responses and conditional logic.",
                                    "example": "demographics_name"
                                  },
                                  "conditional": {
                                    "oneOf": [
                                      {
                                        "$ref": "#/components/schemas/CompoundConditional"
                                      }
                                    ],
                                    "x-wrapped": true,
                                    "description": "A conditional statement - if it evaluates to true, this question will be displayed, if false the question will not be displayed and no response will be recorded for it."
                                  }
                                },
                                "required": [
                                  "type",
                                  "title",
                                  "required",
                                  "key"
                                ],
                                "description": "A question type for recording free text responses in a text area suitable for paragraphs."
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "default": "number",
                                    "enum": [
                                      "number"
                                    ],
                                    "example": "number"
                                  },
                                  "title": {
                                    "type": "string",
                                    "description": "Display title of this question in the form, i.e. the question text itself.",
                                    "example": "How do you feel today?"
                                  },
                                  "description": {
                                    "type": "string",
                                    "description": "An optional secondary text for this question, which will be displayed under the title and can contain, for example, instructions on how to answer the question."
                                  },
                                  "required": {
                                    "type": "boolean",
                                    "description": "Whether a response to this question is required or optional. Questions that are hidden by conditional rules are never required to have a response."
                                  },
                                  "key": {
                                    "type": "string",
                                    "minLength": 1,
                                    "maxLength": 255,
                                    "pattern": "^[a-zA-Z0-9_]+$",
                                    "description": "Unique key of this item within the form. Used in responses and conditional logic.",
                                    "example": "demographics_name"
                                  },
                                  "conditional": {
                                    "oneOf": [
                                      {
                                        "$ref": "#/components/schemas/CompoundConditional"
                                      }
                                    ],
                                    "x-wrapped": true,
                                    "description": "A conditional statement - if it evaluates to true, this question will be displayed, if false the question will not be displayed and no response will be recorded for it."
                                  },
                                  "min": {
                                    "type": "number",
                                    "nullable": true,
                                    "description": "Control the minimum allowed value"
                                  },
                                  "max": {
                                    "type": "number",
                                    "nullable": true,
                                    "description": "Control the maximum allowed value"
                                  }
                                },
                                "required": [
                                  "type",
                                  "title",
                                  "required",
                                  "key"
                                ],
                                "description": "A question type for recording numerical responses as a single number, either an integer or decimal."
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "default": "single_select",
                                    "enum": [
                                      "single_select"
                                    ],
                                    "example": "single_select"
                                  },
                                  "title": {
                                    "type": "string",
                                    "description": "Display title of this question in the form, i.e. the question text itself.",
                                    "example": "How do you feel today?"
                                  },
                                  "description": {
                                    "type": "string",
                                    "description": "An optional secondary text for this question, which will be displayed under the title and can contain, for example, instructions on how to answer the question."
                                  },
                                  "required": {
                                    "type": "boolean",
                                    "description": "Whether a response to this question is required or optional. Questions that are hidden by conditional rules are never required to have a response."
                                  },
                                  "key": {
                                    "type": "string",
                                    "minLength": 1,
                                    "maxLength": 255,
                                    "pattern": "^[a-zA-Z0-9_]+$",
                                    "description": "Unique key of this item within the form. Used in responses and conditional logic.",
                                    "example": "demographics_name"
                                  },
                                  "conditional": {
                                    "oneOf": [
                                      {
                                        "$ref": "#/components/schemas/CompoundConditional"
                                      }
                                    ],
                                    "x-wrapped": true,
                                    "description": "A conditional statement - if it evaluates to true, this question will be displayed, if false the question will not be displayed and no response will be recorded for it."
                                  },
                                  "options": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "key": {
                                          "type": "string",
                                          "description": "Hidden 'key' for this option. Must be unique within the question."
                                        },
                                        "label": {
                                          "type": "string",
                                          "description": "Display label for this option. Must be unique within the question."
                                        },
                                        "score": {
                                          "type": "number"
                                        }
                                      },
                                      "required": [
                                        "key",
                                        "label"
                                      ],
                                      "description": "Describes an option within a single- or multi-select input."
                                    },
                                    "description": "The list of options available for this question."
                                  },
                                  "other": {
                                    "type": "object",
                                    "properties": {
                                      "label": {
                                        "type": "string",
                                        "description": "Display label for the 'other' option.",
                                        "example": "Other (please tell us where)"
                                      },
                                      "required": {
                                        "type": "boolean",
                                        "description": "Whether or not a response to the free-text input is required if the responder selected 'other'",
                                        "example": false
                                      }
                                    },
                                    "required": [
                                      "label",
                                      "required"
                                    ],
                                    "description": "Controls whether a user-generated 'other' free text field is offered, and whether a free text response is required. If this object is blank or null, no 'other' option is presented.",
                                    "nullable": true,
                                    "example": null
                                  },
                                  "input_type": {
                                    "type": "string",
                                    "enum": [
                                      "radio",
                                      "drop_down"
                                    ],
                                    "description": "Control the input type of the single-select question.",
                                    "example": "drop_down"
                                  },
                                  "scoring_method": {
                                    "type": "string",
                                    "enum": [
                                      "none",
                                      "max"
                                    ]
                                  }
                                },
                                "required": [
                                  "type",
                                  "title",
                                  "required",
                                  "key",
                                  "options",
                                  "input_type"
                                ],
                                "description": "A question type for recording a single choice between provided options. Using the 'other' config, this question can optionally include a user-entered 'other' option."
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "default": "multi_select",
                                    "enum": [
                                      "multi_select"
                                    ],
                                    "example": "multi_select"
                                  },
                                  "title": {
                                    "type": "string",
                                    "description": "Display title of this question in the form, i.e. the question text itself.",
                                    "example": "How do you feel today?"
                                  },
                                  "description": {
                                    "type": "string",
                                    "description": "An optional secondary text for this question, which will be displayed under the title and can contain, for example, instructions on how to answer the question."
                                  },
                                  "required": {
                                    "type": "boolean",
                                    "description": "Whether a response to this question is required or optional. Questions that are hidden by conditional rules are never required to have a response."
                                  },
                                  "key": {
                                    "type": "string",
                                    "minLength": 1,
                                    "maxLength": 255,
                                    "pattern": "^[a-zA-Z0-9_]+$",
                                    "description": "Unique key of this item within the form. Used in responses and conditional logic.",
                                    "example": "demographics_name"
                                  },
                                  "conditional": {
                                    "oneOf": [
                                      {
                                        "$ref": "#/components/schemas/CompoundConditional"
                                      }
                                    ],
                                    "x-wrapped": true,
                                    "description": "A conditional statement - if it evaluates to true, this question will be displayed, if false the question will not be displayed and no response will be recorded for it."
                                  },
                                  "options": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "key": {
                                          "type": "string",
                                          "description": "Hidden 'key' for this option. Must be unique within the question."
                                        },
                                        "label": {
                                          "type": "string",
                                          "description": "Display label for this option. Must be unique within the question."
                                        },
                                        "score": {
                                          "type": "number"
                                        }
                                      },
                                      "required": [
                                        "key",
                                        "label"
                                      ],
                                      "description": "Describes an option within a single- or multi-select input."
                                    },
                                    "description": "The list of options available for this question."
                                  },
                                  "other": {
                                    "type": "object",
                                    "properties": {
                                      "label": {
                                        "type": "string",
                                        "description": "Display label for the 'other' option.",
                                        "example": "Other (please tell us where)"
                                      },
                                      "required": {
                                        "type": "boolean",
                                        "description": "Whether or not a response to the free-text input is required if the responder selected 'other'",
                                        "example": false
                                      }
                                    },
                                    "required": [
                                      "label",
                                      "required"
                                    ],
                                    "description": "Controls whether user-generated 'other' free text fields is offered, and whether at least one free text response is required. If this object is blank or null, no 'other' option is presented.",
                                    "nullable": true,
                                    "example": null
                                  },
                                  "input_type": {
                                    "type": "string",
                                    "enum": [
                                      "checkbox"
                                    ],
                                    "description": "Control the input type of the multi-select question.",
                                    "example": "checkbox"
                                  },
                                  "scoring_method": {
                                    "type": "string",
                                    "enum": [
                                      "none",
                                      "max",
                                      "sum"
                                    ]
                                  }
                                },
                                "required": [
                                  "type",
                                  "title",
                                  "required",
                                  "key",
                                  "options",
                                  "input_type"
                                ],
                                "description": "A question type for recording a multiple choices among provided options. Using the 'other' config, this question can optionally include one or more user-generated 'other' options."
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "default": "yes_no",
                                    "enum": [
                                      "yes_no"
                                    ],
                                    "example": "yes_no"
                                  },
                                  "title": {
                                    "type": "string",
                                    "description": "Display title of this question in the form, i.e. the question text itself.",
                                    "example": "How do you feel today?"
                                  },
                                  "description": {
                                    "type": "string",
                                    "description": "An optional secondary text for this question, which will be displayed under the title and can contain, for example, instructions on how to answer the question."
                                  },
                                  "required": {
                                    "type": "boolean",
                                    "description": "Whether a response to this question is required or optional. Questions that are hidden by conditional rules are never required to have a response."
                                  },
                                  "key": {
                                    "type": "string",
                                    "minLength": 1,
                                    "maxLength": 255,
                                    "pattern": "^[a-zA-Z0-9_]+$",
                                    "description": "Unique key of this item within the form. Used in responses and conditional logic.",
                                    "example": "demographics_name"
                                  },
                                  "conditional": {
                                    "oneOf": [
                                      {
                                        "$ref": "#/components/schemas/CompoundConditional"
                                      }
                                    ],
                                    "x-wrapped": true,
                                    "description": "A conditional statement - if it evaluates to true, this question will be displayed, if false the question will not be displayed and no response will be recorded for it."
                                  },
                                  "labels": {
                                    "type": "object",
                                    "properties": {
                                      "yes": {
                                        "type": "string",
                                        "nullable": true,
                                        "description": "Display label for the 'yes' option.",
                                        "example": "True"
                                      },
                                      "no": {
                                        "type": "string",
                                        "nullable": true,
                                        "description": "Display label for the 'no' option.",
                                        "example": "False"
                                      }
                                    },
                                    "nullable": true,
                                    "description": "Display labels for the yes or no options."
                                  }
                                },
                                "required": [
                                  "type",
                                  "title",
                                  "required",
                                  "key"
                                ],
                                "description": "A question type for recording a discrete yes or no response."
                              }
                            ],
                            "discriminator": {
                              "propertyName": "type"
                            }
                          },
                          "description": "Array of form elements. Pages can include any element, except another page."
                        },
                        "exits": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "type": {
                                "type": "string",
                                "default": "exit",
                                "enum": [
                                  "exit"
                                ],
                                "example": "exit"
                              },
                              "exit_screen_key": {
                                "type": "string",
                                "description": "Indicates which exit screen to display if the conditions are met."
                              },
                              "conditional": {
                                "$ref": "#/components/schemas/CompoundConditional"
                              }
                            },
                            "required": [
                              "type",
                              "exit_screen_key",
                              "conditional"
                            ],
                            "description": "An exit is a point in a form at which a responder may be directed to a specific exit screen, identified by the `exit_screen_key`, based on answers to previous questions referenced in the `conditional`."
                          },
                          "nullable": true,
                          "description": "Array of exit points."
                        },
                        "key": {
                          "type": "string",
                          "minLength": 1,
                          "maxLength": 255,
                          "pattern": "^[a-zA-Z0-9_]+$",
                          "description": "Unique key of this item within the form. Used in responses and conditional logic.",
                          "example": "demographics_name"
                        },
                        "conditional": {
                          "oneOf": [
                            {
                              "$ref": "#/components/schemas/CompoundConditional"
                            }
                          ],
                          "x-wrapped": true,
                          "description": "A conditional statement - if it evaluates to true, this question will be displayed, if false the question will not be displayed and no response will be recorded for it."
                        }
                      },
                      "required": [
                        "type",
                        "items",
                        "key"
                      ],
                      "description": "Pages are the top-level organization of a form. At least one page must exist. Each page defines the elements that display together to a responder and consists of an array of other form items."
                    },
                    "description": "An array of items that describe the form version's content and configuration. Pages form the top-level item and contain additional elements, such as questions, display elements, and groups of items."
                  },
                  "exit_screens": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "default": "exit_screen",
                          "enum": [
                            "exit_screen"
                          ],
                          "example": "exit_screen"
                        },
                        "key": {
                          "type": "string",
                          "description": "A unique key for this exit screen within the form. The keys are used in exits to indicate which screen is used for the exit. An exit screen with key 'default' must exist in every form.",
                          "example": "ineligible_location"
                        },
                        "description": {
                          "type": "string",
                          "description": "A description of this exit screen. If the responder reaches this exit screen, the screen's description is displayed within the completed form response."
                        },
                        "content_type": {
                          "type": "string",
                          "enum": [
                            "md"
                          ],
                          "description": "Type of the rich text content. Currently only `md` (i.e. Markdown) is supported.",
                          "example": "md"
                        },
                        "content": {
                          "type": "string",
                          "description": "The rich text content, represented as Markdown text.",
                          "example": "# Thank You\n\nWe appreciate you completing this form.\n\nYour care team will be in touch."
                        }
                      },
                      "required": [
                        "type",
                        "key",
                        "description",
                        "content_type",
                        "content"
                      ],
                      "description": "Each form has a default exit screen that is shown when the responder completes the form. You can optionally intercept the form completion flow via the Source SDK.\n\nYou can also configure exits within a form by adding an exit within your form that references an exit screen key. You can create as many exit screens and exits as you need. A common example is when a responder answers questions as part of an intake form that indicates they are not eligible for services. In that case, you can create an exit screen and exit that indicate to the responder they are ineligible and end their form response early."
                    },
                    "description": "A map of exit keys to exit screen content. Each form version must contain an exit screen with the key 'default', and additional exit screens can be configured and referenced by exits within the form version."
                  }
                },
                "required": [
                  "items",
                  "exit_screens"
                ]
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/form_version"
                }
              }
            }
          }
        },
        "x-methodName": "latest",
        "x-belongsToResource": "form_version"
      }
    },
    "/v1/forms/{form}/versions/latest/publish": {
      "post": {
        "summary": "Publish a Form Version",
        "description": "Publishes the form version, preventing any further changes. Once a version has been published it cannot be unpublished. Once published, the version becomes the form's published version and is used for all new responses.",
        "tags": [
          "Form"
        ],
        "parameters": [
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "form",
            "schema": {
              "type": "string",
              "example": "form_hSGPOT5BMusNLwDI3Z4N",
              "description": "Unique ID for the form."
            },
            "required": true,
            "description": "Unique ID for the form."
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "last_updated_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "If provided, publishing succeeds only if 'last_updated_at' matches Source's record for the form version's 'updated_at'. Providing this parameter prevents accidentally publishing updates made to the form version in the meantime.",
                    "example": "2021-05-13T16:33:00.000Z"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/form_version"
                }
              }
            }
          }
        },
        "x-methodName": "latest/publish",
        "x-belongsToResource": "form_version"
      }
    },
    "/v1/forms/{form}/versions/{id}": {
      "get": {
        "summary": "Retrieve a Form Version",
        "description": "Retrieves the details of an existing form version.  Use 'latest' to retrieve the latest version of the form, which is always the current draft version of the form, or 'published' to retrieve the latest published version, which is the version in use for any new response.",
        "tags": [
          "Form"
        ],
        "parameters": [
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "form",
            "schema": {
              "type": "string",
              "example": "form_hSGPOT5BMusNLwDI3Z4N",
              "description": "Unique ID for the form."
            },
            "required": true,
            "description": "Unique ID for the form."
          },
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "id",
            "schema": {
              "type": "string",
              "description": "Unique ID of the form_version.",
              "example": "fv_ByJdV5tV3eJf6KRRfoGU"
            },
            "required": true,
            "description": "Unique ID of the form_version."
          }
        ],
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/form_version"
                }
              }
            }
          }
        },
        "x-methodName": "retrieve",
        "x-belongsToResource": "form_version"
      }
    },
    "/v1/forms/{form}/versions": {
      "get": {
        "summary": "List all Form Versions",
        "description": "Returns a list of forms versions. The form versions returned are sorted by creation date, with the most recently added form version appearing first.",
        "tags": [
          "Form"
        ],
        "parameters": [
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "form",
            "schema": {
              "type": "string",
              "example": "form_hSGPOT5BMusNLwDI3Z4N",
              "description": "Unique ID for the form."
            },
            "required": true,
            "description": "Unique ID for the form."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "ending_before",
            "schema": {
              "type": "string",
              "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_bar, your subsequent call can include ending_before=obj_bar in order to fetch the previous page of the list."
            },
            "required": false,
            "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_bar, your subsequent call can include ending_before=obj_bar in order to fetch the previous page of the list."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "starting_after",
            "schema": {
              "type": "string",
              "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include starting_after=obj_foo in order to fetch the next page of the list."
            },
            "required": false,
            "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include starting_after=obj_foo in order to fetch the next page of the list."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "limit",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100."
            },
            "required": false,
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "published",
            "schema": {
              "type": "boolean",
              "description": "Filter by published or unpublished form versions."
            },
            "required": false,
            "description": "Filter by published or unpublished form versions."
          }
        ],
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "object": {
                      "type": "string",
                      "default": "list",
                      "enum": [
                        "list"
                      ],
                      "example": "list",
                      "description": "Always `list`."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/form_version"
                      },
                      "description": "Array of results"
                    },
                    "has_more": {
                      "type": "boolean",
                      "description": "Contains `true` if there is another page of results available."
                    }
                  },
                  "required": [
                    "object",
                    "data",
                    "has_more"
                  ]
                }
              }
            }
          }
        },
        "x-methodName": "list",
        "x-belongsToResource": "form_version"
      }
    },
    "/v1/groups": {
      "post": {
        "summary": "Create a Group",
        "description": "Creates a new group, which describes a function of a user. You can use groups alongside queues to control how tasks are routed among the care team.",
        "tags": [
          "Group"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 255,
                    "description": "Public display name for this group. The name must be unique across all groups.",
                    "example": "Physicians"
                  },
                  "description": {
                    "type": "string",
                    "maxLength": 4096,
                    "nullable": true,
                    "description": "A description for this group.",
                    "example": null
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/group"
                }
              }
            }
          }
        },
        "x-methodName": "create",
        "x-belongsToResource": "group"
      },
      "get": {
        "summary": "List all Groups",
        "description": "Returns a list of groups within the current account.\n\nThe groups returned are sorted by creation date, with the most recently added group appearing first.",
        "tags": [
          "Group"
        ],
        "parameters": [
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "ending_before",
            "schema": {
              "type": "string",
              "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_bar, your subsequent call can include ending_before=obj_bar in order to fetch the previous page of the list."
            },
            "required": false,
            "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_bar, your subsequent call can include ending_before=obj_bar in order to fetch the previous page of the list."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "starting_after",
            "schema": {
              "type": "string",
              "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include starting_after=obj_foo in order to fetch the next page of the list."
            },
            "required": false,
            "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include starting_after=obj_foo in order to fetch the next page of the list."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "limit",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100."
            },
            "required": false,
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "sort",
            "schema": {
              "type": "string",
              "enum": [
                "created_at",
                "name",
                "-created_at",
                "-name"
              ],
              "description": "Sort field for the results. A '-' prefix indicates sorting by that field in descending order, otherwise the order will be ascending.",
              "example": "created_at"
            },
            "required": false,
            "description": "Sort field for the results. A '-' prefix indicates sorting by that field in descending order, otherwise the order will be ascending."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "name",
            "schema": {
              "type": "string",
              "description": "Limit results to groups with name containing the given query."
            },
            "required": false,
            "description": "Limit results to groups with name containing the given query."
          }
        ],
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "object": {
                      "type": "string",
                      "default": "list",
                      "enum": [
                        "list"
                      ],
                      "example": "list",
                      "description": "Always `list`."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/group"
                      },
                      "description": "Array of results"
                    },
                    "has_more": {
                      "type": "boolean",
                      "description": "Contains `true` if there is another page of results available."
                    }
                  },
                  "required": [
                    "object",
                    "data",
                    "has_more"
                  ]
                }
              }
            }
          }
        },
        "x-methodName": "list",
        "x-belongsToResource": "group"
      }
    },
    "/v1/groups/{id}": {
      "get": {
        "summary": "Retrieve a Group",
        "description": "Retrieves the details of an existing group. You need only supply the unique group identifier that was returned upon creation.",
        "tags": [
          "Group"
        ],
        "parameters": [
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "id",
            "schema": {
              "type": "string",
              "example": "grp_IlGhgsstvgsagl6lV89Q",
              "description": "Unique ID of the group."
            },
            "required": true,
            "description": "Unique ID of the group."
          }
        ],
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/group"
                }
              }
            }
          }
        },
        "x-methodName": "retrieve",
        "x-belongsToResource": "group"
      },
      "post": {
        "summary": "Update a Group",
        "description": "Updates the specified group by setting the values of the parameters passed.\n\nAny parameters not provided will be left unchanged.",
        "tags": [
          "Group"
        ],
        "parameters": [
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "id",
            "schema": {
              "type": "string",
              "example": "grp_IlGhgsstvgsagl6lV89Q",
              "description": "Unique ID of the group."
            },
            "required": true,
            "description": "Unique ID of the group."
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 255,
                    "description": "Public display name for this group. The name must be unique across all groups.",
                    "example": "Physicians"
                  },
                  "description": {
                    "type": "string",
                    "maxLength": 4096,
                    "nullable": true,
                    "description": "A description for this group.",
                    "example": null
                  }
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/group"
                }
              }
            }
          }
        },
        "x-methodName": "update",
        "x-belongsToResource": "group"
      },
      "delete": {
        "summary": "Delete a Group",
        "description": "Deletes the specified group. A deleted group is removed from all other objects to which it relates.",
        "tags": [
          "Group"
        ],
        "parameters": [
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "id",
            "schema": {
              "type": "string",
              "example": "grp_IlGhgsstvgsagl6lV89Q",
              "description": "Unique ID of the group."
            },
            "required": true,
            "description": "Unique ID of the group."
          }
        ],
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/group"
                }
              }
            }
          }
        },
        "x-methodName": "delete",
        "x-belongsToResource": "group"
      }
    },
    "/v1/intents": {
      "post": {
        "summary": "Create an Intent",
        "description": "Creates a new intent of the type you specify. You must specify configuration within the intent that corresponds  to the intent type you create. You can create as many intents as you wish for a member.",
        "tags": [
          "Intent"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "member": {
                    "type": "string",
                    "example": "mem_5QW8j1oKqQjNaPk4Hv3f",
                    "description": "The member to whom this intent belongs."
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "scheduling",
                      "form"
                    ],
                    "description": "The type of intent that needs to be completed. Source supports two intent types: 'scheduling' and 'form'.",
                    "example": "scheduling"
                  },
                  "expires_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Timestamp when this intent expires. By default, intents expire 30 days after creation. Once the intent  reaches its expiration, the intent status is automatically updated to 'expired' and can no longer be used.",
                    "example": "2021-05-13T16:33:00.000Z"
                  },
                  "configuration": {
                    "anyOf": [
                      {
                        "type": "object",
                        "properties": {
                          "appointment_type": {
                            "type": "string",
                            "example": "aptp_meYUvkuaI2akjnb5Kwt7",
                            "description": "The key or identifier of the appointment type. If the intent type is 'scheduling', this configuration  parameter is required."
                          },
                          "start_search_at": {
                            "type": "string",
                            "format": "date-time",
                            "description": "The start time for the appointment availability search associated with this intent. If not set, the  availability window will start at the time the member accesses this intent to search for an appointment."
                          },
                          "end_search_at": {
                            "type": "string",
                            "format": "date-time",
                            "description": "The latest time for the appointment availability search associated with this intent. If not set, the  availability window will end at the planning horizon of the appointment type associated with the intent."
                          },
                          "participants": {
                            "type": "array",
                            "items": {
                              "anyOf": [
                                {
                                  "type": "string",
                                  "example": "usr_qoGndHzx8KwdYsEByt9X"
                                },
                                {
                                  "type": "string",
                                  "example": "grp_IlGhgsstvgsagl6lV89Q"
                                }
                              ]
                            },
                            "description": "Provide a set of users and groups that should be included when searching for available slots using this intent.  The users and groups included in this parameter must still be included in the appointment type's configuration  in order for the availability API to return slots for them."
                          },
                          "duration": {
                            "type": "number",
                            "description": "The duration of the appointment to book, in minutes, using this intent. By default, Source will use either the  appointment type's duration. However, you may specify an alternative duration here to calculate slots for an  appointment of a different length.\n\nMust be a number between 5 and 360 minutes (6 hours)."
                          }
                        },
                        "required": [
                          "appointment_type"
                        ]
                      },
                      {
                        "type": "object",
                        "properties": {
                          "form": {
                            "type": "string",
                            "example": "form_hSGPOT5BMusNLwDI3Z4N",
                            "description": "The key or identifier of the form. When the member accesses this intent, the published version  of the form at that time is used to create the form response. If the intent type is 'form', this  configuration parameter is required."
                          }
                        },
                        "required": [
                          "form"
                        ]
                      }
                    ],
                    "description": "A set of configuration describing the appointment you wish the member to book or form you wish the member to  complete. This parameter's configuration depends on the intent type you specify."
                  },
                  "send_notification": {
                    "type": "boolean",
                    "description": "Whether or not this intent should generate a notification to the member. If not specified, by default no notification is generated. Note that the generated notification is only sent if the member and account notification preferences are configured to send notifications for intents.",
                    "example": false
                  }
                },
                "required": [
                  "member",
                  "type",
                  "configuration"
                ]
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/intent"
                }
              }
            }
          }
        },
        "x-methodName": "create",
        "x-belongsToResource": "intent"
      },
      "get": {
        "summary": "List all Intents",
        "description": "Returns a list of intents within the current account.\n\nThe intents returned are sorted by creation date, with the most recently added intent appearing first.",
        "tags": [
          "Intent"
        ],
        "parameters": [
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "ending_before",
            "schema": {
              "type": "string",
              "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_bar, your subsequent call can include ending_before=obj_bar in order to fetch the previous page of the list."
            },
            "required": false,
            "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_bar, your subsequent call can include ending_before=obj_bar in order to fetch the previous page of the list."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "starting_after",
            "schema": {
              "type": "string",
              "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include starting_after=obj_foo in order to fetch the next page of the list."
            },
            "required": false,
            "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include starting_after=obj_foo in order to fetch the next page of the list."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "limit",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100."
            },
            "required": false,
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "member",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "mem_5QW8j1oKqQjNaPk4Hv3f"
              },
              "description": "Filter results by member. If multiple member ids are provided, intents matching any of the provided members will be returned. This param will be ignored if calling this endpoint with a Member JWT."
            },
            "required": false,
            "description": "Filter results by member. If multiple member ids are provided, intents matching any of the provided members will be returned. This param will be ignored if calling this endpoint with a Member JWT."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "type",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "scheduling",
                  "form"
                ]
              },
              "description": "Filter results by type. If multiple types are provided, intents matching any of the provided types will be returned."
            },
            "required": false,
            "description": "Filter results by type. If multiple types are provided, intents matching any of the provided types will be returned."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "status",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "active",
                  "expired",
                  "canceled",
                  "completed"
                ]
              },
              "description": "Filter results by status. If multiple statuses are provided, intents matching any of the provided statuses will be returned."
            },
            "required": false,
            "description": "Filter results by status. If multiple statuses are provided, intents matching any of the provided statuses will be returned."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "created_at",
            "schema": {
              "type": "object",
              "properties": {
                "lt": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Return results where the created_at field is less than this value."
                },
                "lte": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Return results where the created_at field is less than or equal to this value."
                },
                "gt": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Return results where the created_at field is greater than this value."
                },
                "gte": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Return results where the created_at field is greater than or equal to this value."
                }
              },
              "description": "A time based range filter on the list based on the object created_at field. For example `?created_at[gt]=2021-05-10T16:51:38.075Z&created_at[lte]=2021-05-26T16:51:38.075Z`. The value is a dictionary with the following:"
            },
            "required": false,
            "description": "A time based range filter on the list based on the object created_at field. For example `?created_at[gt]=2021-05-10T16:51:38.075Z&created_at[lte]=2021-05-26T16:51:38.075Z`. The value is a dictionary with the following:"
          }
        ],
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "object": {
                      "type": "string",
                      "default": "list",
                      "enum": [
                        "list"
                      ],
                      "example": "list",
                      "description": "Always `list`."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/intent"
                      },
                      "description": "Array of results"
                    },
                    "has_more": {
                      "type": "boolean",
                      "description": "Contains `true` if there is another page of results available."
                    }
                  },
                  "required": [
                    "object",
                    "data",
                    "has_more"
                  ]
                }
              }
            }
          }
        },
        "x-methodName": "list",
        "x-belongsToResource": "intent"
      }
    },
    "/v1/intents/{id}": {
      "get": {
        "summary": "Retrieve an Intent",
        "description": "Retrieves an existing intent by its unique identifier or its secret.\n\nIntents can be accessed by users in your organization, and members can access their own intents. Additionally, intents can be accessed by passing the intent secret as a parameter.",
        "tags": [
          "Intent"
        ],
        "parameters": [
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/intent"
                }
              }
            }
          }
        },
        "x-methodName": "retrieve",
        "x-belongsToResource": "intent"
      }
    },
    "/v1/intents/{id}/cancel": {
      "post": {
        "summary": "Cancel an Intent",
        "description": "Cancels an existing intent.\n\nMembers can no longer access canceled intents and can optionally be filtered out when displaying a list of intents.  Since existing intents cannot be updated, you can instead cancel an intent and create a new intent to replace it.",
        "tags": [
          "Intent"
        ],
        "parameters": [
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "id",
            "schema": {
              "type": "string",
              "example": "itnt_CPCpl5PfZmCzqMLlCi1v",
              "description": "Unique ID of the intent."
            },
            "required": true,
            "description": "Unique ID of the intent."
          }
        ],
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/intent"
                }
              }
            }
          }
        },
        "x-methodName": "cancel",
        "x-belongsToResource": "intent"
      }
    },
    "/v1/licenses": {
      "post": {
        "summary": "Create a License",
        "description": "Creates a new license for a user.",
        "tags": [
          "License"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "user": {
                    "type": "string",
                    "example": "usr_qoGndHzx8KwdYsEByt9X",
                    "description": "User to whom the license belongs."
                  },
                  "type": {
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "code"
                    ],
                    "description": "The type of clinical license. If you have a need for a license type that is not supported, please don’t hesitate to reach out to Source."
                  },
                  "region": {
                    "type": "string",
                    "description": "Region with which the license is associated. This is represented as an ISO-3166-2:US code. For example, \"US-NY\".",
                    "example": "US-NY"
                  },
                  "license_number": {
                    "type": "string",
                    "nullable": true,
                    "description": "The ID or number issued by the licensing body for this license.",
                    "example": "299535"
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "active",
                      "inactive"
                    ],
                    "description": "Status of the license.",
                    "example": "active"
                  },
                  "description": {
                    "type": "string",
                    "nullable": true,
                    "description": "Description of the license.",
                    "example": "License was verified by licensing board on 8/27/22."
                  }
                },
                "required": [
                  "user",
                  "type",
                  "region",
                  "status"
                ]
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/license"
                }
              }
            }
          }
        },
        "x-methodName": "create",
        "x-belongsToResource": "license"
      },
      "get": {
        "summary": "List all Licenses",
        "description": "Returns a list of licenses within the current account. The licenses returned are sorted by creation date, with the most recently added license appearing first.",
        "tags": [
          "License"
        ],
        "parameters": [
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "ending_before",
            "schema": {
              "type": "string",
              "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_bar, your subsequent call can include ending_before=obj_bar in order to fetch the previous page of the list."
            },
            "required": false,
            "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_bar, your subsequent call can include ending_before=obj_bar in order to fetch the previous page of the list."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "starting_after",
            "schema": {
              "type": "string",
              "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include starting_after=obj_foo in order to fetch the next page of the list."
            },
            "required": false,
            "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include starting_after=obj_foo in order to fetch the next page of the list."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "limit",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100."
            },
            "required": false,
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "sort",
            "schema": {
              "type": "string",
              "enum": [
                "created_at",
                "-created_at"
              ],
              "description": "Sort field for the results. A '-' prefix indicates sorting by that field in descending order, otherwise the order will be ascending.",
              "example": "created_at"
            },
            "required": false,
            "description": "Sort field for the results. A '-' prefix indicates sorting by that field in descending order, otherwise the order will be ascending."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "user",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "usr_qoGndHzx8KwdYsEByt9X"
              },
              "description": "Filter results by user. If multiple users are provided, licenses matching any of the provided users will be returned."
            },
            "required": false,
            "description": "Filter results by user. If multiple users are provided, licenses matching any of the provided users will be returned."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "type",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Filter results by type. The corresponding code for the license type should be provided. If multiple codes are provided, licenses matching any of the provided license types will be returned."
            },
            "required": false,
            "description": "Filter results by type. The corresponding code for the license type should be provided. If multiple codes are provided, licenses matching any of the provided license types will be returned."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "region",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Filter results by region. If multiple regions are provided, licenses matching any of the provided regions will be returned."
            },
            "required": false,
            "description": "Filter results by region. If multiple regions are provided, licenses matching any of the provided regions will be returned."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "status",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "active",
                  "inactive"
                ]
              },
              "description": "Filter results by status. If multiple statuses are provided, licenses matching any of the provided statuses will be returned."
            },
            "required": false,
            "description": "Filter results by status. If multiple statuses are provided, licenses matching any of the provided statuses will be returned."
          }
        ],
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "object": {
                      "type": "string",
                      "default": "list",
                      "enum": [
                        "list"
                      ],
                      "example": "list",
                      "description": "Always `list`."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/license"
                      },
                      "description": "Array of results"
                    },
                    "has_more": {
                      "type": "boolean",
                      "description": "Contains `true` if there is another page of results available."
                    }
                  },
                  "required": [
                    "object",
                    "data",
                    "has_more"
                  ]
                }
              }
            }
          }
        },
        "x-methodName": "list",
        "x-belongsToResource": "license"
      }
    },
    "/v1/licenses/{id}": {
      "post": {
        "summary": "Update a License",
        "description": "Updates the license with a new status, license number, or description. To update other license fields, first delete the license and then create a new one.",
        "tags": [
          "License"
        ],
        "parameters": [
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "id",
            "schema": {
              "type": "string",
              "example": "lic_R8qQYHFZO6dTjOBxHAda",
              "description": "Unique ID of the license."
            },
            "required": true,
            "description": "Unique ID of the license."
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "license_number": {
                    "type": "string",
                    "nullable": true,
                    "description": "The ID or number issued by the licensing body for this license.",
                    "example": "299535"
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "active",
                      "inactive"
                    ],
                    "description": "Status of the license.",
                    "example": "active"
                  },
                  "description": {
                    "type": "string",
                    "nullable": true,
                    "description": "Description of the license.",
                    "example": "License was verified by licensing board on 8/27/22."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/license"
                }
              }
            }
          }
        },
        "x-methodName": "update",
        "x-belongsToResource": "license"
      },
      "get": {
        "summary": "Retrieve a License",
        "description": "Retrieves the details of an existing license. You need only supply the unique license identifier that was returned upon creation.",
        "tags": [
          "License"
        ],
        "parameters": [
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "id",
            "schema": {
              "type": "string",
              "example": "lic_R8qQYHFZO6dTjOBxHAda",
              "description": "Unique ID of the license."
            },
            "required": true,
            "description": "Unique ID of the license."
          }
        ],
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/license"
                }
              }
            }
          }
        },
        "x-methodName": "retrieve",
        "x-belongsToResource": "license"
      },
      "delete": {
        "summary": "Delete a License",
        "description": "Deletes the specified license.",
        "tags": [
          "License"
        ],
        "parameters": [
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "id",
            "schema": {
              "type": "string",
              "example": "lic_R8qQYHFZO6dTjOBxHAda",
              "description": "Unique ID of the license."
            },
            "required": true,
            "description": "Unique ID of the license."
          }
        ],
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/license"
                }
              }
            }
          }
        },
        "x-methodName": "delete",
        "x-belongsToResource": "license"
      }
    },
    "/v1/locations/{id}": {
      "get": {
        "summary": "Retrieve a Location",
        "description": "Retrieves the details of an existing location. You need only supply the unique location identifier that was returned upon creation.",
        "tags": [
          "Location"
        ],
        "parameters": [
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "id",
            "schema": {
              "type": "string",
              "description": "Unique ID of the location.",
              "example": "loc_EtTXhFHUtCXO1JWBd8TN"
            },
            "required": true,
            "description": "Unique ID of the location."
          }
        ],
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/location"
                }
              }
            }
          }
        },
        "x-methodName": "retrieve",
        "x-belongsToResource": "location"
      },
      "post": {
        "summary": "Update a Location",
        "description": "Updates an existing location by its unique identifier.",
        "tags": [
          "Location"
        ],
        "parameters": [
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "id",
            "schema": {
              "type": "string",
              "description": "Unique ID of the location.",
              "example": "loc_EtTXhFHUtCXO1JWBd8TN"
            },
            "required": true,
            "description": "Unique ID of the location."
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Unique, friendly name for this location."
                  },
                  "description": {
                    "type": "string",
                    "nullable": true,
                    "description": "Free text description for this location. This might be used to include information about this location, the services that are offered here, or exceptions to operating hours."
                  },
                  "directions": {
                    "type": "string",
                    "nullable": true,
                    "description": "Free text directions for accessing this location. Typically, this is used to store information that is broadly applicable, such as \"take exit 45 off of I-485, and turn right on Front Street.\" You may also use it to provide more specific building level access information, such as \"enter through the north lobby, pass the security desk and take the elevator to the 3rd floor.\""
                  },
                  "image": {
                    "type": "string",
                    "example": "file_0A9zrLzCO7KPcnIbs40e",
                    "nullable": true,
                    "description": "Image associated with the physical location. Must be a file of type `location_photo`. Images are optional, but can be helpful for patients to identify the location."
                  },
                  "coordinates": {
                    "type": "array",
                    "items": {
                      "type": "number"
                    },
                    "description": "The physical coordinates (expressed as a pair of [longitude, latitude]) for this physical location. Source attempts to geocode addresses and set coordinates automatically when creating locations. However, in some cases, such as when opening an office in new construction, geolocation may not succeed. If this occurs, you may manually specify coordinates to override our geolocation."
                  },
                  "phone_numbers": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "use": {
                          "type": "string",
                          "enum": [
                            "home",
                            "work",
                            "mobile",
                            "fax",
                            "other"
                          ],
                          "description": "Type of phone number.",
                          "example": "mobile"
                        },
                        "value": {
                          "type": "string",
                          "description": "The phone number to use. This should be formatted in E.164 format.",
                          "example": "+12125551234"
                        }
                      },
                      "required": [
                        "use",
                        "value"
                      ]
                    },
                    "nullable": true
                  },
                  "address": {
                    "type": "object",
                    "properties": {
                      "street_line_1": {
                        "type": "string",
                        "minLength": 1,
                        "description": "The first line of the street address.",
                        "example": "1 City Point"
                      },
                      "street_line_2": {
                        "type": "string",
                        "nullable": true,
                        "description": "The second line of the street address."
                      },
                      "city": {
                        "type": "string",
                        "minLength": 1,
                        "description": "The city.",
                        "example": "Brooklyn"
                      },
                      "region": {
                        "type": "string",
                        "minLength": 1,
                        "description": "The region - in the US this should be the two-letter state code.",
                        "example": "NY"
                      },
                      "postal_code": {
                        "type": "string",
                        "minLength": 1,
                        "description": "The postal code (i.e. zip code).",
                        "example": "11215"
                      },
                      "country": {
                        "type": "string",
                        "minLength": 1,
                        "description": "The country, as a two-letter ISO 3166-1 code. US is the only supported country at this time.",
                        "example": "US"
                      }
                    },
                    "required": [
                      "street_line_1",
                      "city",
                      "region",
                      "postal_code",
                      "country"
                    ],
                    "description": "The physical address for this location. Note that added locations must have a physical address, which Source must be able to geocode."
                  },
                  "time_zone": {
                    "type": "string",
                    "description": "The time zone in which this location operates. It is used whenever Source need to determine the local time for a location.\n\nIf no time zone is provided, Source will attempt to automatically determine a time zone based on the physical location's address.",
                    "example": "America/New_York"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/location"
                }
              }
            }
          }
        },
        "x-methodName": "update",
        "x-belongsToResource": "location"
      },
      "delete": {
        "summary": "Delete a Location",
        "description": "Deletes a location by its unique identifier.\n\nOnce a location is deleted, it can no longer be used for searching availability or booking appointments. Existing appointments which already exist at the location will remain unaffected.",
        "tags": [
          "Location"
        ],
        "parameters": [
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "id",
            "schema": {
              "type": "string",
              "description": "Unique ID of the location.",
              "example": "loc_EtTXhFHUtCXO1JWBd8TN"
            },
            "required": true,
            "description": "Unique ID of the location."
          }
        ],
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/location"
                }
              }
            }
          }
        },
        "x-methodName": "delete",
        "x-belongsToResource": "location"
      }
    },
    "/v1/locations": {
      "post": {
        "summary": "Create a Location",
        "description": "Creates a new location where services are offered.\n\nYou may add any number of locations at which services are offered. Each account is currently limited to one virtual location, which contains information and practice-wide availability schedules for your virtual visits.",
        "tags": [
          "Location"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Unique, friendly name for this location."
                  },
                  "description": {
                    "type": "string",
                    "nullable": true,
                    "description": "Free text description for this location. This might be used to include information about this location, the services that are offered here, or exceptions to operating hours."
                  },
                  "directions": {
                    "type": "string",
                    "nullable": true,
                    "description": "Free text directions for accessing this location. Typically, this is used to store information that is broadly applicable, such as \"take exit 45 off of I-485, and turn right on Front Street.\" You may also use it to provide more specific building level access information, such as \"enter through the north lobby, pass the security desk and take the elevator to the 3rd floor.\""
                  },
                  "image": {
                    "type": "string",
                    "example": "file_0A9zrLzCO7KPcnIbs40e",
                    "nullable": true,
                    "description": "Image associated with the physical location. Must be a file of type `location_photo`. Images are optional, but can be helpful for patients to identify the location."
                  },
                  "coordinates": {
                    "type": "array",
                    "items": {
                      "type": "number"
                    },
                    "description": "The physical coordinates (expressed as a pair of [longitude, latitude]) for this physical location. Source attempts to geocode addresses and set coordinates automatically when creating locations. However, in some cases, such as when opening an office in new construction, geolocation may not succeed. If this occurs, you may manually specify coordinates to override our geolocation."
                  },
                  "phone_numbers": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "use": {
                          "type": "string",
                          "enum": [
                            "home",
                            "work",
                            "mobile",
                            "fax",
                            "other"
                          ],
                          "description": "Type of phone number.",
                          "example": "mobile"
                        },
                        "value": {
                          "type": "string",
                          "description": "The phone number to use. This should be formatted in E.164 format.",
                          "example": "+12125551234"
                        }
                      },
                      "required": [
                        "use",
                        "value"
                      ]
                    },
                    "nullable": true
                  },
                  "address": {
                    "type": "object",
                    "properties": {
                      "street_line_1": {
                        "type": "string",
                        "minLength": 1,
                        "description": "The first line of the street address.",
                        "example": "1 City Point"
                      },
                      "street_line_2": {
                        "type": "string",
                        "nullable": true,
                        "description": "The second line of the street address."
                      },
                      "city": {
                        "type": "string",
                        "minLength": 1,
                        "description": "The city.",
                        "example": "Brooklyn"
                      },
                      "region": {
                        "type": "string",
                        "minLength": 1,
                        "description": "The region - in the US this should be the two-letter state code.",
                        "example": "NY"
                      },
                      "postal_code": {
                        "type": "string",
                        "minLength": 1,
                        "description": "The postal code (i.e. zip code).",
                        "example": "11215"
                      },
                      "country": {
                        "type": "string",
                        "minLength": 1,
                        "description": "The country, as a two-letter ISO 3166-1 code. US is the only supported country at this time.",
                        "example": "US"
                      }
                    },
                    "required": [
                      "street_line_1",
                      "city",
                      "region",
                      "postal_code",
                      "country"
                    ],
                    "description": "The physical address for this location. Note that added locations must have a physical address, which Source must be able to geocode."
                  },
                  "time_zone": {
                    "type": "string",
                    "description": "The time zone in which this location operates. It is used whenever Source need to determine the local time for a location.\n\nIf no time zone is provided, Source will attempt to automatically determine a time zone based on the physical location's address.",
                    "example": "America/New_York"
                  }
                },
                "required": [
                  "name",
                  "address"
                ]
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/location"
                }
              }
            }
          }
        },
        "x-methodName": "create",
        "x-belongsToResource": "location"
      },
      "get": {
        "summary": "List all Locations",
        "description": "Returns a list of locations within the current account.\n\nThe locations returned are sorted by creation date, with the most recently added location appearing first.",
        "tags": [
          "Location"
        ],
        "parameters": [
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "ending_before",
            "schema": {
              "type": "string",
              "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_bar, your subsequent call can include ending_before=obj_bar in order to fetch the previous page of the list."
            },
            "required": false,
            "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_bar, your subsequent call can include ending_before=obj_bar in order to fetch the previous page of the list."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "starting_after",
            "schema": {
              "type": "string",
              "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include starting_after=obj_foo in order to fetch the next page of the list."
            },
            "required": false,
            "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include starting_after=obj_foo in order to fetch the next page of the list."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "limit",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100."
            },
            "required": false,
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "sort",
            "schema": {
              "type": "string",
              "enum": [
                "created_at",
                "name",
                "distance",
                "-created_at",
                "-name",
                "-distance"
              ],
              "description": "Sort field for the results. A '-' prefix indicates sorting by that field in descending order, otherwise the order will be ascending.",
              "example": "created_at"
            },
            "required": false,
            "description": "Sort field for the results. A '-' prefix indicates sorting by that field in descending order, otherwise the order will be ascending."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "type",
            "schema": {
              "type": "string",
              "enum": [
                "physical",
                "virtual"
              ],
              "description": "Limit results to locations of the provided type."
            },
            "required": false,
            "description": "Limit results to locations of the provided type."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "name",
            "schema": {
              "type": "string",
              "description": "Limit results to locations with name containing the given query."
            },
            "required": false,
            "description": "Limit results to locations with name containing the given query."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "nearby",
            "schema": {
              "type": "string",
              "description": "Filter for locations that are within a specified distance of the provided location. The value provided here can be a postal code, city/state combination, or a fully specified address. If you have coordinates, such as from a GPS device, you may also provide a coordinate pair as a comma-separated string, providing the longitude first, and then the latitude.\n\nWhen this filter is applied, the default sorting mechanism will automatically switch to \"distance\" unless an explicit sort option is provided."
            },
            "required": false,
            "description": "Filter for locations that are within a specified distance of the provided location. The value provided here can be a postal code, city/state combination, or a fully specified address. If you have coordinates, such as from a GPS device, you may also provide a coordinate pair as a comma-separated string, providing the longitude first, and then the latitude.\n\nWhen this filter is applied, the default sorting mechanism will automatically switch to \"distance\" unless an explicit sort option is provided."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "distance",
            "schema": {
              "type": "number",
              "description": "When using geo-search, this limits the locations that will be shown to only those that are within the provided number of miles of the target location."
            },
            "required": false,
            "description": "When using geo-search, this limits the locations that will be shown to only those that are within the provided number of miles of the target location."
          }
        ],
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "object": {
                      "type": "string",
                      "default": "list",
                      "enum": [
                        "list"
                      ],
                      "example": "list",
                      "description": "Always `list`."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/location"
                      },
                      "description": "Array of results"
                    },
                    "has_more": {
                      "type": "boolean",
                      "description": "Contains `true` if there is another page of results available."
                    }
                  },
                  "required": [
                    "object",
                    "data",
                    "has_more"
                  ]
                }
              }
            }
          }
        },
        "x-methodName": "list",
        "x-belongsToResource": "location"
      }
    },
    "/v1/measurements": {
      "post": {
        "summary": "Create a Measurement",
        "description": "Creates a measurement, which can be of kind `numeric` (with a single value) or     kind `composite` (with a collection of logically inseparable values (such as a     blood pressure reading). The shapes of these requests are different.",
        "tags": [
          "Measurement"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "blood_glucose",
                          "blood_oxygen_saturation",
                          "blood_pressure",
                          "body_weight",
                          "diastolic_blood_pressure",
                          "heart_rate",
                          "systolic_blood_pressure"
                        ],
                        "description": "Source measurement type to create."
                      },
                      "device": {
                        "type": "string",
                        "example": "dev_79Dek9tjwNUZqMWU576Q",
                        "description": "Device to which this measurement belongs."
                      },
                      "member": {
                        "type": "string",
                        "example": "mem_5QW8j1oKqQjNaPk4Hv3f",
                        "description": "Member to which this measurement belongs."
                      },
                      "time": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Timestamp that the measurement was taken.",
                        "example": "2021-05-13T16:33:00.000Z"
                      },
                      "kind": {
                        "type": "string",
                        "default": "composite",
                        "enum": [
                          "composite"
                        ],
                        "example": "composite",
                        "description": "Always `composite`."
                      },
                      "items": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "object",
                          "properties": {
                            "value": {
                              "type": "string",
                              "description": "Value for the measurement."
                            },
                            "unit": {
                              "type": "string",
                              "enum": [
                                "lbs",
                                "kg",
                                "mmHg",
                                "Pa",
                                "kPa",
                                "bpm",
                                "mg/dL",
                                "%"
                              ],
                              "description": "Unit that the measurement is reported in."
                            }
                          },
                          "required": [
                            "value",
                            "unit"
                          ]
                        },
                        "description": "Items to be included in the composite measurement."
                      }
                    },
                    "required": [
                      "type",
                      "device",
                      "member",
                      "time",
                      "kind",
                      "items"
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "blood_glucose",
                          "blood_oxygen_saturation",
                          "blood_pressure",
                          "body_weight",
                          "diastolic_blood_pressure",
                          "heart_rate",
                          "systolic_blood_pressure"
                        ],
                        "description": "Source measurement type to create."
                      },
                      "device": {
                        "type": "string",
                        "example": "dev_79Dek9tjwNUZqMWU576Q",
                        "description": "Device to which this measurement belongs."
                      },
                      "member": {
                        "type": "string",
                        "example": "mem_5QW8j1oKqQjNaPk4Hv3f",
                        "description": "Member to which this measurement belongs."
                      },
                      "time": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Timestamp that the measurement was taken.",
                        "example": "2021-05-13T16:33:00.000Z"
                      },
                      "kind": {
                        "type": "string",
                        "default": "numeric",
                        "enum": [
                          "numeric"
                        ],
                        "example": "numeric",
                        "description": "Always `numeric`."
                      },
                      "value": {
                        "type": "string",
                        "minLength": 1,
                        "description": "Value for the measurement."
                      },
                      "unit": {
                        "type": "string",
                        "enum": [
                          "lbs",
                          "kg",
                          "mmHg",
                          "Pa",
                          "kPa",
                          "bpm",
                          "mg/dL",
                          "%"
                        ],
                        "description": "Unit that the measurement is reported in."
                      }
                    },
                    "required": [
                      "type",
                      "device",
                      "member",
                      "time",
                      "kind",
                      "value",
                      "unit"
                    ]
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/measurement"
                }
              }
            }
          }
        },
        "x-methodName": "create",
        "x-belongsToResource": "measurement"
      },
      "get": {
        "summary": "List all Measurements",
        "description": "Lists all measurements for the current account. The measurements returned are sorted by     their timestamp, with the most recently created measurements appearing first.",
        "tags": [
          "Measurement"
        ],
        "parameters": [
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "ending_before",
            "schema": {
              "type": "string",
              "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_bar, your subsequent call can include ending_before=obj_bar in order to fetch the previous page of the list."
            },
            "required": false,
            "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_bar, your subsequent call can include ending_before=obj_bar in order to fetch the previous page of the list."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "starting_after",
            "schema": {
              "type": "string",
              "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include starting_after=obj_foo in order to fetch the next page of the list."
            },
            "required": false,
            "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include starting_after=obj_foo in order to fetch the next page of the list."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "limit",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100."
            },
            "required": false,
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "time",
            "schema": {
              "type": "object",
              "properties": {
                "lt": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Return results where the time field is less than this value."
                },
                "lte": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Return results where the time field is less than or equal to this value."
                },
                "gt": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Return results where the time field is greater than this value."
                },
                "gte": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Return results where the time field is greater than or equal to this value."
                }
              },
              "description": "A time based range filter on the list based on the object time field. For example `?time[gt]=2021-05-10T16:51:38.075Z&time[lte]=2021-05-26T16:51:38.075Z`. The value is a dictionary with the following:"
            },
            "required": false,
            "description": "A time based range filter on the list based on the object time field. For example `?time[gt]=2021-05-10T16:51:38.075Z&time[lte]=2021-05-26T16:51:38.075Z`. The value is a dictionary with the following:"
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "member",
            "schema": {
              "type": "string",
              "example": "mem_5QW8j1oKqQjNaPk4Hv3f",
              "description": "Filter measurements to only those belonging to the given member."
            },
            "required": false,
            "description": "Filter measurements to only those belonging to the given member."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "type",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "blood_glucose",
                  "blood_oxygen_saturation",
                  "blood_pressure",
                  "body_weight",
                  "diastolic_blood_pressure",
                  "heart_rate",
                  "systolic_blood_pressure"
                ]
              },
              "description": "Filter measurements to only those of the given type."
            },
            "required": false,
            "description": "Filter measurements to only those of the given type."
          }
        ],
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "object": {
                      "type": "string",
                      "default": "list",
                      "enum": [
                        "list"
                      ],
                      "example": "list",
                      "description": "Always `list`."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/measurement"
                      },
                      "description": "Array of results"
                    },
                    "has_more": {
                      "type": "boolean",
                      "description": "Contains `true` if there is another page of results available."
                    }
                  },
                  "required": [
                    "object",
                    "data",
                    "has_more"
                  ]
                }
              }
            }
          }
        },
        "x-methodName": "list",
        "x-belongsToResource": "measurement"
      }
    },
    "/v1/measurements/{id}": {
      "get": {
        "summary": "Retrieve a Measurement",
        "description": "Return the details of a measurement (a reading from a Device)",
        "tags": [
          "Measurement"
        ],
        "parameters": [
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "id",
            "schema": {
              "type": "string",
              "example": "meas_tk5YgrmO1baddbZreGts",
              "description": "Unique ID of the measurement."
            },
            "required": true,
            "description": "Unique ID of the measurement."
          }
        ],
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/measurement"
                }
              }
            }
          }
        },
        "x-methodName": "retrieve",
        "x-belongsToResource": "measurement"
      }
    },
    "/v1/members": {
      "post": {
        "summary": "Create a Member",
        "description": "Creates a new member and registers them with Source.",
        "tags": [
          "Member"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "nullable": true,
                    "description": "Title for the member (Mr., Mrs., Dr., etc).",
                    "example": "Dr."
                  },
                  "first_name": {
                    "type": "string",
                    "minLength": 1,
                    "description": "First name of the member",
                    "example": "Catherine"
                  },
                  "middle_name": {
                    "type": "string",
                    "nullable": true,
                    "description": "Middle name of the member",
                    "example": null
                  },
                  "last_name": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Last name of the member",
                    "example": "Parker"
                  },
                  "preferred_name": {
                    "type": "string",
                    "nullable": true,
                    "description": "Preferred name of the member. This could be a shortened or alternate name that the member typically prefers to be called.",
                    "example": "Cathy"
                  },
                  "time_zone": {
                    "type": "string",
                    "nullable": true,
                    "description": "The IANA time zone identifier of the member. Source uses this time zone when booking appointments on behalf of a member, and will use the time zone information when formatting email notifications to members."
                  },
                  "email": {
                    "type": "string",
                    "nullable": true,
                    "description": "Email address for the member",
                    "example": "evieparker@example.org"
                  },
                  "date_of_birth": {
                    "type": "string",
                    "format": "date",
                    "nullable": true,
                    "description": "Date of birth of the member. Required when enrollment_status is `enrolled`.",
                    "example": "1964-10-01"
                  },
                  "sex_at_birth": {
                    "type": "string",
                    "enum": [
                      "male",
                      "female",
                      "other",
                      "undisclosed"
                    ],
                    "nullable": true,
                    "description": "Sex assigned and recorded on the birth certificate at the time of the individual's birth. This information is often clinically useful, but is not necessarily indicative of the individual's gender identity. Required if enrollment_status is `enrolled`.",
                    "example": "female"
                  },
                  "administrative_gender": {
                    "type": "string",
                    "enum": [
                      "male",
                      "female",
                      "other"
                    ],
                    "nullable": true,
                    "description": "The gender of a person used for administrative purposes, such as on government-issued ID documents.",
                    "example": "female"
                  },
                  "gender_identity": {
                    "type": "object",
                    "properties": {
                      "value": {
                        "type": "string",
                        "enum": [
                          "female",
                          "male",
                          "non_binary",
                          "other",
                          "transgender_female",
                          "transgender_male",
                          "undisclosed"
                        ],
                        "description": "Coded value, or 'other'."
                      },
                      "text": {
                        "type": "string",
                        "nullable": true,
                        "description": "Member-provided string when value is 'other'."
                      }
                    },
                    "required": [
                      "value"
                    ],
                    "nullable": true,
                    "description": "The individual member's identification of gender. Note that receiving a null value for gender is not the same as an undisclosed gender. The latter means that the user specifically opted to not disclose a gender. The former indicates that the gender is unknown and/or was not provided.",
                    "example": {
                      "value": "female"
                    }
                  },
                  "pronouns": {
                    "type": "object",
                    "properties": {
                      "value": {
                        "type": "string",
                        "enum": [
                          "she_her",
                          "he_him",
                          "they_them",
                          "other"
                        ],
                        "description": "Coded value, or 'other'."
                      },
                      "text": {
                        "type": "string",
                        "nullable": true,
                        "description": "Member-provided string when value is 'other'."
                      }
                    },
                    "required": [
                      "value"
                    ],
                    "nullable": true,
                    "description": "Describes how the person would like to be referred to when not using their name.",
                    "example": {
                      "value": "they_them"
                    }
                  },
                  "address": {
                    "type": "object",
                    "properties": {
                      "street_line_1": {
                        "type": "string",
                        "nullable": true,
                        "description": "The first line of the street address.",
                        "example": "1 City Point"
                      },
                      "street_line_2": {
                        "type": "string",
                        "nullable": true,
                        "description": "The second line of the street address."
                      },
                      "city": {
                        "type": "string",
                        "nullable": true,
                        "description": "The city.",
                        "example": "Brooklyn"
                      },
                      "region": {
                        "type": "string",
                        "minLength": 1,
                        "description": "The region - in the US this should be the two-letter state code.",
                        "example": "NY"
                      },
                      "postal_code": {
                        "type": "string",
                        "nullable": true,
                        "description": "The postal code (i.e. zip code).",
                        "example": "11215"
                      },
                      "country": {
                        "type": "string",
                        "minLength": 1,
                        "description": "The country, as a two-letter ISO 3166-1 code. US is the only supported country at this time.",
                        "example": "US"
                      }
                    },
                    "required": [
                      "region",
                      "country"
                    ],
                    "nullable": true,
                    "description": "Primary address for the member. If you provide an address, you must specify at least the country and region."
                  },
                  "phone_numbers": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "use": {
                          "type": "string",
                          "enum": [
                            "home",
                            "work",
                            "mobile",
                            "fax",
                            "other"
                          ],
                          "description": "Type of phone number.",
                          "example": "mobile"
                        },
                        "value": {
                          "type": "string",
                          "description": "The phone number to use. This should be formatted in E.164 format.",
                          "example": "+12125551234"
                        }
                      },
                      "required": [
                        "use",
                        "value"
                      ]
                    },
                    "nullable": true,
                    "description": "List of phone numbers associated with the member. Providing any value overrides the entire list. Providing null or an empty list empties out the list of phone numbers."
                  },
                  "tags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "List of tags to apply to the member. You may provide either tag IDs or tag names for previously created tags. Providing tags input replaces any existing tags on the member. Providing null or an empty list empties out the list of tags."
                  },
                  "profile_image": {
                    "type": "string",
                    "nullable": true,
                    "description": "The file for the member's profile image. Must be of type `photo`"
                  },
                  "enrollment_status": {
                    "type": "string",
                    "enum": [
                      "enrolled",
                      "not_enrolled"
                    ],
                    "description": "Current status of the member's enrollment in receiving care services. By default, newly created members are in the `enrolled` status. If a member is not actively receiving care, use the `not_enrolled` status.\n\nWhen viewing a member with `access_level = 'limited'`, the value of `enrollment_status` will be `redacted`. This is not valid as an input.",
                    "example": "enrolled"
                  },
                  "external_identifiers": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "integration": {
                          "type": "string",
                          "example": "int_CoI0pt2LSWjGOTWRLZeT"
                        },
                        "external_id": {
                          "type": "string",
                          "description": "The unique identifier of the member in the integrated system.",
                          "example": "ext_ybNXqZDkat6pJ7d39Zx9"
                        }
                      },
                      "required": [
                        "integration",
                        "external_id"
                      ]
                    },
                    "description": "An array of external identifiers for the member. Each identifier is associated with a particular external integration. The member's external identifier must be unique for a given integration."
                  },
                  "custom_fields": {
                    "type": "object",
                    "additionalProperties": {},
                    "description": "Custom fields associated with the user. Custom fields must be registered with the Fields API before they can be used on resources, such as a member.\n\nOnce you've created a custom field, its value will be returned on the related member. You may also use custom fields when filtering members, using the List all Members endpoint."
                  }
                },
                "required": [
                  "first_name",
                  "last_name"
                ]
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/member"
                }
              }
            }
          }
        },
        "x-methodName": "create",
        "x-belongsToResource": "member"
      },
      "get": {
        "summary": "List all Members",
        "description": "Returns a list of members within the current account.\n\nThe members returned are sorted by creation date, with the most recently added members appearing first.",
        "tags": [
          "Member"
        ],
        "parameters": [
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "ending_before",
            "schema": {
              "type": "string",
              "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_bar, your subsequent call can include ending_before=obj_bar in order to fetch the previous page of the list."
            },
            "required": false,
            "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_bar, your subsequent call can include ending_before=obj_bar in order to fetch the previous page of the list."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "starting_after",
            "schema": {
              "type": "string",
              "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include starting_after=obj_foo in order to fetch the next page of the list."
            },
            "required": false,
            "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include starting_after=obj_foo in order to fetch the next page of the list."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "limit",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100."
            },
            "required": false,
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "sort",
            "schema": {
              "type": "string",
              "enum": [
                "created_at",
                "name",
                "date_of_birth",
                "-created_at",
                "-name",
                "-date_of_birth"
              ],
              "description": "Sort field for the results. A '-' prefix indicates sorting by that field in descending order, otherwise the order will be ascending.",
              "example": "created_at"
            },
            "required": false,
            "description": "Sort field for the results. A '-' prefix indicates sorting by that field in descending order, otherwise the order will be ascending."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "tag",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Limit results to members tagged with the provided tag. You may provide either tag IDs or tag names for previously created tags. If multiple tags are provided, searches for members containing any of the provided tags."
            },
            "required": false,
            "description": "Limit results to members tagged with the provided tag. You may provide either tag IDs or tag names for previously created tags. If multiple tags are provided, searches for members containing any of the provided tags."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "email",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Limit results to members with the specified email. If multiple emails are provided, members who have any of the emails are returned."
            },
            "required": false,
            "description": "Limit results to members with the specified email. If multiple emails are provided, members who have any of the emails are returned."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "care_team",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Filter results to members who have a specified user on their care team. Users must be provided as a list of user identifiers. If multiple users are provided, members who have any of the specified users on their care team are returned."
            },
            "required": false,
            "description": "Filter results to members who have a specified user on their care team. Users must be provided as a list of user identifiers. If multiple users are provided, members who have any of the specified users on their care team are returned."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "enrollment_status",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "enrolled",
                  "not_enrolled"
                ]
              },
              "description": "Filter results to members who have a specified enrollment status."
            },
            "required": false,
            "description": "Filter results to members who have a specified enrollment status."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "region",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Filter results to members whose addresses match the specified region. In the US this should be the two-letter state code. If multiple regions are provided, members who are located in any of the specified regions are returned."
            },
            "required": false,
            "description": "Filter results to members whose addresses match the specified region. In the US this should be the two-letter state code. If multiple regions are provided, members who are located in any of the specified regions are returned."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "sex_at_birth",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "male",
                  "female",
                  "other",
                  "undisclosed"
                ]
              },
              "description": "Filter results to members who have a specified sex at birth. If multiple sexes at birth are provided, members who have any of those specified are returned."
            },
            "required": false,
            "description": "Filter results to members who have a specified sex at birth. If multiple sexes at birth are provided, members who have any of those specified are returned."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "gender_identity",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "female",
                  "male",
                  "non_binary",
                  "other",
                  "transgender_female",
                  "transgender_male",
                  "undisclosed"
                ]
              },
              "description": "Filter results to members who have a specified gender identity. You must specify the `gender_identity.value`. If multiple gender identities are provided, members who have any of those specified are returned."
            },
            "required": false,
            "description": "Filter results to members who have a specified gender identity. You must specify the `gender_identity.value`. If multiple gender identities are provided, members who have any of those specified are returned."
          }
        ],
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "object": {
                      "type": "string",
                      "default": "list",
                      "enum": [
                        "list"
                      ],
                      "example": "list",
                      "description": "Always `list`."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/member"
                      },
                      "description": "Array of results"
                    },
                    "has_more": {
                      "type": "boolean",
                      "description": "Contains `true` if there is another page of results available."
                    }
                  },
                  "required": [
                    "object",
                    "data",
                    "has_more"
                  ]
                }
              }
            }
          }
        },
        "x-methodName": "list",
        "x-belongsToResource": "member"
      }
    },
    "/v1/members/{id}": {
      "get": {
        "summary": "Retrieve a Member",
        "description": "Retrieves the details of an existing member. You need only supply the unique member identifier that was returned upon member creation.",
        "tags": [
          "Member"
        ],
        "parameters": [
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "id",
            "schema": {
              "type": "string",
              "description": "Unique ID of the member.",
              "example": "mem_5QW8j1oKqQjNaPk4Hv3f"
            },
            "required": true,
            "description": "Unique ID of the member."
          }
        ],
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/member"
                }
              }
            }
          }
        },
        "x-methodName": "retrieve",
        "x-belongsToResource": "member"
      },
      "post": {
        "summary": "Update a Member",
        "description": "Updates the specified member by setting the values of the parameters passed.\n\nAny parameters not provided will be left unchanged. For example, if you pass the email parameter, that becomes the member's active email to be used.",
        "tags": [
          "Member"
        ],
        "parameters": [
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "id",
            "schema": {
              "type": "string",
              "description": "Unique ID of the member.",
              "example": "mem_5QW8j1oKqQjNaPk4Hv3f"
            },
            "required": true,
            "description": "Unique ID of the member."
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "nullable": true,
                    "description": "Title for the member (Mr., Mrs., Dr., etc).",
                    "example": "Dr."
                  },
                  "first_name": {
                    "type": "string",
                    "minLength": 1,
                    "description": "First name of the member",
                    "example": "Catherine"
                  },
                  "middle_name": {
                    "type": "string",
                    "nullable": true,
                    "description": "Middle name of the member",
                    "example": null
                  },
                  "last_name": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Last name of the member",
                    "example": "Parker"
                  },
                  "preferred_name": {
                    "type": "string",
                    "nullable": true,
                    "description": "Preferred name of the member. This could be a shortened or alternate name that the member typically prefers to be called.",
                    "example": "Cathy"
                  },
                  "time_zone": {
                    "type": "string",
                    "nullable": true,
                    "description": "The IANA time zone identifier of the member. Source uses this time zone when booking appointments on behalf of a member, and will use the time zone information when formatting email notifications to members."
                  },
                  "email": {
                    "type": "string",
                    "nullable": true,
                    "description": "Email address for the member",
                    "example": "evieparker@example.org"
                  },
                  "date_of_birth": {
                    "type": "string",
                    "format": "date",
                    "nullable": true,
                    "description": "Date of birth of the member. Required when enrollment_status is `enrolled`.",
                    "example": "1964-10-01"
                  },
                  "sex_at_birth": {
                    "type": "string",
                    "enum": [
                      "male",
                      "female",
                      "other",
                      "undisclosed"
                    ],
                    "nullable": true,
                    "description": "Sex assigned and recorded on the birth certificate at the time of the individual's birth. This information is often clinically useful, but is not necessarily indicative of the individual's gender identity. Required if enrollment_status is `enrolled`.",
                    "example": "female"
                  },
                  "administrative_gender": {
                    "type": "string",
                    "enum": [
                      "male",
                      "female",
                      "other"
                    ],
                    "nullable": true,
                    "description": "The gender of a person used for administrative purposes, such as on government-issued ID documents.",
                    "example": "female"
                  },
                  "gender_identity": {
                    "type": "object",
                    "properties": {
                      "value": {
                        "type": "string",
                        "enum": [
                          "female",
                          "male",
                          "non_binary",
                          "other",
                          "transgender_female",
                          "transgender_male",
                          "undisclosed"
                        ],
                        "description": "Coded value, or 'other'."
                      },
                      "text": {
                        "type": "string",
                        "nullable": true,
                        "description": "Member-provided string when value is 'other'."
                      }
                    },
                    "required": [
                      "value"
                    ],
                    "nullable": true,
                    "description": "The individual member's identification of gender. Note that receiving a null value for gender is not the same as an undisclosed gender. The latter means that the user specifically opted to not disclose a gender. The former indicates that the gender is unknown and/or was not provided.",
                    "example": {
                      "value": "female"
                    }
                  },
                  "pronouns": {
                    "type": "object",
                    "properties": {
                      "value": {
                        "type": "string",
                        "enum": [
                          "she_her",
                          "he_him",
                          "they_them",
                          "other"
                        ],
                        "description": "Coded value, or 'other'."
                      },
                      "text": {
                        "type": "string",
                        "nullable": true,
                        "description": "Member-provided string when value is 'other'."
                      }
                    },
                    "required": [
                      "value"
                    ],
                    "nullable": true,
                    "description": "Describes how the person would like to be referred to when not using their name.",
                    "example": {
                      "value": "they_them"
                    }
                  },
                  "address": {
                    "type": "object",
                    "properties": {
                      "street_line_1": {
                        "type": "string",
                        "nullable": true,
                        "description": "The first line of the street address.",
                        "example": "1 City Point"
                      },
                      "street_line_2": {
                        "type": "string",
                        "nullable": true,
                        "description": "The second line of the street address."
                      },
                      "city": {
                        "type": "string",
                        "nullable": true,
                        "description": "The city.",
                        "example": "Brooklyn"
                      },
                      "region": {
                        "type": "string",
                        "minLength": 1,
                        "description": "The region - in the US this should be the two-letter state code.",
                        "example": "NY"
                      },
                      "postal_code": {
                        "type": "string",
                        "nullable": true,
                        "description": "The postal code (i.e. zip code).",
                        "example": "11215"
                      },
                      "country": {
                        "type": "string",
                        "minLength": 1,
                        "description": "The country, as a two-letter ISO 3166-1 code. US is the only supported country at this time.",
                        "example": "US"
                      }
                    },
                    "required": [
                      "region",
                      "country"
                    ],
                    "nullable": true,
                    "description": "Primary address for the member. If you provide an address, you must specify at least the country and region."
                  },
                  "phone_numbers": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "use": {
                          "type": "string",
                          "enum": [
                            "home",
                            "work",
                            "mobile",
                            "fax",
                            "other"
                          ],
                          "description": "Type of phone number.",
                          "example": "mobile"
                        },
                        "value": {
                          "type": "string",
                          "description": "The phone number to use. This should be formatted in E.164 format.",
                          "example": "+12125551234"
                        }
                      },
                      "required": [
                        "use",
                        "value"
                      ]
                    },
                    "nullable": true,
                    "description": "List of phone numbers associated with the member. Providing any value overrides the entire list. Providing null or an empty list empties out the list of phone numbers."
                  },
                  "tags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "List of tags to apply to the member. You may provide either tag IDs or tag names for previously created tags. Providing tags input replaces any existing tags on the member. Providing null or an empty list empties out the list of tags."
                  },
                  "profile_image": {
                    "type": "string",
                    "nullable": true,
                    "description": "The file for the member's profile image. Must be of type `photo`"
                  },
                  "enrollment_status": {
                    "type": "string",
                    "enum": [
                      "enrolled",
                      "not_enrolled"
                    ],
                    "description": "Current status of the member's enrollment in receiving care services. By default, newly created members are in the `enrolled` status. If a member is not actively receiving care, use the `not_enrolled` status.\n\nWhen viewing a member with `access_level = 'limited'`, the value of `enrollment_status` will be `redacted`. This is not valid as an input.",
                    "example": "enrolled"
                  },
                  "external_identifiers": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "integration": {
                          "type": "string",
                          "example": "int_CoI0pt2LSWjGOTWRLZeT"
                        },
                        "external_id": {
                          "type": "string",
                          "description": "The unique identifier of the member in the integrated system.",
                          "example": "ext_ybNXqZDkat6pJ7d39Zx9"
                        }
                      },
                      "required": [
                        "integration",
                        "external_id"
                      ]
                    },
                    "description": "An array of external identifiers for the member. Each identifier is associated with a particular external integration. The member's external identifier must be unique for a given integration."
                  },
                  "custom_fields": {
                    "type": "object",
                    "additionalProperties": {},
                    "description": "Custom fields associated with the user. Custom fields must be registered with the Fields API before they can be used on resources, such as a member.\n\nOnce you've created a custom field, its value will be returned on the related member. You may also use custom fields when filtering members, using the List all Members endpoint."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/member"
                }
              }
            }
          }
        },
        "x-methodName": "update",
        "x-belongsToResource": "member"
      },
      "delete": {
        "summary": "Delete a Member",
        "description": "Deletes the specified member. Members that have meaningful objects associated with them, such as tasks, threads, or documents, may not be deleted.",
        "tags": [
          "Member"
        ],
        "parameters": [
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "id",
            "schema": {
              "type": "string",
              "description": "Unique ID of the member.",
              "example": "mem_5QW8j1oKqQjNaPk4Hv3f"
            },
            "required": true,
            "description": "Unique ID of the member."
          }
        ],
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/member"
                }
              }
            }
          }
        },
        "x-methodName": "delete",
        "x-belongsToResource": "member"
      }
    },
    "/v1/communication/messages": {
      "post": {
        "summary": "Create a Message",
        "description": "Creates a message within a thread.",
        "tags": [
          "Message"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "thread": {
                    "type": "string",
                    "example": "thrd_mi5bnWscvLf7q74k6Nzj",
                    "description": "Unique ID of the thread to which the message belongs."
                  },
                  "text": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Contents of the message to send."
                  },
                  "channel": {
                    "type": "string",
                    "example": "chan_wrsKSJ6PBE52n06UDyxV",
                    "nullable": true,
                    "description": "The channel over which the message will be sent. If a channel is specified, you must also specify the contact point in the `to` field. For example, to send a message via SMS, provide the ID of a channel of type 'sms' and specify the member's contact point in the `to` field. If no channel is provided, the message will be sent as an in-app message."
                  },
                  "to": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/contact_point"
                      }
                    ],
                    "nullable": true,
                    "description": "Contact point to which the message will be sent. For messages sent to a member or caregiver, this value is the contact point of the member or caregiver (for example, the member's phone number). The contact point provided must be supported by the channel you specify. If you provide this contact point but no channel, this contact point is ignored.",
                    "example": {
                      "system": "phone",
                      "value": "12125556789"
                    }
                  },
                  "thread_actions": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "enum": [
                          "awaiting_care_team",
                          "awaiting_member",
                          "closed"
                        ],
                        "description": "New status for the thread after sending this message. By default, Source will set the thread status to 'awaiting_care_team' if the member sends the message, and 'awaiting_member' if someone on the care team send the message.",
                        "example": "closed"
                      }
                    },
                    "description": "Actions to apply to the thread after the message has been sent. Source guarantees that these actions will only be applied if the message has been successfully sent. See the documentation for nested params for information about each available action."
                  },
                  "attachments": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "enum": [
                            "file",
                            "link"
                          ],
                          "description": "The type of attachment. Currently, the supported attachment types are `file` and `link`. If set to file, then a resource must be provided. If set to link, then a URL must be provided. Other attachment types may be added in the future.",
                          "example": "file"
                        },
                        "description": {
                          "type": "string",
                          "maxLength": 4096,
                          "nullable": true,
                          "description": "A description of the attachment to display. If a file uploaded to Source is attached, the file's name overrides a description and is displayed. Otherwise, this description is displayed.",
                          "example": null
                        },
                        "resource": {
                          "type": "string",
                          "description": "Unique ID of the resource to be attached to this message. When attaching a file, this should be set to the uploaded file's ID.",
                          "example": "file_gdIyXM9d4LKGnewOV4OM"
                        },
                        "url": {
                          "type": "string",
                          "description": "The URL where the attachment's contents can be accessed. For link attachments, the link to redirect. For file attachments, the URL returned by Source is a link to the file."
                        },
                        "metadata": {
                          "type": "object",
                          "additionalProperties": {},
                          "description": "A map of your own metadata to be included alongside this attachment. For example, you can use this metadata for bookkeeping or rendering in your member experience.\n\nMetadata may only be set when calling the API with your API keys. It cannot be set when using member tokens.",
                          "example": {
                            "patient_id": 456789,
                            "visit_id": "123"
                          }
                        }
                      },
                      "required": [
                        "type"
                      ]
                    }
                  },
                  "sender": {
                    "anyOf": [
                      {
                        "type": "string",
                        "example": "usr_qoGndHzx8KwdYsEByt9X"
                      },
                      {
                        "type": "string",
                        "example": "mem_5QW8j1oKqQjNaPk4Hv3f"
                      }
                    ],
                    "description": "When calling this endpoint with an API key, you must use this field to specify the user or member on whose behalf the message is sent.",
                    "example": "usr_NC6MQ3FyxddKoJJpfSVL"
                  },
                  "sent_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time at which this message was sent. When calling this endpoint with an API key you can optionally specify the sent_at time, such as when backloading historical messages. By default and when called as a user or a member, the current time is used.",
                    "example": "2021-05-13T16:33:00.000Z"
                  }
                },
                "required": [
                  "thread",
                  "text"
                ]
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/message"
                }
              }
            }
          }
        },
        "x-methodName": "create",
        "x-belongsToResource": "message"
      },
      "get": {
        "summary": "List all Messages",
        "description": "Returns a list of messages within a thread.\n\nThe messages returned are sorted with the most recently sent appearing first.",
        "tags": [
          "Message"
        ],
        "parameters": [
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "ending_before",
            "schema": {
              "type": "string",
              "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_bar, your subsequent call can include ending_before=obj_bar in order to fetch the previous page of the list."
            },
            "required": false,
            "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_bar, your subsequent call can include ending_before=obj_bar in order to fetch the previous page of the list."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "starting_after",
            "schema": {
              "type": "string",
              "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include starting_after=obj_foo in order to fetch the next page of the list."
            },
            "required": false,
            "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include starting_after=obj_foo in order to fetch the next page of the list."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "limit",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100."
            },
            "required": false,
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "thread",
            "schema": {
              "type": "string",
              "example": "thrd_mi5bnWscvLf7q74k6Nzj",
              "description": "Unique ID of the thread whose messages should be shown."
            },
            "required": true,
            "description": "Unique ID of the thread whose messages should be shown."
          }
        ],
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "object": {
                      "type": "string",
                      "default": "list",
                      "enum": [
                        "list"
                      ],
                      "example": "list",
                      "description": "Always `list`."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/message"
                      },
                      "description": "Array of results"
                    },
                    "has_more": {
                      "type": "boolean",
                      "description": "Contains `true` if there is another page of results available."
                    }
                  },
                  "required": [
                    "object",
                    "data",
                    "has_more"
                  ]
                }
              }
            }
          }
        },
        "x-methodName": "list",
        "x-belongsToResource": "message"
      }
    },
    "/v1/communication/messages/{id}": {
      "get": {
        "summary": "Retrieve a Message",
        "description": "Retrieves the details of a message. You need only supply the unique message identifier that was returned upon creation.",
        "tags": [
          "Message"
        ],
        "parameters": [
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "id",
            "schema": {
              "type": "string",
              "example": "msg_J2XECWlmq20uiX1PBdku",
              "description": "Unique ID of the message."
            },
            "required": true,
            "description": "Unique ID of the message."
          }
        ],
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/message"
                }
              }
            }
          }
        },
        "x-methodName": "retrieve",
        "x-belongsToResource": "message"
      }
    },
    "/v1/communication/messages/{id}/redact": {
      "post": {
        "summary": "Redact a Message",
        "description": "Redacts a message and its attachments that were sent in error to a member. You can redact a message sent by a user or an API key on behalf of a user.\n\nOnce redacted, the message content and any attachments are no longer accessible to the member, however the fact that the message was redacted is displayed to the member. The message is labeled as redacted and remains visible to users in the Source UI or via API.",
        "tags": [
          "Message"
        ],
        "parameters": [
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "id",
            "schema": {
              "type": "string",
              "example": "msg_J2XECWlmq20uiX1PBdku",
              "description": "Unique ID of the message."
            },
            "required": true,
            "description": "Unique ID of the message."
          }
        ],
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/message"
                }
              }
            }
          }
        },
        "x-methodName": "redact",
        "x-belongsToResource": "message"
      }
    },
    "/v1/notes": {
      "post": {
        "summary": "Create a Note",
        "description": "Creates a new note and an initial note version.\n\nTo supersede an existing note, pass the identifier of the original note in the supersedes parameter.",
        "tags": [
          "Note"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "encounter": {
                    "type": "string",
                    "example": "enc_QTt9bgcEaw5e9jpGnmzj",
                    "description": "The encounter to which this note belongs"
                  },
                  "author": {
                    "type": "string",
                    "example": "usr_qoGndHzx8KwdYsEByt9X",
                    "description": "Required if the caller is an API key and otherwise inferred when called as a user. This is the user ID  of the note's author."
                  },
                  "content": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/note_content_node"
                    },
                    "description": "Initial content of the note. By default, the note's content is blank."
                  },
                  "supersedes": {
                    "type": "string",
                    "example": "note_8pitvSre35TyAyhSVIzA",
                    "description": "Identifier of the note you wish to supersede."
                  }
                },
                "required": [
                  "encounter"
                ]
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/note"
                }
              }
            }
          }
        },
        "x-methodName": "create",
        "x-belongsToResource": "note"
      },
      "get": {
        "summary": "List all Notes",
        "description": "Lists all notes.\n\nBy default, this method does not return deleted or superseded notes. You can optionally specify `include_deleted`  to view deleted notes and `include_superseded` to view superseded notes.",
        "tags": [
          "Note"
        ],
        "parameters": [
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "ending_before",
            "schema": {
              "type": "string",
              "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_bar, your subsequent call can include ending_before=obj_bar in order to fetch the previous page of the list."
            },
            "required": false,
            "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_bar, your subsequent call can include ending_before=obj_bar in order to fetch the previous page of the list."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "starting_after",
            "schema": {
              "type": "string",
              "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include starting_after=obj_foo in order to fetch the next page of the list."
            },
            "required": false,
            "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include starting_after=obj_foo in order to fetch the next page of the list."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "limit",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100."
            },
            "required": false,
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "sort",
            "schema": {
              "type": "string",
              "enum": [
                "created_at",
                "-created_at"
              ],
              "description": "Sort field for the results. A '-' prefix indicates sorting by that field in descending order, otherwise the order will be ascending.",
              "example": "created_at"
            },
            "required": false,
            "description": "Sort field for the results. A '-' prefix indicates sorting by that field in descending order, otherwise the order will be ascending."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "member",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "mem_5QW8j1oKqQjNaPk4Hv3f"
              },
              "description": "Filter results by member. If multiple member ids are provided, notes matching any of the provided members will be returned."
            },
            "required": false,
            "description": "Filter results by member. If multiple member ids are provided, notes matching any of the provided members will be returned."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "author",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "usr_qoGndHzx8KwdYsEByt9X"
              },
              "description": "Filter notes by author. Authors must be provided as a list of user identifiers. If multiple author ids are  provided, notes matching any of the provided authors will be returned."
            },
            "required": false,
            "description": "Filter notes by author. Authors must be provided as a list of user identifiers. If multiple author ids are  provided, notes matching any of the provided authors will be returned."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "encounter",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "enc_QTt9bgcEaw5e9jpGnmzj"
              },
              "description": "Filter notes by encounter. If multiple encounter ids are  provided, notes matching any of the provided encounters will be returned."
            },
            "required": false,
            "description": "Filter notes by encounter. If multiple encounter ids are  provided, notes matching any of the provided encounters will be returned."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "signed",
            "schema": {
              "type": "boolean",
              "description": "Filter results by signed status."
            },
            "required": false,
            "description": "Filter results by signed status."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "include_superseded",
            "schema": {
              "type": "boolean",
              "description": "When set to true, superseded notes are included."
            },
            "required": false,
            "description": "When set to true, superseded notes are included."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "include_deleted",
            "schema": {
              "type": "boolean",
              "description": "When set to true, deleted notes are included."
            },
            "required": false,
            "description": "When set to true, deleted notes are included."
          }
        ],
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "object": {
                      "type": "string",
                      "default": "list",
                      "enum": [
                        "list"
                      ],
                      "example": "list",
                      "description": "Always `list`."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/note"
                      },
                      "description": "Array of results"
                    },
                    "has_more": {
                      "type": "boolean",
                      "description": "Contains `true` if there is another page of results available."
                    }
                  },
                  "required": [
                    "object",
                    "data",
                    "has_more"
                  ]
                }
              }
            }
          }
        },
        "x-methodName": "list",
        "x-belongsToResource": "note"
      }
    },
    "/v1/notes/{id}": {
      "post": {
        "summary": "Update a Note",
        "description": "Updates a note.\n\nOnly the note's author or an API key acting on behalf of the author can update a note. When the note content is  updated, a new note version is created automatically.",
        "tags": [
          "Note"
        ],
        "parameters": [
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "id",
            "schema": {
              "type": "string",
              "example": "note_8pitvSre35TyAyhSVIzA",
              "description": "Unique ID of the note."
            },
            "required": true,
            "description": "Unique ID of the note."
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "author": {
                    "type": "string",
                    "example": "usr_qoGndHzx8KwdYsEByt9X",
                    "description": "Required if the caller is an API key and otherwise inferred when called as a user. This is the user ID  of the note's author. If a user ID not matching the note's author is specified, the request fails."
                  },
                  "content": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/note_content_node"
                    },
                    "description": "Content you wish to save in the note. Updating note content creates a new note version, replacing the current  note version."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/note"
                }
              }
            }
          }
        },
        "x-methodName": "update",
        "x-belongsToResource": "note"
      },
      "delete": {
        "summary": "Delete a Note",
        "description": "Deletes a note.\n\nIf a note requires correction or an addendum, supersede the note rather than delete it. Deleting a note should be  reserved for use when correcting notes during a backfill or when a note is associated to the wrong member. Once a  note is deleted, it can no longer be accessed other than via the list all notes endpoint.",
        "tags": [
          "Note"
        ],
        "parameters": [
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "id",
            "schema": {
              "type": "string",
              "example": "note_8pitvSre35TyAyhSVIzA",
              "description": "Unique ID of the note."
            },
            "required": true,
            "description": "Unique ID of the note."
          }
        ],
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/note"
                }
              }
            }
          }
        },
        "x-methodName": "delete",
        "x-belongsToResource": "note"
      },
      "get": {
        "summary": "Retrieve a Note",
        "description": "Retrieves an existing note by its unique identifier.",
        "tags": [
          "Note"
        ],
        "parameters": [
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "id",
            "schema": {
              "type": "string",
              "example": "note_8pitvSre35TyAyhSVIzA",
              "description": "Unique ID of the note."
            },
            "required": true,
            "description": "Unique ID of the note."
          }
        ],
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/note"
                }
              }
            }
          }
        },
        "x-methodName": "retrieve",
        "x-belongsToResource": "note"
      }
    },
    "/v1/notes/{id}/sign": {
      "post": {
        "summary": "Sign a Note",
        "description": "Signs an unsigned note.\n\nOnly the note's author or an API key acting on behalf of the author can sign a note. Signing a note sets the latest  note version as the final, signed version of the note. Once signed, the note can no longer be modified. If a  correction to a signed note is required, create a new note that supersedes the original.",
        "tags": [
          "Note"
        ],
        "parameters": [
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "id",
            "schema": {
              "type": "string",
              "example": "note_8pitvSre35TyAyhSVIzA",
              "description": "Unique ID of the note."
            },
            "required": true,
            "description": "Unique ID of the note."
          }
        ],
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/note"
                }
              }
            }
          }
        },
        "x-methodName": "sign",
        "x-belongsToResource": "note"
      }
    },
    "/v1/notes/{id}/versions/{noteVersionId}": {
      "get": {
        "summary": "Retrieve a Note Version",
        "description": "Retrieves a note version for a given note by its unique identifier.",
        "tags": [
          "Note"
        ],
        "parameters": [
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "id",
            "schema": {
              "type": "string",
              "example": "note_8pitvSre35TyAyhSVIzA",
              "description": "Unique ID of the note."
            },
            "required": true,
            "description": "Unique ID of the note."
          },
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "noteVersionId",
            "schema": {
              "type": "string",
              "example": "nv_aWYK3Ie1SnNFeIQQceoG",
              "description": "Unique ID of the note version."
            },
            "required": true,
            "description": "Unique ID of the note version."
          }
        ],
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/note_version"
                }
              }
            }
          }
        },
        "x-methodName": "retrieveVersion",
        "x-belongsToResource": "note"
      }
    },
    "/v1/notes/{id}/versions": {
      "get": {
        "summary": "List all Note Versions",
        "description": "Lists all note versions for a given note.",
        "tags": [
          "Note"
        ],
        "parameters": [
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "id",
            "schema": {
              "type": "string",
              "example": "note_8pitvSre35TyAyhSVIzA",
              "description": "Unique ID of the note."
            },
            "required": true,
            "description": "Unique ID of the note."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "ending_before",
            "schema": {
              "type": "string",
              "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_bar, your subsequent call can include ending_before=obj_bar in order to fetch the previous page of the list."
            },
            "required": false,
            "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_bar, your subsequent call can include ending_before=obj_bar in order to fetch the previous page of the list."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "starting_after",
            "schema": {
              "type": "string",
              "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include starting_after=obj_foo in order to fetch the next page of the list."
            },
            "required": false,
            "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include starting_after=obj_foo in order to fetch the next page of the list."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "limit",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100."
            },
            "required": false,
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100."
          }
        ],
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "object": {
                      "type": "string",
                      "default": "list",
                      "enum": [
                        "list"
                      ],
                      "example": "list",
                      "description": "Always `list`."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/note_version"
                      },
                      "description": "Array of results"
                    },
                    "has_more": {
                      "type": "boolean",
                      "description": "Contains `true` if there is another page of results available."
                    }
                  },
                  "required": [
                    "object",
                    "data",
                    "has_more"
                  ]
                }
              }
            }
          }
        },
        "x-methodName": "listVersions",
        "x-belongsToResource": "note"
      }
    },
    "/v1/members/{recipient}/notification_preferences": {
      "get": {
        "tags": [
          "Notification Preferences"
        ],
        "parameters": [
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "recipient",
            "schema": {
              "type": "string",
              "example": "mem_5QW8j1oKqQjNaPk4Hv3f",
              "description": "The member whose notifications should be retrieved."
            },
            "required": true,
            "description": "The member whose notifications should be retrieved."
          }
        ],
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/notification_preferences"
                }
              }
            }
          }
        },
        "x-methodName": "retrieveForMember",
        "x-belongsToResource": "notification_preferences"
      },
      "post": {
        "tags": [
          "Notification Preferences"
        ],
        "parameters": [
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "recipient",
            "schema": {
              "type": "string",
              "example": "mem_5QW8j1oKqQjNaPk4Hv3f",
              "description": "The member whose notifications should be updated."
            },
            "required": true,
            "description": "The member whose notifications should be updated."
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "notifications": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "object",
                      "properties": {
                        "app": {
                          "type": "boolean",
                          "description": "Whether or not this notification is enabled via in-app notifications."
                        },
                        "email": {
                          "type": "boolean",
                          "description": "Whether or not this notification is enabled via email."
                        },
                        "sms": {
                          "type": "boolean",
                          "description": "Whether or not this notification is enabled via SMS. Please contact the Source team to enable SMS capabilities for your account."
                        }
                      },
                      "required": [
                        "app",
                        "email",
                        "sms"
                      ]
                    }
                  }
                },
                "required": [
                  "notifications"
                ]
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/notification_preferences"
                }
              }
            }
          }
        },
        "x-methodName": "updateForMember",
        "x-belongsToResource": "notification_preferences"
      }
    },
    "/v1/users/{recipient}/notification_preferences": {
      "get": {
        "tags": [
          "Notification Preferences"
        ],
        "parameters": [
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "recipient",
            "schema": {
              "type": "string",
              "example": "usr_qoGndHzx8KwdYsEByt9X",
              "description": "The user whose notifications should be retrieved."
            },
            "required": true,
            "description": "The user whose notifications should be retrieved."
          }
        ],
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/notification_preferences"
                }
              }
            }
          }
        },
        "x-methodName": "retrieveForUser",
        "x-belongsToResource": "notification_preferences"
      },
      "post": {
        "tags": [
          "Notification Preferences"
        ],
        "parameters": [
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "recipient",
            "schema": {
              "type": "string",
              "example": "usr_qoGndHzx8KwdYsEByt9X",
              "description": "The user whose notifications should be updated."
            },
            "required": true,
            "description": "The user whose notifications should be updated."
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "notifications": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "object",
                      "properties": {
                        "app": {
                          "type": "boolean",
                          "description": "Whether or not this notification is enabled via in-app notifications."
                        },
                        "email": {
                          "type": "boolean",
                          "description": "Whether or not this notification is enabled via email."
                        },
                        "sms": {
                          "type": "boolean",
                          "description": "Whether or not this notification is enabled via SMS. Please contact the Source team to enable SMS capabilities for your account."
                        }
                      },
                      "required": [
                        "app",
                        "email",
                        "sms"
                      ]
                    }
                  }
                },
                "required": [
                  "notifications"
                ]
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/notification_preferences"
                }
              }
            }
          }
        },
        "x-methodName": "updateForUser",
        "x-belongsToResource": "notification_preferences"
      }
    },
    "/v1/orders": {
      "post": {
        "summary": "Create an Order",
        "description": "Create an order to send devices to a member. Orders placed through the Source API will be sent directly to our fulfillment center, and generally shipped out the next day.\n\nAll orders sent out of our fulfillment center will be invoiced and payable at the end of the month.\n\nWhen placing an order, you'll need to specify the products you would like to send to the member. Currently, you can send the following products:\n\nScale: `prod_m0zvh4UpfvtRZasxVUwE`\n\nBlood Pressure Monitor: `prod_1rqijtxD3sjkVVQPRRFC`",
        "tags": [
          "Order"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "member": {
                    "type": "string",
                    "example": "mem_5QW8j1oKqQjNaPk4Hv3f",
                    "description": "Member to which the order should be sent."
                  },
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "product": {
                          "type": "string",
                          "description": "Unique ID of the product.",
                          "example": "prod_1rqijtxD3sjkVVQPRRFC"
                        }
                      },
                      "required": [
                        "product"
                      ]
                    },
                    "description": "Items that should be sent to the member."
                  },
                  "shipping_address": {
                    "type": "object",
                    "properties": {
                      "street_line_1": {
                        "type": "string",
                        "minLength": 1,
                        "description": "The first line of the street address.",
                        "example": "1 City Point"
                      },
                      "street_line_2": {
                        "type": "string",
                        "nullable": true,
                        "description": "The second line of the street address."
                      },
                      "city": {
                        "type": "string",
                        "minLength": 1,
                        "description": "The city.",
                        "example": "Brooklyn"
                      },
                      "region": {
                        "type": "string",
                        "minLength": 1,
                        "description": "The region - in the US this should be the two-letter state code.",
                        "example": "NY"
                      },
                      "postal_code": {
                        "type": "string",
                        "minLength": 1,
                        "description": "The postal code (i.e. zip code).",
                        "example": "11215"
                      },
                      "country": {
                        "type": "string",
                        "minLength": 1,
                        "description": "The country, as a two-letter ISO 3166-1 code. US is the only supported country at this time.",
                        "example": "US"
                      }
                    },
                    "required": [
                      "street_line_1",
                      "city",
                      "region",
                      "postal_code",
                      "country"
                    ],
                    "description": "The address to which the items should be shipped. This field is optional as long as the member has an associated primary address. If not, you must provide a shipping address for the order."
                  }
                },
                "required": [
                  "member",
                  "items"
                ]
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/order"
                }
              }
            }
          }
        },
        "x-methodName": "create",
        "x-belongsToResource": "order"
      },
      "get": {
        "summary": "List all Orders",
        "description": "Retrieves the details of an order. Supply the unique identifier of the order, which you might have received in a webhook.",
        "tags": [
          "Order"
        ],
        "parameters": [
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "ending_before",
            "schema": {
              "type": "string",
              "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_bar, your subsequent call can include ending_before=obj_bar in order to fetch the previous page of the list."
            },
            "required": false,
            "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_bar, your subsequent call can include ending_before=obj_bar in order to fetch the previous page of the list."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "starting_after",
            "schema": {
              "type": "string",
              "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include starting_after=obj_foo in order to fetch the next page of the list."
            },
            "required": false,
            "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include starting_after=obj_foo in order to fetch the next page of the list."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "limit",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100."
            },
            "required": false,
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "member",
            "schema": {
              "type": "string",
              "example": "mem_5QW8j1oKqQjNaPk4Hv3f",
              "description": "Limit results to orders for the given member."
            },
            "required": false,
            "description": "Limit results to orders for the given member."
          }
        ],
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "object": {
                      "type": "string",
                      "default": "list",
                      "enum": [
                        "list"
                      ],
                      "example": "list",
                      "description": "Always `list`."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/order"
                      },
                      "description": "Array of results"
                    },
                    "has_more": {
                      "type": "boolean",
                      "description": "Contains `true` if there is another page of results available."
                    }
                  },
                  "required": [
                    "object",
                    "data",
                    "has_more"
                  ]
                }
              }
            }
          }
        },
        "x-methodName": "list",
        "x-belongsToResource": "order"
      }
    },
    "/v1/orders/{id}": {
      "get": {
        "summary": "Retrieve an Order",
        "description": "Retrieves the details of an order. Supply the unique identifier of the order, which you might have received in a webhook.",
        "tags": [
          "Order"
        ],
        "parameters": [
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "id",
            "schema": {
              "type": "string",
              "example": "ord_SHIBg1N0DpzpBT3G8vkr",
              "description": "Unique ID of the order."
            },
            "required": true,
            "description": "Unique ID of the order."
          }
        ],
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/order"
                }
              }
            }
          }
        },
        "x-methodName": "retrieve",
        "x-belongsToResource": "order"
      }
    },
    "/v1/queues": {
      "post": {
        "summary": "Create a Queue",
        "description": "Creates a queue, which describes related tasks that are typically completed by a group of users. You can use queues alongside groups to configure how tasks are routed among a member's care team.",
        "tags": [
          "Queue"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 255,
                    "description": "Public display name for this queue. The name must be unique across all queues.",
                    "example": "Urgent Review"
                  },
                  "description": {
                    "type": "string",
                    "maxLength": 4096,
                    "nullable": true,
                    "description": "A description for this queue.",
                    "example": null
                  },
                  "routing_strategy": {
                    "type": "string",
                    "enum": [
                      "care_team_required",
                      "care_team_preferred",
                      "round_robin"
                    ],
                    "description": "Defines how a new task should be routed to the possible users defined in `routing_targets`. Because of the complexity in routing, it's best explained by example. Assume you have created a task that must be completed by a user in the Physicians group, which you have specified in the queue's `routing_targets`. The behavior of each routing strategy is as follows:\n\n* care_team_required - The task will be assigned only to a user who is in the Physicians group and who is on the member's care team. If there are no Physicians on the member's care team, the task will remain unassigned. If there are multiple Physicians on the member's care team, the first physician on the care team will be assigned the task.\n\n* care_team_preferred - The task will be assigned to a user who is in the Physicians group and is on the member's care team, if there are any. If there are no Physicians on the member's care team, the task will be assigned to another user in the Physicians group.\n\n* round_robin - The task will be assigned to a user in the Physicians group, and no preference will be given to users who are also on the member's care team.\n\nIf more than one group is listed in the queue's `routing_targets`, each group will be evaluated in order until a user assignment is found. If no user is found in any group, the task will remain unassigned.\n\nBy default, Source uses the `care_team_required` strategy to provide continuity of care and ensure patients have a consistent experience. However, this is not always the right task assignment strategy for all practices. In fact, even for a single practice, you may sometimes need to reach for another routing method."
                  },
                  "routing_targets": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "group": {
                          "type": "string",
                          "example": "grp_IlGhgsstvgsagl6lV89Q",
                          "description": "The group that is associated with the queue."
                        }
                      },
                      "required": [
                        "group"
                      ]
                    },
                    "description": "The groups associated with the queue. The queue's groups define the users on care teams who will receive automatically routed tasks."
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/queue"
                }
              }
            }
          }
        },
        "x-methodName": "create",
        "x-belongsToResource": "queue"
      },
      "get": {
        "summary": "List all Queues",
        "description": "Returns a list of queues within the current account. The queues returned are sorted by creation date, with the most recently added queue appearing first.",
        "tags": [
          "Queue"
        ],
        "parameters": [
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "ending_before",
            "schema": {
              "type": "string",
              "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_bar, your subsequent call can include ending_before=obj_bar in order to fetch the previous page of the list."
            },
            "required": false,
            "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_bar, your subsequent call can include ending_before=obj_bar in order to fetch the previous page of the list."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "starting_after",
            "schema": {
              "type": "string",
              "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include starting_after=obj_foo in order to fetch the next page of the list."
            },
            "required": false,
            "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include starting_after=obj_foo in order to fetch the next page of the list."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "limit",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100."
            },
            "required": false,
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "sort",
            "schema": {
              "type": "string",
              "enum": [
                "created_at",
                "name",
                "-created_at",
                "-name"
              ],
              "description": "Sort field for the results. A '-' prefix indicates sorting by that field in descending order, otherwise the order will be ascending.",
              "example": "created_at"
            },
            "required": false,
            "description": "Sort field for the results. A '-' prefix indicates sorting by that field in descending order, otherwise the order will be ascending."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "name",
            "schema": {
              "type": "string",
              "description": "Limit results to queues with name containing the given query."
            },
            "required": false,
            "description": "Limit results to queues with name containing the given query."
          }
        ],
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "object": {
                      "type": "string",
                      "default": "list",
                      "enum": [
                        "list"
                      ],
                      "example": "list",
                      "description": "Always `list`."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/queue"
                      },
                      "description": "Array of results"
                    },
                    "has_more": {
                      "type": "boolean",
                      "description": "Contains `true` if there is another page of results available."
                    }
                  },
                  "required": [
                    "object",
                    "data",
                    "has_more"
                  ]
                }
              }
            }
          }
        },
        "x-methodName": "list",
        "x-belongsToResource": "queue"
      }
    },
    "/v1/queues/{id}": {
      "get": {
        "summary": "Retrieve a Queue",
        "description": "Retrieves the details of an existing queue. You need only supply the unique queue identifier that was returned upon creation or that is referenced by a task definition.",
        "tags": [
          "Queue"
        ],
        "parameters": [
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "id",
            "schema": {
              "type": "string",
              "example": "que_6NGuKD4KdMCGXLP6uBda",
              "description": "Unique ID of the queue."
            },
            "required": true,
            "description": "Unique ID of the queue."
          }
        ],
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/queue"
                }
              }
            }
          }
        },
        "x-methodName": "retrieve",
        "x-belongsToResource": "queue"
      },
      "post": {
        "summary": "Update a Queue",
        "description": "Updates the specified queue by setting the values of the parameters passed. Any parameters not provided will be left unchanged.",
        "tags": [
          "Queue"
        ],
        "parameters": [
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "id",
            "schema": {
              "type": "string",
              "example": "que_6NGuKD4KdMCGXLP6uBda",
              "description": "Unique ID of the queue."
            },
            "required": true,
            "description": "Unique ID of the queue."
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 255,
                    "description": "Public display name for this queue. The name must be unique across all queues.",
                    "example": "Urgent Review"
                  },
                  "description": {
                    "type": "string",
                    "maxLength": 4096,
                    "nullable": true,
                    "description": "A description for this queue.",
                    "example": null
                  },
                  "routing_strategy": {
                    "type": "string",
                    "enum": [
                      "care_team_required",
                      "care_team_preferred",
                      "round_robin"
                    ],
                    "description": "Defines how a new task should be routed to the possible users defined in `routing_targets`. Because of the complexity in routing, it's best explained by example. Assume you have created a task that must be completed by a user in the Physicians group, which you have specified in the queue's `routing_targets`. The behavior of each routing strategy is as follows:\n\n* care_team_required - The task will be assigned only to a user who is in the Physicians group and who is on the member's care team. If there are no Physicians on the member's care team, the task will remain unassigned. If there are multiple Physicians on the member's care team, the first physician on the care team will be assigned the task.\n\n* care_team_preferred - The task will be assigned to a user who is in the Physicians group and is on the member's care team, if there are any. If there are no Physicians on the member's care team, the task will be assigned to another user in the Physicians group.\n\n* round_robin - The task will be assigned to a user in the Physicians group, and no preference will be given to users who are also on the member's care team.\n\nIf more than one group is listed in the queue's `routing_targets`, each group will be evaluated in order until a user assignment is found. If no user is found in any group, the task will remain unassigned.\n\nBy default, Source uses the `care_team_required` strategy to provide continuity of care and ensure patients have a consistent experience. However, this is not always the right task assignment strategy for all practices. In fact, even for a single practice, you may sometimes need to reach for another routing method."
                  },
                  "routing_targets": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "group": {
                          "type": "string",
                          "example": "grp_IlGhgsstvgsagl6lV89Q",
                          "description": "The group that is associated with the queue."
                        }
                      },
                      "required": [
                        "group"
                      ]
                    },
                    "description": "The groups associated with the queue. The queue's groups define the users on care teams who will receive automatically routed tasks."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/queue"
                }
              }
            }
          }
        },
        "x-methodName": "update",
        "x-belongsToResource": "queue"
      },
      "delete": {
        "summary": "Delete a Queue",
        "description": "Deletes the specified queue. When the queue is deleted, all open tasks and task definitions referencing the queue will be updated with a replacement queue. You can optionally specify the replacement queue for open tasks, otherwise Source will use the current default queue. Note that for the short period of time between when the queue is deleted and open tasks are updated with a replacement queue, open tasks may reference the now deleted queue.",
        "tags": [
          "Queue"
        ],
        "parameters": [
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "id",
            "schema": {
              "type": "string",
              "example": "que_6NGuKD4KdMCGXLP6uBda",
              "description": "Unique ID of the queue."
            },
            "required": true,
            "description": "Unique ID of the queue."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "replacement_queue",
            "schema": {
              "type": "string",
              "example": "que_6NGuKD4KdMCGXLP6uBda",
              "description": "The ID of the queue to use as a replacement for task definitions and tasks that reference the deleted queue. If not specified, Source removes the reference to the deleted queue."
            },
            "required": false,
            "description": "The ID of the queue to use as a replacement for task definitions and tasks that reference the deleted queue. If not specified, Source removes the reference to the deleted queue."
          }
        ],
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/queue"
                }
              }
            }
          }
        },
        "x-methodName": "delete",
        "x-belongsToResource": "queue"
      }
    },
    "/v1/relationships": {
      "post": {
        "summary": "Create a Relationship",
        "description": "Creates a new relationship between two members. You can create relationships to allow caregivers, family members, or other people to whom the member has consented to participate in the member's care.\n\nAn active relationship allows members to view information about one another. For example, if Member A is a caregiver for Member B, Member A can view, edit, and create any data for Member B. Member B can view basic demographic information about Member A.",
        "tags": [
          "Relationship"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "subject_member": {
                    "type": "string",
                    "example": "mem_5QW8j1oKqQjNaPk4Hv3f",
                    "description": "The member receiving care to whom the relationship applies."
                  },
                  "authorized_member": {
                    "type": "string",
                    "example": "mem_5QW8j1oKqQjNaPk4Hv3f",
                    "description": "The member acting as the related person for the `member`. For example, if a member consents to their spouse participating in their care, specify the spouse's member ID here."
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "active",
                      "inactive"
                    ],
                    "description": "Current status of the relationship. By default, newly created relationships have a status of 'active'. When a relationship is in a status of 'inactive', the authorized member can no longer access the member's data.",
                    "example": "active"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "brother",
                      "child",
                      "daughter",
                      "father",
                      "friend",
                      "grandchild",
                      "grandparent",
                      "mother",
                      "parent",
                      "partner",
                      "professional_caregiver",
                      "sibling",
                      "sister",
                      "son",
                      "spouse",
                      "other"
                    ],
                    "description": "The type of relationship. If set to 'other', you must provide a description for the relationship.",
                    "example": "spouse"
                  },
                  "description": {
                    "type": "string",
                    "maxLength": 4096,
                    "nullable": true,
                    "description": "A description for this relationship. Use the description to add detail about the relationship, such as whether the related member has power of attorney for the member.",
                    "example": "Power Of Attorney"
                  }
                },
                "required": [
                  "subject_member",
                  "authorized_member",
                  "status",
                  "type"
                ]
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/relationship"
                }
              }
            }
          }
        },
        "x-methodName": "create",
        "x-belongsToResource": "relationship"
      },
      "get": {
        "summary": "List all Relationships",
        "description": "Returns a list of relationships within the current account.\n\nThe relationships by default are sorted by creation date, with the most recently created relationship appearing first.",
        "tags": [
          "Relationship"
        ],
        "parameters": [
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "ending_before",
            "schema": {
              "type": "string",
              "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_bar, your subsequent call can include ending_before=obj_bar in order to fetch the previous page of the list."
            },
            "required": false,
            "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_bar, your subsequent call can include ending_before=obj_bar in order to fetch the previous page of the list."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "starting_after",
            "schema": {
              "type": "string",
              "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include starting_after=obj_foo in order to fetch the next page of the list."
            },
            "required": false,
            "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include starting_after=obj_foo in order to fetch the next page of the list."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "limit",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100."
            },
            "required": false,
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "subject_member",
            "schema": {
              "type": "string",
              "example": "mem_5QW8j1oKqQjNaPk4Hv3f",
              "description": "Limit results to relationships with the given subject member."
            },
            "required": false,
            "description": "Limit results to relationships with the given subject member."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "authorized_member",
            "schema": {
              "type": "string",
              "example": "mem_5QW8j1oKqQjNaPk4Hv3f",
              "description": "Limit results to relationships with the given authorized member."
            },
            "required": false,
            "description": "Limit results to relationships with the given authorized member."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "status",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "active",
                  "inactive"
                ]
              },
              "description": "Limit results to relationships with the given status. If multiple statuses are provided, relationships matching any of the provided statuses will be returned."
            },
            "required": false,
            "description": "Limit results to relationships with the given status. If multiple statuses are provided, relationships matching any of the provided statuses will be returned."
          }
        ],
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "object": {
                      "type": "string",
                      "default": "list",
                      "enum": [
                        "list"
                      ],
                      "example": "list",
                      "description": "Always `list`."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/relationship"
                      },
                      "description": "Array of results"
                    },
                    "has_more": {
                      "type": "boolean",
                      "description": "Contains `true` if there is another page of results available."
                    }
                  },
                  "required": [
                    "object",
                    "data",
                    "has_more"
                  ]
                }
              }
            }
          }
        },
        "x-methodName": "list",
        "x-belongsToResource": "relationship"
      }
    },
    "/v1/relationships/{id}": {
      "get": {
        "summary": "Retrieve a Relationship",
        "description": "Retrieves the details of an existing relationship. You need only supply the unique relationship identifier that was returned upon relationship creation.",
        "tags": [
          "Relationship"
        ],
        "parameters": [
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "id",
            "schema": {
              "type": "string",
              "example": "rel_ggufPKOyKNNWF3TPPXuK",
              "description": "Unique ID of the relationship."
            },
            "required": true,
            "description": "Unique ID of the relationship."
          }
        ],
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/relationship"
                }
              }
            }
          }
        },
        "x-methodName": "retrieve",
        "x-belongsToResource": "relationship"
      },
      "post": {
        "summary": "Update a Relationship",
        "description": "Updates a relationship between two members.\n\nAny parameters not provided are left unchanged. For example, if you pass the status parameter, that becomes the relationship's current status.",
        "tags": [
          "Relationship"
        ],
        "parameters": [
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "id",
            "schema": {
              "type": "string",
              "example": "rel_ggufPKOyKNNWF3TPPXuK",
              "description": "Unique ID of the relationship."
            },
            "required": true,
            "description": "Unique ID of the relationship."
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string",
                    "enum": [
                      "active",
                      "inactive"
                    ],
                    "description": "Current status of the relationship. By default, newly created relationships have a status of 'active'. When a relationship is in a status of 'inactive', the authorized member can no longer access the member's data.",
                    "example": "active"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "brother",
                      "child",
                      "daughter",
                      "father",
                      "friend",
                      "grandchild",
                      "grandparent",
                      "mother",
                      "parent",
                      "partner",
                      "professional_caregiver",
                      "sibling",
                      "sister",
                      "son",
                      "spouse",
                      "other"
                    ],
                    "description": "The type of relationship. If set to 'other', you must provide a description for the relationship.",
                    "example": "spouse"
                  },
                  "description": {
                    "type": "string",
                    "maxLength": 4096,
                    "nullable": true,
                    "description": "A description for this relationship. Use the description to add detail about the relationship, such as whether the related member has power of attorney for the member.",
                    "example": "Power Of Attorney"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/relationship"
                }
              }
            }
          }
        },
        "x-methodName": "update",
        "x-belongsToResource": "relationship"
      }
    },
    "/v1/scheduling/slots": {
      "get": {
        "summary": "List all Available Slots",
        "description": "This endpoint lists all bookable appointments slots for a set of users, given a list of participants to include and a list of participants to exclude.\n\nThis endpoint is accessible using member tokens, allowing your patient portal to query the Source API for availability directly.\n\nAvailability queries can only look at a maximum window of 31 days (a complete calendar month). If you need to look at availability windows greater than 31 days, please reach out to our team.",
        "tags": [
          "Slots"
        ],
        "parameters": [
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "appointment_type",
            "schema": {
              "type": "string",
              "description": "The appointment type to search. You may provide either the appointment types ID or key. Note that the appointment type must be flagged as bookable in order for the available slots API to succeed.",
              "example": "intake_visit"
            },
            "required": true,
            "description": "The appointment type to search. You may provide either the appointment types ID or key. Note that the appointment type must be flagged as bookable in order for the available slots API to succeed."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "member",
            "schema": {
              "type": "string",
              "example": "mem_5QW8j1oKqQjNaPk4Hv3f",
              "description": "The member for whom the appointment is being booked. The member may influence the results of this endpoint, depending on the routing choice selected below.\n\nWhen calling this endpoint as a member (using a member token), the member is inferred and need not be provided. If it is provided, it must be the same as the currently authenticated member."
            },
            "required": false,
            "description": "The member for whom the appointment is being booked. The member may influence the results of this endpoint, depending on the routing choice selected below.\n\nWhen calling this endpoint as a member (using a member token), the member is inferred and need not be provided. If it is provided, it must be the same as the currently authenticated member."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "license_region",
            "schema": {
              "type": "string",
              "description": "Region of the member for whom the appointment is being booked. This is represented as an ISO-3166-2:US code. You can use this parameter when finding slots when you don't yet have a member or if the member's address is missing. If a member with an address is specified or inferred (using a member token), this parameter should not be used and fails if the license_region does not match that of the member. If a physical location is specified in the location parameter, this parameter should not be used.",
              "example": "US-NY"
            },
            "required": false,
            "description": "Region of the member for whom the appointment is being booked. This is represented as an ISO-3166-2:US code. You can use this parameter when finding slots when you don't yet have a member or if the member's address is missing. If a member with an address is specified or inferred (using a member token), this parameter should not be used and fails if the license_region does not match that of the member. If a physical location is specified in the location parameter, this parameter should not be used."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "start_at",
            "schema": {
              "type": "string",
              "format": "date-time",
              "description": "The start time for the availability search. You may provide a fully qualified timestamp at any point throughout the day. Note that Source always begins computing slots at midnight, so the first available slot may not align with the start_at timestamp you provide, even if a user is available.",
              "example": "2021-05-13T16:33:00.000Z"
            },
            "required": true,
            "description": "The start time for the availability search. You may provide a fully qualified timestamp at any point throughout the day. Note that Source always begins computing slots at midnight, so the first available slot may not align with the start_at timestamp you provide, even if a user is available."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "end_at",
            "schema": {
              "type": "string",
              "format": "date-time",
              "description": "The end time for the availability search. Must be after the start time. Source will not return any time slots that start after this time, however it's possible that a time slot may end after this time.",
              "example": "2021-05-13T16:33:00.000Z"
            },
            "required": true,
            "description": "The end time for the availability search. Must be after the start time. Source will not return any time slots that start after this time, however it's possible that a time slot may end after this time."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "output_time_zone",
            "schema": {
              "type": "string",
              "description": "By default, slots are formatted in UTC time. Providing another time zone here has two effects:\n\n- The slots returned from the API will be formatted in this time zone. This differs from most other endpoints, which   always return times in UTC. - Source will automatically strip out overlapping times in that zone due to daylight savings. For example, when the   clock rolls back in November in America/New_York, your bookable slots will be 2am, 2:30am, 3am, 3:30am (2am happens   twice on this day, but Source will skip the second instance of it and all other overlapping times.)",
              "example": "America/New_York"
            },
            "required": false,
            "description": "By default, slots are formatted in UTC time. Providing another time zone here has two effects:\n\n- The slots returned from the API will be formatted in this time zone. This differs from most other endpoints, which   always return times in UTC. - Source will automatically strip out overlapping times in that zone due to daylight savings. For example, when the   clock rolls back in November in America/New_York, your bookable slots will be 2am, 2:30am, 3am, 3:30am (2am happens   twice on this day, but Source will skip the second instance of it and all other overlapping times.)"
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "participants",
            "schema": {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "type": "string",
                    "example": "grp_IlGhgsstvgsagl6lV89Q"
                  },
                  {
                    "type": "string",
                    "example": "usr_qoGndHzx8KwdYsEByt9X"
                  }
                ]
              },
              "description": "Provide a set of users and groups that should be included in the response. The users and groups included in this parameter must still be included in the appointment type's configuration in order for the availability API to return slots for them.\n\nFor example, if your appointment type is linked to the group \"Physicians,\" and when calling this API you provide an include parameter for the group \"Nurses,\" you will only receive available slots for users who are in both the Physicians and Nurses group.\n\nYou can use this capability to enforce state licensing requirements when booking visits. Place each physician in a group called Physicians, as well as one group for each state in which they are licensed, such as \"New York.\" Then, link your intake visit appointment type to the \"Physicians\" group. Finally, when onboarding a new member, provide an include parameter to the slots API specifying your \"New York\" group and you'll see combined availability for all of your New York physicians."
            },
            "required": false,
            "description": "Provide a set of users and groups that should be included in the response. The users and groups included in this parameter must still be included in the appointment type's configuration in order for the availability API to return slots for them.\n\nFor example, if your appointment type is linked to the group \"Physicians,\" and when calling this API you provide an include parameter for the group \"Nurses,\" you will only receive available slots for users who are in both the Physicians and Nurses group.\n\nYou can use this capability to enforce state licensing requirements when booking visits. Place each physician in a group called Physicians, as well as one group for each state in which they are licensed, such as \"New York.\" Then, link your intake visit appointment type to the \"Physicians\" group. Finally, when onboarding a new member, provide an include parameter to the slots API specifying your \"New York\" group and you'll see combined availability for all of your New York physicians."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "exclude_participants",
            "schema": {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "type": "string",
                    "example": "grp_IlGhgsstvgsagl6lV89Q"
                  },
                  {
                    "type": "string",
                    "example": "usr_qoGndHzx8KwdYsEByt9X"
                  }
                ]
              },
              "description": "Provide a set of users and groups that should be explicitly excluded from availability lookups. This can be used to ensure a particular user (or group of users) will not be returned from this API. You may want to use this if a member is requesting to change physicians, and you want to ensure that they're not inadvertently booked with their same physician again.\n\nNote that if both include and exclude are provided, exclude takes precedence. Source guarantees that users provided in the exclude parameter will never appear in the slot results."
            },
            "required": false,
            "description": "Provide a set of users and groups that should be explicitly excluded from availability lookups. This can be used to ensure a particular user (or group of users) will not be returned from this API. You may want to use this if a member is requesting to change physicians, and you want to ensure that they're not inadvertently booked with their same physician again.\n\nNote that if both include and exclude are provided, exclude takes precedence. Source guarantees that users provided in the exclude parameter will never appear in the slot results."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "participant_operator",
            "schema": {
              "type": "string",
              "enum": [
                "and",
                "or"
              ],
              "description": "Controls the operator used when providing multiple groups to the `participants` parameter. By default, participants use the `or` operator. If you want to only show participants who are in multiple groups, you can use the `and` operator. This operator will only impact the `participants` parameter, please see `exclude_participant_operator` for the same option for exclusion.\n\nNote: when using the `and` filter, you should not provide user identifiers to the `participants` parameter, because a user cannot have multiple identifiers at the same time."
            },
            "required": false,
            "description": "Controls the operator used when providing multiple groups to the `participants` parameter. By default, participants use the `or` operator. If you want to only show participants who are in multiple groups, you can use the `and` operator. This operator will only impact the `participants` parameter, please see `exclude_participant_operator` for the same option for exclusion.\n\nNote: when using the `and` filter, you should not provide user identifiers to the `participants` parameter, because a user cannot have multiple identifiers at the same time."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "exclude_participant_operator",
            "schema": {
              "type": "string",
              "enum": [
                "and",
                "or"
              ],
              "description": "Controls the operator used when providing multiple groups to the `exclude_participants` parameter. By default, participants use the `or` operator. If you want to only show participants who are in multiple groups, you can use the `and` operator. This operator will only impact the `exclude_participants` parameter, please see `participant_operator` for the same option for inclusion.\n\nNote: when using the `and` filter, you should not provide user identifiers to the `exclude_participants` parameter, because a user cannot have multiple identifiers at the same time."
            },
            "required": false,
            "description": "Controls the operator used when providing multiple groups to the `exclude_participants` parameter. By default, participants use the `or` operator. If you want to only show participants who are in multiple groups, you can use the `and` operator. This operator will only impact the `exclude_participants` parameter, please see `participant_operator` for the same option for inclusion.\n\nNote: when using the `and` filter, you should not provide user identifiers to the `exclude_participants` parameter, because a user cannot have multiple identifiers at the same time."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "routing_strategy",
            "schema": {
              "type": "string",
              "enum": [
                "care_team_required",
                "care_team_preferred",
                "care_team_hybrid",
                "round_robin"
              ],
              "description": "Overrides the routing strategy configured on the appointment type. For more information about the available routing strategies and how they work, see the [Appointment Type](/docs/api/reference/appointment-type/) documentation.",
              "example": "care_team_preferred"
            },
            "required": false,
            "description": "Overrides the routing strategy configured on the appointment type. For more information about the available routing strategies and how they work, see the [Appointment Type](/docs/api/reference/appointment-type/) documentation."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "rescheduling_appointment",
            "schema": {
              "type": "string",
              "example": "appt_mTvufYJBBgYmbEAEZ6rE",
              "description": "Identifier of the appointment that is being rescheduled. When provided, Source makes a few changes to availability calculation:\n\n- Source assumes the duration of the appointment should remain the same, and thus will look for slots matching the appointment's current   duration, rather than the appointment type's duration (which is the default behavior). - Source will ignore the appointment when looking for conflicts, allowing you to rebook the same slot or a slot which overlaps with the   appointment's current time window.\n\nYou should only provide rescheduling_appointment when you intend to update an existing appointment, rather than to book a new appointment."
            },
            "required": false,
            "description": "Identifier of the appointment that is being rescheduled. When provided, Source makes a few changes to availability calculation:\n\n- Source assumes the duration of the appointment should remain the same, and thus will look for slots matching the appointment's current   duration, rather than the appointment type's duration (which is the default behavior). - Source will ignore the appointment when looking for conflicts, allowing you to rebook the same slot or a slot which overlaps with the   appointment's current time window.\n\nYou should only provide rescheduling_appointment when you intend to update an existing appointment, rather than to book a new appointment."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "duration",
            "schema": {
              "type": "number",
              "minimum": 5,
              "maximum": 360,
              "description": "The duration of the appointment to book, in minutes. By default, Source will use either the appointment type's duration or, if provided, the rescheduling appointment's duration. However, you may specify an alternative duration here to calculate slots for an appointment of a different length.\n\nMust be a number between 5 and 360 minutes (6 hours).",
              "example": 30
            },
            "required": false,
            "description": "The duration of the appointment to book, in minutes. By default, Source will use either the appointment type's duration or, if provided, the rescheduling appointment's duration. However, you may specify an alternative duration here to calculate slots for an appointment of a different length.\n\nMust be a number between 5 and 360 minutes (6 hours)."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "location_type",
            "schema": {
              "type": "string",
              "enum": [
                "physical",
                "virtual"
              ],
              "description": "Type of location for which to find availability. By default, slots are returned for the `virtual` location type. If you specify a `physical` location type, you must also specify the location's identifier in the `location` parameter."
            },
            "required": false,
            "description": "Type of location for which to find availability. By default, slots are returned for the `virtual` location type. If you specify a `physical` location type, you must also specify the location's identifier in the `location` parameter."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "location",
            "schema": {
              "type": "string",
              "example": "loc_EtTXhFHUtCXO1JWBd8TN",
              "description": "Identifier of the location for which to find availability. This parameter is required if you specify a `physical` location in the `location_type` parameter. If you are searching for `virtual` availability, this parameter should not be used and fails if a location identifier is passed. If the appointment type requires that license checks be performed, the location's region is used to evaluate participants' licensure."
            },
            "required": false,
            "description": "Identifier of the location for which to find availability. This parameter is required if you specify a `physical` location in the `location_type` parameter. If you are searching for `virtual` availability, this parameter should not be used and fails if a location identifier is passed. If the appointment type requires that license checks be performed, the location's region is used to evaluate participants' licensure."
          }
        ],
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "slots": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/slot"
                      },
                      "description": "The list of all slots that were returned for your availability query. Slots will only be returned if at least one participant is available."
                    },
                    "participants": {
                      "type": "array",
                      "items": {
                        "oneOf": [
                          {
                            "type": "string"
                          },
                          {
                            "$ref": "#/components/schemas/user"
                          }
                        ],
                        "x-expandable": {
                          "$ref": "#/components/schemas/user"
                        },
                        "description": "Expandable reference to a User",
                        "example": "usr_NC6MQ3FyxddKoJJpfSVL"
                      },
                      "description": "The list of all possible users who were considered during the availability query. When using groups in participant inclusion and exclusion criteria, it is often useful to know the list of possible users who were searched for availability. You can use this to create a booking interface that shows your team's photos or includes more information about each of them.\n\nSource guarantees that availability slots will not be returned for users who are not present in this list, and that the list shown here is reflective of the order that each user was considered when selecting a preferred user for each time slot."
                    }
                  },
                  "required": [
                    "slots",
                    "participants"
                  ]
                }
              }
            }
          }
        },
        "x-methodName": "list",
        "x-belongsToResource": "slot"
      }
    },
    "/v1/scheduling/recurring_slots": {
      "post": {
        "summary": "List recurring appointment slots",
        "description": "This endpoint lists all potential recurring instances of a recurring series, given the proposed start timestamp of the first appointment in the series. The response will indicate which instances of the series are not bookable due to lack of provider availability or conflicting appointments.\n\nThis endpoint is accessible using member tokens, allowing your patient portal to query the Source API for availability directly.",
        "tags": [
          "Slots"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "appointment_type": {
                    "type": "string",
                    "description": "The appointment type of the proposed recurring series. You may provide either the appointment types ID or key.",
                    "example": "intake_visit"
                  },
                  "start_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The start time of the proposed first appointment in the series.",
                    "example": "2021-05-13T16:33:00.000Z"
                  },
                  "end_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The end time of the proposed first appointment in the series.",
                    "example": "2021-05-13T16:33:00.000Z"
                  },
                  "time_zone": {
                    "type": "string",
                    "description": "The time zone that recurring slots are calculated in. When the recurring series crosses a daylight savings boundary, the time zone defines the behavior: \"Every Monday at 4pm\" means \"4pm in this time zone\" and the appointment time will be 4pm on before and after the daylight savings change.",
                    "example": "America/Los_Angeles"
                  },
                  "output_time_zone": {
                    "type": "string",
                    "description": "By default, slots are formatted in UTC time. Providing another time zone here has only effect: the slots returned from the API will be formatted in this time zone. This differs from most other endpoints, which always return times in UTC.",
                    "example": "America/New_York"
                  },
                  "participants": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "example": "usr_qoGndHzx8KwdYsEByt9X"
                    },
                    "description": "Provide a set of users that will be participating in the recurring appointments. This should match the particpants selected for the proposed initial appointment."
                  },
                  "recurrence": {
                    "type": "object",
                    "properties": {
                      "frequency": {
                        "type": "string",
                        "enum": [
                          "weekly"
                        ],
                        "description": "How often the appointments should recur. Source only supports 'weekly' at this time (including \"every N weeks\", using 'interval').",
                        "example": "weekly"
                      },
                      "interval": {
                        "type": "number",
                        "minimum": 1,
                        "maximum": 20,
                        "description": "How many of the `frequency` intervals between each appointment, i.e. 'every N weeks'.",
                        "example": 1
                      },
                      "count": {
                        "type": "number",
                        "minimum": 1,
                        "maximum": 52,
                        "description": "How many total appointments should be in the series.\n\nOne and only one of `count` or `until` must be set."
                      },
                      "until": {
                        "type": "string",
                        "format": "date",
                        "description": "The date at which the recurring series will end. This date is inclusive, so if an appointment instance falls on this date, that appointment will be booked. One and only one of `count` or `until` must be set."
                      },
                      "days_of_week": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "enum": [
                            "monday",
                            "tuesday",
                            "wednesday",
                            "thursday",
                            "friday",
                            "saturday",
                            "sunday"
                          ]
                        },
                        "description": "The days of the week on which appointments should occur. By providing multiple days, you can indicate multiple recurring appointments per week."
                      }
                    },
                    "required": [
                      "frequency",
                      "interval",
                      "days_of_week"
                    ],
                    "description": "The configuration of the recurring series."
                  },
                  "location": {
                    "type": "string",
                    "example": "loc_EtTXhFHUtCXO1JWBd8TN",
                    "description": "Identifier of the physical location for which to find availability. If no location is provided, slots are returned for the `virtual` location type."
                  }
                },
                "required": [
                  "appointment_type",
                  "start_at",
                  "end_at",
                  "time_zone",
                  "participants",
                  "recurrence"
                ]
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/recurring_slot"
                }
              }
            }
          }
        },
        "x-methodName": "listRecurring",
        "x-belongsToResource": "slot"
      }
    },
    "/v1/tags": {
      "post": {
        "summary": "Create a Tag",
        "description": "Creates a new tag. You can create a new tag with a unique name and a display color of your choice. If a tag already exists with the same name (case insensitive), an error is returned.",
        "tags": [
          "Tag"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "maxLength": 255,
                    "description": "Unique name of the tag that is used for display. Must not start with tag_",
                    "example": "Healthy Streak"
                  },
                  "description": {
                    "type": "string",
                    "nullable": true,
                    "description": "Description for this tag. The description is not displayed and is used to capture administrative notes about the tag.",
                    "example": "Indicates the patient has been consistently hitting their goals for 6 months or more."
                  },
                  "color": {
                    "type": "string",
                    "enum": [
                      "gray",
                      "blue",
                      "teal",
                      "yellow",
                      "green",
                      "red",
                      "orange",
                      "purple"
                    ],
                    "description": "The color of the tag when displaying the tag. This is primarily used in the Source UI, but you're able to use this in your own system as well.",
                    "example": "gray"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag"
                }
              }
            }
          }
        },
        "x-methodName": "create",
        "x-belongsToResource": "tag"
      },
      "get": {
        "summary": "List all Tags",
        "description": "Returns a list of tags within the current account. The tags returned are sorted by creation date, with the most recently added tag appearing first.",
        "tags": [
          "Tag"
        ],
        "parameters": [
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "ending_before",
            "schema": {
              "type": "string",
              "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_bar, your subsequent call can include ending_before=obj_bar in order to fetch the previous page of the list."
            },
            "required": false,
            "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_bar, your subsequent call can include ending_before=obj_bar in order to fetch the previous page of the list."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "starting_after",
            "schema": {
              "type": "string",
              "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include starting_after=obj_foo in order to fetch the next page of the list."
            },
            "required": false,
            "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include starting_after=obj_foo in order to fetch the next page of the list."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "limit",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100."
            },
            "required": false,
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "sort",
            "schema": {
              "type": "string",
              "enum": [
                "created_at",
                "name",
                "-created_at",
                "-name"
              ],
              "description": "Sort field for the results. A '-' prefix indicates sorting by that field in descending order, otherwise the order will be ascending.",
              "example": "created_at"
            },
            "required": false,
            "description": "Sort field for the results. A '-' prefix indicates sorting by that field in descending order, otherwise the order will be ascending."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "name",
            "schema": {
              "type": "string",
              "description": "Filter results by tags matching the provided name. This parameter is case insensitive."
            },
            "required": false,
            "description": "Filter results by tags matching the provided name. This parameter is case insensitive."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "archived",
            "schema": {
              "type": "boolean",
              "description": "Filter tags to only those whose archive status matches the provided value. By default, this operation return all tags. You may pass `archived=true` to show archived tags, or `archived=false` to show unarchived tags."
            },
            "required": false,
            "description": "Filter tags to only those whose archive status matches the provided value. By default, this operation return all tags. You may pass `archived=true` to show archived tags, or `archived=false` to show unarchived tags."
          }
        ],
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "object": {
                      "type": "string",
                      "default": "list",
                      "enum": [
                        "list"
                      ],
                      "example": "list",
                      "description": "Always `list`."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/tag"
                      },
                      "description": "Array of results"
                    },
                    "has_more": {
                      "type": "boolean",
                      "description": "Contains `true` if there is another page of results available."
                    }
                  },
                  "required": [
                    "object",
                    "data",
                    "has_more"
                  ]
                }
              }
            }
          }
        },
        "x-methodName": "list",
        "x-belongsToResource": "tag"
      }
    },
    "/v1/tags/{id}": {
      "post": {
        "summary": "Update a Tag",
        "description": "Updates the specified tag by setting the values of the parameters passed. Any parameters not provided will be left unchanged.",
        "tags": [
          "Tag"
        ],
        "parameters": [
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "id",
            "schema": {
              "type": "string",
              "example": "tag_ro2MsQK3MTC8wtsJUDDd",
              "description": "Unique ID of the tag."
            },
            "required": true,
            "description": "Unique ID of the tag."
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "maxLength": 255,
                    "description": "Unique name of the tag that is used for display. Must not start with tag_",
                    "example": "Healthy Streak"
                  },
                  "description": {
                    "type": "string",
                    "nullable": true,
                    "description": "Description for this tag. The description is not displayed and is used to capture administrative notes about the tag.",
                    "example": "Indicates the patient has been consistently hitting their goals for 6 months or more."
                  },
                  "color": {
                    "type": "string",
                    "enum": [
                      "gray",
                      "blue",
                      "teal",
                      "yellow",
                      "green",
                      "red",
                      "orange",
                      "purple"
                    ],
                    "description": "The color of the tag when displaying the tag. This is primarily used in the Source UI, but you're able to use this in your own system as well.",
                    "example": "gray"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag"
                }
              }
            }
          }
        },
        "x-methodName": "update",
        "x-belongsToResource": "tag"
      },
      "delete": {
        "summary": "Delete a Tag",
        "description": "Deletes the specified tag. A deleted tag is removed from all members to which it relates.",
        "tags": [
          "Tag"
        ],
        "parameters": [
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "id",
            "schema": {
              "type": "string",
              "example": "tag_ro2MsQK3MTC8wtsJUDDd",
              "description": "Unique ID of the tag."
            },
            "required": true,
            "description": "Unique ID of the tag."
          }
        ],
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag"
                }
              }
            }
          }
        },
        "x-methodName": "delete",
        "x-belongsToResource": "tag"
      },
      "get": {
        "summary": "Retrieve a Tag",
        "description": "Retrieve a tag by its unique identifier.",
        "tags": [
          "Tag"
        ],
        "parameters": [
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "id",
            "schema": {
              "type": "string",
              "example": "tag_ro2MsQK3MTC8wtsJUDDd",
              "description": "Unique ID of the tag."
            },
            "required": true,
            "description": "Unique ID of the tag."
          }
        ],
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag"
                }
              }
            }
          }
        },
        "x-methodName": "retrieve",
        "x-belongsToResource": "tag"
      }
    },
    "/v1/tags/{id}/archive": {
      "post": {
        "summary": "Archive a Tag",
        "description": "Archives the specified tag. An archived tag can be viewed on any member it relates to but cannot be added to additional members.",
        "tags": [
          "Tag"
        ],
        "parameters": [
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "id",
            "schema": {
              "type": "string",
              "example": "tag_ro2MsQK3MTC8wtsJUDDd",
              "description": "Unique ID of the tag."
            },
            "required": true,
            "description": "Unique ID of the tag."
          }
        ],
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag"
                }
              }
            }
          }
        },
        "x-methodName": "archive",
        "x-belongsToResource": "tag"
      }
    },
    "/v1/tags/{id}/unarchive": {
      "post": {
        "summary": "Unarchive a Tag",
        "description": "Unarchives the specified tag. Once unarchived, the tag can be reapplied to additional members.",
        "tags": [
          "Tag"
        ],
        "parameters": [
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "id",
            "schema": {
              "type": "string",
              "example": "tag_ro2MsQK3MTC8wtsJUDDd",
              "description": "Unique ID of the tag."
            },
            "required": true,
            "description": "Unique ID of the tag."
          }
        ],
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag"
                }
              }
            }
          }
        },
        "x-methodName": "unarchive",
        "x-belongsToResource": "tag"
      }
    },
    "/v1/tasks": {
      "post": {
        "summary": "Create a Task",
        "description": "Creates a new task and registers it with Source. Once a task is created you cannot update the definition or member associated with that task. Note that you cannot create a task using system-managed task definitions (those with keys starting with system).",
        "tags": [
          "Task"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "definition": {
                    "type": "string",
                    "description": "The task definition that this task models. You may provide either the definition ID or key.",
                    "example": "tskd_2Lc2yr7YIYxfN3RCSlBU"
                  },
                  "member": {
                    "type": "string",
                    "example": "mem_5QW8j1oKqQjNaPk4Hv3f",
                    "description": "The member to which this task belongs."
                  },
                  "assignee": {
                    "type": "string",
                    "example": "usr_qoGndHzx8KwdYsEByt9X",
                    "nullable": true,
                    "description": "The user to which this task is assigned. If set to null, the task will be unassigned."
                  },
                  "queue": {
                    "type": "string",
                    "example": "que_6NGuKD4KdMCGXLP6uBda",
                    "nullable": true,
                    "description": "The ID of the queue to which a task is assigned. When creating a task, if no queue is specified for the task, the task will use the queue of the task definition. If no queue exists on the task definition, the task will not be placed in a queue."
                  },
                  "summary": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 255,
                    "description": "A brief summary of the task, which will be shown wherever the task is presented.",
                    "example": "Call the member to check up on medications"
                  },
                  "description": {
                    "type": "string",
                    "maxLength": 65536,
                    "nullable": true,
                    "description": "Long-form text describing the task to be performed. You can use this field to share any additional relevant context to the care team that will be acting on this task.",
                    "example": "The member had a specific question about their medication and how it interacts with their Hypertension."
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "open",
                      "in_progress",
                      "blocked",
                      "on_hold",
                      "resolved",
                      "canceled"
                    ],
                    "description": "The status of the task",
                    "example": "open"
                  },
                  "due_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time by which this task should be completed. If no due_at date is supplied, the due_at date will automatically be 24 hours after the task was created.'",
                    "example": "2021-05-13T16:33:00.000Z"
                  },
                  "related": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "minLength": 1,
                      "description": "Unique identifier for the related resource.",
                      "example": "thrd_mi5bnWscvLf7q74k6Nzj"
                    },
                    "description": "A list of object IDs, such as threads, that are related to the task."
                  }
                },
                "required": [
                  "definition",
                  "member",
                  "summary",
                  "status"
                ]
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/task"
                }
              }
            }
          }
        },
        "x-methodName": "create",
        "x-belongsToResource": "task"
      },
      "get": {
        "summary": "List all Tasks",
        "description": "Returns a list of tasks within the current account.\n\nThe tasks returned are sorted by creation date, with the most recently added task appearing first.",
        "tags": [
          "Task"
        ],
        "parameters": [
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "ending_before",
            "schema": {
              "type": "string",
              "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_bar, your subsequent call can include ending_before=obj_bar in order to fetch the previous page of the list."
            },
            "required": false,
            "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_bar, your subsequent call can include ending_before=obj_bar in order to fetch the previous page of the list."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "starting_after",
            "schema": {
              "type": "string",
              "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include starting_after=obj_foo in order to fetch the next page of the list."
            },
            "required": false,
            "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include starting_after=obj_foo in order to fetch the next page of the list."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "limit",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100."
            },
            "required": false,
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "sort",
            "schema": {
              "type": "string",
              "enum": [
                "created_at",
                "due_at",
                "-created_at",
                "-due_at"
              ],
              "description": "Sort field for the results. A '-' prefix indicates sorting by that field in descending order, otherwise the order will be ascending.",
              "example": "created_at"
            },
            "required": false,
            "description": "Sort field for the results. A '-' prefix indicates sorting by that field in descending order, otherwise the order will be ascending."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "status",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "open",
                  "in_progress",
                  "blocked",
                  "on_hold",
                  "resolved",
                  "canceled"
                ]
              },
              "description": "Filter results by status. If multiple statuses are provided, tasks matching any of the provided statuses will be returned."
            },
            "required": false,
            "description": "Filter results by status. If multiple statuses are provided, tasks matching any of the provided statuses will be returned."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "member",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "mem_5QW8j1oKqQjNaPk4Hv3f"
              },
              "description": "Filter results by member. If multiple member ids are provided, tasks matching any of the provided members will be returned."
            },
            "required": false,
            "description": "Filter results by member. If multiple member ids are provided, tasks matching any of the provided members will be returned."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "assignee",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Filter results by assignees. If multiple assignee ids are provided, tasks matching any of the provided assignees will be returned. Providing `unassigned` will return any tasks that are unassigned."
            },
            "required": false,
            "description": "Filter results by assignees. If multiple assignee ids are provided, tasks matching any of the provided assignees will be returned. Providing `unassigned` will return any tasks that are unassigned."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "definition",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "tskd_2Lc2yr7YIYxfN3RCSlBU"
              },
              "description": "Filter results by task definitons. If multiple task definition ids are provided, tasks matching any of the provided definitions will be returned."
            },
            "required": false,
            "description": "Filter results by task definitons. If multiple task definition ids are provided, tasks matching any of the provided definitions will be returned."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "queue",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "que_6NGuKD4KdMCGXLP6uBda"
              },
              "description": "Filter results by queue. If multiple queues are provided, task related to any of those queues will be returned."
            },
            "required": false,
            "description": "Filter results by queue. If multiple queues are provided, task related to any of those queues will be returned."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "due_at",
            "schema": {
              "type": "object",
              "properties": {
                "lt": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Return results where the due_at field is less than this value."
                },
                "lte": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Return results where the due_at field is less than or equal to this value."
                },
                "gt": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Return results where the due_at field is greater than this value."
                },
                "gte": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Return results where the due_at field is greater than or equal to this value."
                }
              },
              "description": "A time based range filter on the list based on the object due_at field. For example `?due_at[gt]=2021-05-10T16:51:38.075Z&due_at[lte]=2021-05-26T16:51:38.075Z`. The value is a dictionary with the following:"
            },
            "required": false,
            "description": "A time based range filter on the list based on the object due_at field. For example `?due_at[gt]=2021-05-10T16:51:38.075Z&due_at[lte]=2021-05-26T16:51:38.075Z`. The value is a dictionary with the following:"
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "created_at",
            "schema": {
              "type": "object",
              "properties": {
                "lt": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Return results where the created_at field is less than this value."
                },
                "lte": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Return results where the created_at field is less than or equal to this value."
                },
                "gt": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Return results where the created_at field is greater than this value."
                },
                "gte": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Return results where the created_at field is greater than or equal to this value."
                }
              },
              "description": "A time based range filter on the list based on the object created_at field. For example `?created_at[gt]=2021-05-10T16:51:38.075Z&created_at[lte]=2021-05-26T16:51:38.075Z`. The value is a dictionary with the following:"
            },
            "required": false,
            "description": "A time based range filter on the list based on the object created_at field. For example `?created_at[gt]=2021-05-10T16:51:38.075Z&created_at[lte]=2021-05-26T16:51:38.075Z`. The value is a dictionary with the following:"
          }
        ],
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "object": {
                      "type": "string",
                      "default": "list",
                      "enum": [
                        "list"
                      ],
                      "example": "list",
                      "description": "Always `list`."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/task"
                      },
                      "description": "Array of results"
                    },
                    "has_more": {
                      "type": "boolean",
                      "description": "Contains `true` if there is another page of results available."
                    }
                  },
                  "required": [
                    "object",
                    "data",
                    "has_more"
                  ]
                }
              }
            }
          }
        },
        "x-methodName": "list",
        "x-belongsToResource": "task"
      }
    },
    "/v1/tasks/{id}": {
      "post": {
        "summary": "Update a Task",
        "description": "Updates the specified task by setting the values of the parameters passed.\n\nAny parameters not provided will be left unchanged. For example, if you pass the assignee parameter, that assigns the task to the given user. Note that you cannot resolve system-managed tasks (those with `managed` set to `true`).",
        "tags": [
          "Task"
        ],
        "parameters": [
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "id",
            "schema": {
              "type": "string",
              "example": "task_vAJyHgJ2VYwaYczijn9M",
              "description": "Unique ID of the task."
            },
            "required": true,
            "description": "Unique ID of the task."
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "assignee": {
                    "type": "string",
                    "example": "usr_qoGndHzx8KwdYsEByt9X",
                    "nullable": true,
                    "description": "The user to which this task is assigned. If set to null, the task will be unassigned."
                  },
                  "queue": {
                    "type": "string",
                    "example": "que_6NGuKD4KdMCGXLP6uBda",
                    "nullable": true,
                    "description": "The ID of the queue to which a task is assigned. When creating a task, if no queue is specified for the task, the task will use the queue of the task definition. If no queue exists on the task definition, the task will not be placed in a queue."
                  },
                  "summary": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 255,
                    "description": "A brief summary of the task, which will be shown wherever the task is presented.",
                    "example": "Call the member to check up on medications"
                  },
                  "description": {
                    "type": "string",
                    "maxLength": 65536,
                    "nullable": true,
                    "description": "Long-form text describing the task to be performed. You can use this field to share any additional relevant context to the care team that will be acting on this task.",
                    "example": "The member had a specific question about their medication and how it interacts with their Hypertension."
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "open",
                      "in_progress",
                      "blocked",
                      "on_hold",
                      "resolved",
                      "canceled"
                    ],
                    "description": "The status of the task",
                    "example": "open"
                  },
                  "due_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time by which this task should be completed. If no due_at date is supplied, the due_at date will automatically be 24 hours after the task was created.'",
                    "example": "2021-05-13T16:33:00.000Z"
                  },
                  "related": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "minLength": 1,
                      "description": "Unique identifier for the related resource.",
                      "example": "thrd_mi5bnWscvLf7q74k6Nzj"
                    },
                    "description": "A list of object IDs, such as threads, that are related to the task."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/task"
                }
              }
            }
          }
        },
        "x-methodName": "update",
        "x-belongsToResource": "task"
      },
      "get": {
        "summary": "Retrieve a Task",
        "description": "Retrieves the details of an existing task. You need only supply the unique task identifier that was returned upon creation.",
        "tags": [
          "Task"
        ],
        "parameters": [
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "id",
            "schema": {
              "type": "string",
              "example": "task_vAJyHgJ2VYwaYczijn9M",
              "description": "Unique ID of the task."
            },
            "required": true,
            "description": "Unique ID of the task."
          }
        ],
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/task"
                }
              }
            }
          }
        },
        "x-methodName": "retrieve",
        "x-belongsToResource": "task"
      }
    },
    "/v1/task_definitions": {
      "post": {
        "summary": "Create a Task Definition",
        "description": "Creates a new task definition and registers it with Source. Task defiitions must be created in order to create tasks of that type",
        "tags": [
          "Task Definition"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "key": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Globally unique identifier of the task definition",
                    "example": "medication-request"
                  },
                  "name": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Human readable name of the task definition",
                    "example": "Medication Request"
                  },
                  "queue": {
                    "type": "string",
                    "example": "que_6NGuKD4KdMCGXLP6uBda",
                    "nullable": true,
                    "description": "The ID of the queue to which tasks should be assigned. You may provide a queue when creating tasks definitions, and may also override it when creating a specific task."
                  },
                  "license_types": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code"
                      ]
                    },
                    "nullable": true,
                    "description": "The user license(s) that are required to perform tasks of this type. Automatic task routing by Source respects licensing. If more than one license code is provided, a licensed user with any of the license codes can perform this task. Providing any value will override the entire array. Providing null or an empty array will empty out the array.",
                    "example": [
                      {
                        "code": "MD"
                      }
                    ]
                  }
                },
                "required": [
                  "key",
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/task_definition"
                }
              }
            }
          }
        },
        "x-methodName": "create",
        "x-belongsToResource": "task_definition"
      },
      "get": {
        "summary": "List all Task Definitions",
        "description": "Returns a list of task definitions within the current account.\n\nThe task definitions returned are sorted by creation date, with the most recently added task definitions appearing first.",
        "tags": [
          "Task Definition"
        ],
        "parameters": [
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "ending_before",
            "schema": {
              "type": "string",
              "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_bar, your subsequent call can include ending_before=obj_bar in order to fetch the previous page of the list."
            },
            "required": false,
            "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_bar, your subsequent call can include ending_before=obj_bar in order to fetch the previous page of the list."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "starting_after",
            "schema": {
              "type": "string",
              "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include starting_after=obj_foo in order to fetch the next page of the list."
            },
            "required": false,
            "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include starting_after=obj_foo in order to fetch the next page of the list."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "limit",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100."
            },
            "required": false,
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "sort",
            "schema": {
              "type": "string",
              "enum": [
                "created_at",
                "name",
                "-created_at",
                "-name"
              ],
              "description": "Sort field for the results. A '-' prefix indicates sorting by that field in descending order, otherwise the order will be ascending.",
              "example": "created_at"
            },
            "required": false,
            "description": "Sort field for the results. A '-' prefix indicates sorting by that field in descending order, otherwise the order will be ascending."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "name",
            "schema": {
              "type": "string",
              "description": "Limit results to task definitions with name containing the given query."
            },
            "required": false,
            "description": "Limit results to task definitions with name containing the given query."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "queue",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "que_6NGuKD4KdMCGXLP6uBda"
              },
              "description": "Filter results by queue. If multiple queues are provided, task definitions related to any of those queues will be returned."
            },
            "required": false,
            "description": "Filter results by queue. If multiple queues are provided, task definitions related to any of those queues will be returned."
          }
        ],
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "object": {
                      "type": "string",
                      "default": "list",
                      "enum": [
                        "list"
                      ],
                      "example": "list",
                      "description": "Always `list`."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/task_definition"
                      },
                      "description": "Array of results"
                    },
                    "has_more": {
                      "type": "boolean",
                      "description": "Contains `true` if there is another page of results available."
                    }
                  },
                  "required": [
                    "object",
                    "data",
                    "has_more"
                  ]
                }
              }
            }
          }
        },
        "x-methodName": "list",
        "x-belongsToResource": "task_definition"
      }
    },
    "/v1/task_definitions/{id}": {
      "post": {
        "summary": "Update a Task Definition",
        "description": "Updates the specified task definition by setting the values of the parameters passed.\n\nAny parameters not provided will be left unchanged. For example, if you pass the name parameter, that becomes the task definitions's active name that is used in the API and interface.",
        "tags": [
          "Task Definition"
        ],
        "parameters": [
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "id",
            "schema": {
              "type": "string",
              "example": "tskd_2Lc2yr7YIYxfN3RCSlBU",
              "description": "Unique ID of the task_definition."
            },
            "required": true,
            "description": "Unique ID of the task_definition."
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "key": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Globally unique identifier of the task definition",
                    "example": "medication-request"
                  },
                  "name": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Human readable name of the task definition",
                    "example": "Medication Request"
                  },
                  "queue": {
                    "type": "string",
                    "example": "que_6NGuKD4KdMCGXLP6uBda",
                    "nullable": true,
                    "description": "The ID of the queue to which tasks should be assigned. You may provide a queue when creating tasks definitions, and may also override it when creating a specific task."
                  },
                  "license_types": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code"
                      ]
                    },
                    "nullable": true,
                    "description": "The user license(s) that are required to perform tasks of this type. Automatic task routing by Source respects licensing. If more than one license code is provided, a licensed user with any of the license codes can perform this task. Providing any value will override the entire array. Providing null or an empty array will empty out the array.",
                    "example": [
                      {
                        "code": "MD"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/task_definition"
                }
              }
            }
          }
        },
        "x-methodName": "update",
        "x-belongsToResource": "task_definition"
      },
      "get": {
        "summary": "Retrieve a Task Definition",
        "description": "Retrieves the details of an existing task definition. You need only supply the unique task definition identifier that was returned upon creation.",
        "tags": [
          "Task Definition"
        ],
        "parameters": [
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "id",
            "schema": {
              "type": "string",
              "example": "tskd_2Lc2yr7YIYxfN3RCSlBU",
              "description": "Unique ID of the task_definition."
            },
            "required": true,
            "description": "Unique ID of the task_definition."
          }
        ],
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/task_definition"
                }
              }
            }
          }
        },
        "x-methodName": "retrieve",
        "x-belongsToResource": "task_definition"
      }
    },
    "/v1/communication/threads": {
      "post": {
        "summary": "Create a Thread",
        "description": "Creates a new messaging thread.",
        "tags": [
          "Thread"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "member": {
                    "type": "string",
                    "example": "mem_5QW8j1oKqQjNaPk4Hv3f",
                    "description": "The ID of the member to which this thread belongs"
                  },
                  "assignee": {
                    "type": "string",
                    "example": "usr_qoGndHzx8KwdYsEByt9X",
                    "description": "The user who is assigned to the thread and who will be notified of new messages via a task."
                  },
                  "subject": {
                    "type": "string",
                    "nullable": true,
                    "description": "The thread subject."
                  },
                  "message": {
                    "type": "object",
                    "properties": {
                      "text": {
                        "type": "string",
                        "minLength": 1,
                        "description": "Contents of the message to send."
                      },
                      "channel": {
                        "type": "string",
                        "example": "chan_wrsKSJ6PBE52n06UDyxV",
                        "nullable": true,
                        "description": "The channel over which the message will be sent. If a channel is specified, you must also specify the contact point in the `to` field. For example, to send a message via SMS, provide the ID of a channel of type 'sms' and specify the member's contact point in the `to` field. If no channel is provided, the message will be sent as an in-app message."
                      },
                      "to": {
                        "oneOf": [
                          {
                            "$ref": "#/components/schemas/contact_point"
                          }
                        ],
                        "nullable": true,
                        "description": "Contact point to which the message will be sent. For messages sent to a member or caregiver, this value is the contact point of the member or caregiver (for example, the member's phone number). The contact point provided must be supported by the channel you specify. If you provide this contact point but no channel, this contact point is ignored.",
                        "example": {
                          "system": "phone",
                          "value": "12125556789"
                        }
                      },
                      "thread_actions": {
                        "type": "object",
                        "properties": {
                          "status": {
                            "type": "string",
                            "enum": [
                              "awaiting_care_team",
                              "awaiting_member",
                              "closed"
                            ],
                            "description": "New status for the thread after sending this message. By default, Source will set the thread status to 'awaiting_care_team' if the member sends the message, and 'awaiting_member' if someone on the care team send the message.",
                            "example": "closed"
                          }
                        },
                        "description": "Actions to apply to the thread after the message has been sent. Source guarantees that these actions will only be applied if the message has been successfully sent. See the documentation for nested params for information about each available action."
                      },
                      "attachments": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "file",
                                "link"
                              ],
                              "description": "The type of attachment. Currently, the supported attachment types are `file` and `link`. If set to file, then a resource must be provided. If set to link, then a URL must be provided. Other attachment types may be added in the future.",
                              "example": "file"
                            },
                            "description": {
                              "type": "string",
                              "maxLength": 4096,
                              "nullable": true,
                              "description": "A description of the attachment to display. If a file uploaded to Source is attached, the file's name overrides a description and is displayed. Otherwise, this description is displayed.",
                              "example": null
                            },
                            "resource": {
                              "type": "string",
                              "description": "Unique ID of the resource to be attached to this message. When attaching a file, this should be set to the uploaded file's ID.",
                              "example": "file_gdIyXM9d4LKGnewOV4OM"
                            },
                            "url": {
                              "type": "string",
                              "description": "The URL where the attachment's contents can be accessed. For link attachments, the link to redirect. For file attachments, the URL returned by Source is a link to the file."
                            },
                            "metadata": {
                              "type": "object",
                              "additionalProperties": {},
                              "description": "A map of your own metadata to be included alongside this attachment. For example, you can use this metadata for bookkeeping or rendering in your member experience.\n\nMetadata may only be set when calling the API with your API keys. It cannot be set when using member tokens.",
                              "example": {
                                "patient_id": 456789,
                                "visit_id": "123"
                              }
                            }
                          },
                          "required": [
                            "type"
                          ]
                        }
                      },
                      "sender": {
                        "anyOf": [
                          {
                            "type": "string",
                            "example": "usr_qoGndHzx8KwdYsEByt9X"
                          },
                          {
                            "type": "string",
                            "example": "mem_5QW8j1oKqQjNaPk4Hv3f"
                          }
                        ],
                        "description": "When calling this endpoint with an API key, you must use this field to specify the user or member on whose behalf the message is sent.",
                        "example": "usr_NC6MQ3FyxddKoJJpfSVL"
                      },
                      "sent_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The time at which this message was sent. When calling this endpoint with an API key you can optionally specify the sent_at time, such as when backloading historical messages. By default and when called as a user or a member, the current time is used.",
                        "example": "2021-05-13T16:33:00.000Z"
                      }
                    },
                    "required": [
                      "text"
                    ],
                    "description": "The initial message to send when creating this thread."
                  }
                },
                "required": [
                  "member",
                  "message"
                ]
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/thread"
                }
              }
            }
          }
        },
        "x-methodName": "create",
        "x-belongsToResource": "thread"
      },
      "get": {
        "summary": "List all Threads",
        "description": "Returns a list of threads within the current account.\n\nThe threads returned are sorted with the most recently updated appearing first.",
        "tags": [
          "Thread"
        ],
        "parameters": [
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "ending_before",
            "schema": {
              "type": "string",
              "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_bar, your subsequent call can include ending_before=obj_bar in order to fetch the previous page of the list."
            },
            "required": false,
            "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_bar, your subsequent call can include ending_before=obj_bar in order to fetch the previous page of the list."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "starting_after",
            "schema": {
              "type": "string",
              "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include starting_after=obj_foo in order to fetch the next page of the list."
            },
            "required": false,
            "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include starting_after=obj_foo in order to fetch the next page of the list."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "limit",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100."
            },
            "required": false,
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "member",
            "schema": {
              "type": "string",
              "example": "mem_5QW8j1oKqQjNaPk4Hv3f",
              "description": "Filter threads to only those belonging to the given member."
            },
            "required": false,
            "description": "Filter threads to only those belonging to the given member."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "assignee",
            "schema": {
              "type": "string",
              "example": "usr_qoGndHzx8KwdYsEByt9X",
              "description": "Filter threads to only those assigned to the given user. The value `current` may be used to indicate the currently authenticated user."
            },
            "required": false,
            "description": "Filter threads to only those assigned to the given user. The value `current` may be used to indicate the currently authenticated user."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "status",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/thread_status"
              },
              "description": "Filter threads by status"
            },
            "required": false,
            "description": "Filter threads by status"
          }
        ],
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "object": {
                      "type": "string",
                      "default": "list",
                      "enum": [
                        "list"
                      ],
                      "example": "list",
                      "description": "Always `list`."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/thread"
                      },
                      "description": "Array of results"
                    },
                    "has_more": {
                      "type": "boolean",
                      "description": "Contains `true` if there is another page of results available."
                    }
                  },
                  "required": [
                    "object",
                    "data",
                    "has_more"
                  ]
                }
              }
            }
          }
        },
        "x-methodName": "list",
        "x-belongsToResource": "thread"
      }
    },
    "/v1/communication/threads/{id}": {
      "get": {
        "summary": "Retrieve a Thread",
        "description": "Retrieves the details of an existing thread. You need only supply the unique thread identifier that was returned upon creation.",
        "tags": [
          "Thread"
        ],
        "parameters": [
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "id",
            "schema": {
              "type": "string",
              "example": "thrd_mi5bnWscvLf7q74k6Nzj",
              "description": "Unique ID of the thread."
            },
            "required": true,
            "description": "Unique ID of the thread."
          }
        ],
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/thread"
                }
              }
            }
          }
        },
        "x-methodName": "retrieve",
        "x-belongsToResource": "thread"
      },
      "post": {
        "summary": "Update a Thread",
        "description": "Updates the specified thread by setting the values of the parameters passed. Any parameters not provided will be left unchanged.\n\nYou can change the thread’s status or subject or reassign the thread to a different user.",
        "tags": [
          "Thread"
        ],
        "parameters": [
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "id",
            "schema": {
              "type": "string",
              "example": "thrd_mi5bnWscvLf7q74k6Nzj",
              "description": "Unique ID of the thread."
            },
            "required": true,
            "description": "Unique ID of the thread."
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "assignee": {
                    "type": "string",
                    "example": "usr_NC6MQ3FyxddKoJJpfSVL",
                    "nullable": true,
                    "description": "The user who is assigned to the thread and who will be notified of new messages via a task."
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "awaiting_care_team",
                      "awaiting_member",
                      "closed"
                    ],
                    "description": "New status for the thread.",
                    "example": "awaiting_care_team"
                  },
                  "subject": {
                    "type": "string",
                    "nullable": true,
                    "description": "New subject for the thread.",
                    "example": "Lower back pain."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/thread"
                }
              }
            }
          }
        },
        "x-methodName": "update",
        "x-belongsToResource": "thread"
      }
    },
    "/v1/communication/threads/{id}/mark": {
      "post": {
        "summary": "Mark a Thread",
        "description": "Marks a thread as read by the member. You can provide a timestamp through which the member has read. All message appearing before this timestamp will be shown as read by the member in the Source Elements SDK. If you're not using Elements, you can use this timestamp to track where the member has read in your own interface.\n\nProviding null marks the entire thread as unread.",
        "tags": [
          "Thread"
        ],
        "parameters": [
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "id",
            "schema": {
              "type": "string",
              "example": "thrd_mi5bnWscvLf7q74k6Nzj",
              "description": "Unique ID of the thread."
            },
            "required": true,
            "description": "Unique ID of the thread."
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "member_last_read": {
                    "type": "string",
                    "format": "date-time",
                    "nullable": true,
                    "description": "Timestamp indicating the point through which the member has read. All messages with a `sent_at` after this point are considered unread. If null, the member has not seen any messages on this thread.",
                    "example": "2021-05-13T16:33:00.000Z"
                  }
                },
                "required": [
                  "member_last_read"
                ]
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/thread"
                }
              }
            }
          }
        },
        "x-methodName": "mark",
        "x-belongsToResource": "thread"
      }
    },
    "/v1/users": {
      "post": {
        "summary": "Create a User",
        "description": "Creates a new user on the Source platform.\n\nThe user will be sent an email inviting them to finish creating their account. User accounts will not be active until they have followed the link in the invitation email and set a password.\n\nAdministrators and owners can create users.\n\nAPI keys can create users but cannot create with role 'developer', 'administrator', or 'owner' or assign users to groups.\n\nOther user roles cannot create users.",
        "tags": [
          "User"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "nullable": true,
                    "description": "Title of this user.",
                    "example": "Dr."
                  },
                  "first_name": {
                    "type": "string",
                    "minLength": 1,
                    "description": "First name of the user.",
                    "example": "John"
                  },
                  "last_name": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Last name of the user.",
                    "example": "Adame"
                  },
                  "suffix": {
                    "type": "string",
                    "nullable": true,
                    "description": "Suffix for this user.",
                    "example": "MD"
                  },
                  "display_title": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 50,
                    "nullable": true,
                    "description": "Display text that describes the user's title. The display title will appear in the Source application and the member-facing Elements SDK but will not affect any Source configuration. For example, a physician user's title may be set to 'Physician.'",
                    "example": "Physician"
                  },
                  "email": {
                    "type": "string",
                    "description": "Email address for the user. Only admins and owners may update another user's email address, this cannot be updated using API keys.",
                    "example": "you@yourcompany.com"
                  },
                  "password": {
                    "type": "string",
                    "minLength": 8,
                    "maxLength": 255,
                    "description": "Password for the user. This field can only be set when creating the root user for an account.",
                    "example": "ªªªªªªªª"
                  },
                  "role": {
                    "type": "string",
                    "enum": [
                      "owner",
                      "administrator",
                      "developer",
                      "clinician",
                      "support"
                    ],
                    "description": "Role the user is granted in your account. Only admins and owners may manage another user's role, this cannot be updated using API keys.",
                    "example": "developer"
                  },
                  "time_zone": {
                    "type": "string",
                    "description": "The time zone identifier for this user. User time zones are used when checking their availability schedules, and may also be used when formatting times outside of the context of a browser (such as an email).",
                    "example": "America/New_York"
                  },
                  "licensed": {
                    "type": "boolean",
                    "description": "Whether or not the user is a licensed clinician. By default, this is set to false. If set to true, note that the user should have licenses configured to be able to perform workflows that require licensure. For example, licensure may be required to receive certain tasks and appointments.",
                    "example": false
                  },
                  "groups": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "example": "grp_IlGhgsstvgsagl6lV89Q",
                      "description": "The group that is associated with the user."
                    },
                    "description": "The groups for this user, which must reference groups that exists in your account. A user can be a member of  up to 20 groups."
                  },
                  "profile_image": {
                    "type": "string",
                    "nullable": true,
                    "description": "The file for the user's profile image. Must be of type `user_profile_photo`"
                  }
                },
                "required": [
                  "first_name",
                  "last_name",
                  "email",
                  "role"
                ]
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              }
            }
          }
        },
        "x-methodName": "create",
        "x-belongsToResource": "user"
      },
      "get": {
        "summary": "List all Users",
        "description": "Returns a list of users within the current account.\n\nThe users returned are sorted by creation date, with the most recently added users appearing first.",
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "ending_before",
            "schema": {
              "type": "string",
              "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_bar, your subsequent call can include ending_before=obj_bar in order to fetch the previous page of the list."
            },
            "required": false,
            "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_bar, your subsequent call can include ending_before=obj_bar in order to fetch the previous page of the list."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "starting_after",
            "schema": {
              "type": "string",
              "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include starting_after=obj_foo in order to fetch the next page of the list."
            },
            "required": false,
            "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include starting_after=obj_foo in order to fetch the next page of the list."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "limit",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100."
            },
            "required": false,
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "sort",
            "schema": {
              "type": "string",
              "enum": [
                "last_name",
                "created_at",
                "-last_name",
                "-created_at"
              ],
              "description": "Sort field for the results. A '-' prefix indicates sorting by that field in descending order, otherwise the order will be ascending.",
              "example": "last_name"
            },
            "required": false,
            "description": "Sort field for the results. A '-' prefix indicates sorting by that field in descending order, otherwise the order will be ascending."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "email",
            "schema": {
              "type": "string",
              "description": "Limit results to users with email matching the given query."
            },
            "required": false,
            "description": "Limit results to users with email matching the given query."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "name",
            "schema": {
              "type": "string",
              "description": "Limit results to users with name matching the given query."
            },
            "required": false,
            "description": "Limit results to users with name matching the given query."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "role",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Filter results by role. If multiple roles are provided, users matching any of those roles will be returned."
            },
            "required": false,
            "description": "Filter results by role. If multiple roles are provided, users matching any of those roles will be returned."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "groups",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "grp_IlGhgsstvgsagl6lV89Q",
                "description": "The group that is associated with the user."
              },
              "description": "Filter results by group. If multiple groups are provided, users matching any of those groups will be returned."
            },
            "required": false,
            "description": "Filter results by group. If multiple groups are provided, users matching any of those groups will be returned."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "include_deactivated",
            "schema": {
              "type": "boolean",
              "description": "If set to 'true', this will also include deactivated users. If unset or `false`, deactivated users are not returned in the list."
            },
            "required": false,
            "description": "If set to 'true', this will also include deactivated users. If unset or `false`, deactivated users are not returned in the list."
          }
        ],
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "object": {
                      "type": "string",
                      "default": "list",
                      "enum": [
                        "list"
                      ],
                      "example": "list",
                      "description": "Always `list`."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/user"
                      },
                      "description": "Array of results"
                    },
                    "has_more": {
                      "type": "boolean",
                      "description": "Contains `true` if there is another page of results available."
                    }
                  },
                  "required": [
                    "object",
                    "data",
                    "has_more"
                  ]
                }
              }
            }
          }
        },
        "x-methodName": "list",
        "x-belongsToResource": "user"
      }
    },
    "/v1/users/{id}": {
      "get": {
        "summary": "Retrieve a User",
        "description": "Retrieve a user by their unique identifier.",
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "id",
            "schema": {
              "type": "string",
              "description": "Unique ID of the user.",
              "example": "usr_qoGndHzx8KwdYsEByt9X"
            },
            "required": true,
            "description": "Unique ID of the user."
          }
        ],
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              }
            }
          }
        },
        "x-methodName": "retrieve",
        "x-belongsToResource": "user"
      },
      "post": {
        "summary": "Update a User",
        "description": "Updates the specified user by setting the values of the parameters passed. Any parameters not provided will be left unchanged. For example, if you only provide the first_name parameter, that only updates the user's first_name.\n\nAll users can update their own name.\n\nAPI keys can update the name of users.\n\nAdministrators and owners may update the name, email and role of other users.\n\nAdministrators and owners may assign users to groups.\n\nAdministrators and owners are not permitted to change their own role.",
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "id",
            "schema": {
              "type": "string",
              "description": "Unique ID of the user.",
              "example": "usr_qoGndHzx8KwdYsEByt9X"
            },
            "required": true,
            "description": "Unique ID of the user."
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "nullable": true,
                    "description": "Title of this user.",
                    "example": "Dr."
                  },
                  "first_name": {
                    "type": "string",
                    "minLength": 1,
                    "description": "First name of the user.",
                    "example": "John"
                  },
                  "last_name": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Last name of the user.",
                    "example": "Adame"
                  },
                  "suffix": {
                    "type": "string",
                    "nullable": true,
                    "description": "Suffix for this user.",
                    "example": "MD"
                  },
                  "display_title": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 50,
                    "nullable": true,
                    "description": "Display text that describes the user's title. The display title will appear in the Source application and the member-facing Elements SDK but will not affect any Source configuration. For example, a physician user's title may be set to 'Physician.'",
                    "example": "Physician"
                  },
                  "email": {
                    "type": "string",
                    "description": "Email address for the user. Only admins and owners may update another user's email address, this cannot be updated using API keys.",
                    "example": "you@yourcompany.com"
                  },
                  "role": {
                    "type": "string",
                    "enum": [
                      "owner",
                      "administrator",
                      "developer",
                      "clinician",
                      "support"
                    ],
                    "description": "Role the user is granted in your account. Only admins and owners may manage another user's role, this cannot be updated using API keys.",
                    "example": "developer"
                  },
                  "time_zone": {
                    "type": "string",
                    "description": "The time zone identifier for this user. User time zones are used when checking their availability schedules, and may also be used when formatting times outside of the context of a browser (such as an email).",
                    "example": "America/New_York"
                  },
                  "licensed": {
                    "type": "boolean",
                    "description": "Whether or not the user is a licensed clinician. By default, this is set to false. If set to true, note that the user should have licenses configured to be able to perform workflows that require licensure. For example, licensure may be required to receive certain tasks and appointments.",
                    "example": false
                  },
                  "groups": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "example": "grp_IlGhgsstvgsagl6lV89Q",
                      "description": "The group that is associated with the user."
                    },
                    "description": "The groups for this user, which must reference groups that exists in your account. A user can be a member of  up to 20 groups."
                  },
                  "profile_image": {
                    "type": "string",
                    "nullable": true,
                    "description": "The file for the user's profile image. Must be of type `user_profile_photo`"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              }
            }
          }
        },
        "x-methodName": "update",
        "x-belongsToResource": "user"
      }
    },
    "/v1/webhooks": {
      "post": {
        "summary": "Create a Webhook",
        "description": "A webhook endpoint must have a URL and a list of events.",
        "tags": [
          "Webhook"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "url": {
                    "type": "string",
                    "description": "URL to which matching events will be delivered",
                    "example": "https://example.com/catalyst-webhook"
                  },
                  "events": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/webhook_events"
                    },
                    "description": "Events that will be delivered to this webhook",
                    "example": [
                      "account.updated"
                    ]
                  },
                  "is_enabled": {
                    "type": "boolean",
                    "description": "Whether or not this webhook should be enabled to receive events",
                    "example": true
                  }
                },
                "required": [
                  "url",
                  "events"
                ]
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/webhook"
                }
              }
            }
          }
        },
        "x-methodName": "create",
        "x-belongsToResource": "webhook"
      },
      "get": {
        "summary": "List all Webhooks",
        "description": "Lists all webhooks for the current account. The webhooks returned are sorted by creation date, with the most recently created webhooks appearing first.",
        "tags": [
          "Webhook"
        ],
        "parameters": [
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "ending_before",
            "schema": {
              "type": "string",
              "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_bar, your subsequent call can include ending_before=obj_bar in order to fetch the previous page of the list."
            },
            "required": false,
            "description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_bar, your subsequent call can include ending_before=obj_bar in order to fetch the previous page of the list."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "starting_after",
            "schema": {
              "type": "string",
              "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include starting_after=obj_foo in order to fetch the next page of the list."
            },
            "required": false,
            "description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include starting_after=obj_foo in order to fetch the next page of the list."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "limit",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100."
            },
            "required": false,
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100."
          },
          {
            "in": "query",
            "style": "form",
            "explode": true,
            "name": "event",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/webhook_events"
              },
              "description": "Limit results to just those webhooks that are configured for the given event."
            },
            "required": false,
            "description": "Limit results to just those webhooks that are configured for the given event."
          }
        ],
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "object": {
                      "type": "string",
                      "default": "list",
                      "enum": [
                        "list"
                      ],
                      "example": "list",
                      "description": "Always `list`."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/webhook"
                      },
                      "description": "Array of results"
                    },
                    "has_more": {
                      "type": "boolean",
                      "description": "Contains `true` if there is another page of results available."
                    }
                  },
                  "required": [
                    "object",
                    "data",
                    "has_more"
                  ]
                }
              }
            }
          }
        },
        "x-methodName": "list",
        "x-belongsToResource": "webhook"
      }
    },
    "/v1/webhooks/{id}": {
      "post": {
        "summary": "Update a Webhook",
        "description": "Updates the webhook endpoint. You may edit the URL and list of events for the webhook.",
        "tags": [
          "Webhook"
        ],
        "parameters": [
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "id",
            "schema": {
              "type": "string",
              "example": "wbhk_nC1qvvQPSkHVYvRvefGF",
              "description": "Unique ID of the webhook."
            },
            "required": true,
            "description": "Unique ID of the webhook."
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "url": {
                    "type": "string",
                    "description": "URL to which matching events will be delivered",
                    "example": "https://example.com/catalyst-webhook"
                  },
                  "events": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/webhook_events"
                    },
                    "description": "Events that will be delivered to this webhook",
                    "example": [
                      "account.updated"
                    ]
                  },
                  "is_enabled": {
                    "type": "boolean",
                    "description": "Whether or not this webhook should be enabled to receive events",
                    "example": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/webhook"
                }
              }
            }
          }
        },
        "x-methodName": "update",
        "x-belongsToResource": "webhook"
      },
      "get": {
        "summary": "Retrieve a Webhook",
        "description": "Retrieves the details of an existing webhook. You need only supply the unique webhook identifier that was returned upon creation.",
        "tags": [
          "Webhook"
        ],
        "parameters": [
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "id",
            "schema": {
              "type": "string",
              "example": "wbhk_nC1qvvQPSkHVYvRvefGF",
              "description": "Unique ID of the webhook."
            },
            "required": true,
            "description": "Unique ID of the webhook."
          }
        ],
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/webhook"
                }
              }
            }
          }
        },
        "x-methodName": "retrieve",
        "x-belongsToResource": "webhook"
      },
      "delete": {
        "summary": "Delete a Webhook",
        "description": "Removes a webhook from your account, which will stop sending events to your endpoint",
        "tags": [
          "Webhook"
        ],
        "parameters": [
          {
            "in": "path",
            "style": "simple",
            "explode": true,
            "name": "id",
            "schema": {
              "type": "string",
              "example": "wbhk_nC1qvvQPSkHVYvRvefGF",
              "description": "Unique ID of the webhook."
            },
            "required": true,
            "description": "Unique ID of the webhook."
          }
        ],
        "responses": {
          "default": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/webhook"
                }
              }
            }
          }
        },
        "x-methodName": "delete",
        "x-belongsToResource": "webhook"
      }
    }
  },
  "components": {
    "securitySchemes": {
      "basic": {
        "type": "http",
        "scheme": "basic"
      },
      "bearer": {
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "type": "http"
      }
    },
    "schemas": {
      "account": {
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "default": "account",
            "enum": [
              "account"
            ],
            "example": "account",
            "description": "Always `account`."
          },
          "id": {
            "type": "string",
            "description": "Unique ID of the account.",
            "example": "act_0EipsUv2yRFxynHshisN"
          },
          "name": {
            "type": "string",
            "description": "Name for the account.",
            "example": "Source Health"
          },
          "subdomain": {
            "type": "string",
            "description": "Subdomain for the account.",
            "example": "sourcehealth"
          },
          "logo": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/file"
              }
            ],
            "x-expandable": {
              "$ref": "#/components/schemas/file"
            },
            "description": "Pointer to the file that should be used as the logo for this account",
            "example": "file_0A9zrLzCO7KPcnIbs40e",
            "nullable": true
          },
          "time_zone": {
            "type": "string",
            "description": "The time zone associated with this account. This value is rarely used in Source, however it serves an important purpose for appointment booking. In order to ensure each day has consistent appointment slots available, we use this time zone to determine when midnight is for your organization. Slots will reset when crossing midnight into the next day. You can read more about this in the documentation for the [Slot resource](../slot/).",
            "example": "America/New_York"
          },
          "theme": {
            "type": "object",
            "properties": {
              "colors": {
                "type": "object",
                "properties": {
                  "primary": {
                    "type": "string",
                    "nullable": true,
                    "description": "Color hex for the primary interface elements such as buttons."
                  },
                  "primary_text": {
                    "type": "string",
                    "nullable": true,
                    "description": "Color hex for text that appears on primary interface elements."
                  },
                  "accent": {
                    "type": "string",
                    "nullable": true,
                    "description": "Color hex for the accent elements like checkboxes, radio buttons, links, and similar second-level indications."
                  },
                  "accent_text": {
                    "type": "string",
                    "nullable": true,
                    "description": "Color hex for text that appears on accent interface elements."
                  },
                  "surface": {
                    "type": "string",
                    "nullable": true,
                    "description": "Color hex for the color of the primary page background."
                  },
                  "surface_text": {
                    "type": "string",
                    "nullable": true,
                    "description": "Color hex for the text that appears directly on the primary surface."
                  },
                  "component": {
                    "type": "string",
                    "nullable": true,
                    "description": "Color hex for the background color of elements sitting on the surface, such as a card."
                  },
                  "component_text": {
                    "type": "string",
                    "nullable": true,
                    "description": "Color hex for the text that appears within a component element."
                  },
                  "border": {
                    "type": "string",
                    "nullable": true,
                    "description": "Color hex for the border color on interactive elements."
                  }
                },
                "required": [
                  "primary",
                  "primary_text",
                  "accent",
                  "accent_text",
                  "surface",
                  "surface_text",
                  "component",
                  "component_text",
                  "border"
                ],
                "description": "Brand colors used throughout the application."
              },
              "shapes": {
                "type": "object",
                "properties": {
                  "border_radius": {
                    "type": "string",
                    "nullable": true,
                    "description": "Border radius, defined in pixels."
                  },
                  "shadows": {
                    "type": "boolean",
                    "description": "Whether or not to enable default shadows on elements."
                  }
                },
                "required": [
                  "border_radius",
                  "shadows"
                ],
                "description": "Brand settings that affect the shape of elements."
              }
            },
            "required": [
              "colors",
              "shapes"
            ],
            "description": "Theme settings to apply when using Source-hosted elements."
          },
          "test_secret_key": {
            "type": "string",
            "description": "Test mode API secret key for the account, only returned during account creation.",
            "example": "sk_test_syM5mOFSRoDlzjdbNYdjfD1i3FkIzRg4gFBr9pDpGkQ8KIcdUYwnGmh9CMBw"
          },
          "live_secret_key": {
            "type": "string",
            "description": "Live mode API secret key for the account, only returned during account creation.",
            "example": "sk_live_aCCdwoJvBcpzvvX0RJtE14SRjKGJzQ5I0KFHAVHJxoxAPJSHnHergovFcY1x"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the account was created.",
            "example": "2021-05-13T16:33:00.000Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the account was last updated.",
            "example": "2021-05-13T16:33:00.000Z"
          }
        },
        "required": [
          "object",
          "id",
          "name",
          "subdomain",
          "logo",
          "time_zone",
          "theme",
          "created_at",
          "updated_at"
        ],
        "title": "Account",
        "description": "This is an object representing a Source account. You can retrieve it to see account-level properties like business name, subdomain, and live mode status.",
        "x-resourceId": "account",
        "x-package": null
      },
      "api_key": {
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "default": "api_key",
            "enum": [
              "api_key"
            ],
            "example": "api_key",
            "description": "Always `api_key`."
          },
          "id": {
            "type": "string",
            "description": "Unique ID of the key.",
            "example": "key_0EipsUv2yRFxynHshisN"
          },
          "name": {
            "type": "string",
            "nullable": true,
            "description": "Display name for this API Key.",
            "example": "Primary Secret Key"
          },
          "secret": {
            "type": "string",
            "description": "The API key secret, which is only returned when setting `reveal=true` on the request.",
            "example": "sk_live_••••••••83723"
          },
          "primary": {
            "type": "boolean",
            "description": "Identifies that this is the primary key for the account",
            "example": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the key was created.",
            "example": "2021-05-13T16:33:00.000Z"
          }
        },
        "required": [
          "object",
          "id",
          "name",
          "secret",
          "primary",
          "created_at"
        ],
        "title": "API Key",
        "x-resourceId": "api_key",
        "x-package": null
      },
      "appointment": {
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "default": "appointment",
            "enum": [
              "appointment"
            ],
            "example": "appointment",
            "description": "Always `appointment`."
          },
          "id": {
            "type": "string",
            "example": "appt_mTvufYJBBgYmbEAEZ6rE",
            "description": "Unique ID for the appointment."
          },
          "appointment_type": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/appointment_type"
              }
            ],
            "x-expandable": {
              "$ref": "#/components/schemas/appointment_type"
            },
            "description": "The identifier of the type of appointment that was booked.",
            "example": "aptp_meYUvkuaI2akjnb5Kwt7",
            "nullable": true
          },
          "location": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/location"
              }
            ],
            "x-expandable": {
              "$ref": "#/components/schemas/location"
            },
            "description": "The identifier of the physical location where the appointment is booked.",
            "example": "loc_EtTXhFHUtCXO1JWBd8TN",
            "nullable": true
          },
          "member": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/member"
              }
            ],
            "x-expandable": {
              "$ref": "#/components/schemas/member"
            },
            "description": "The member to which this appointment belongs. Setting a member on this property will allow the member to access this appointment via the API. Members can only view appointments which are directly associated with them. You do not need to associate an appointment with a member. This can be useful to represent, for example, blocked time during which a user is not available.",
            "example": "mem_JAfPRRc59eh2YQ1aeL3D",
            "nullable": true
          },
          "subject": {
            "type": "string",
            "maxLength": 255,
            "nullable": true,
            "description": "Subject for this appointment. These will be shared with all participants in advance. The subject should generally describe the reason for the visit. Member tokens are allowed to set subjects on appointments to support a self booking flow.",
            "example": "Pre-Op Check-In"
          },
          "instructions": {
            "type": "string",
            "maxLength": 1024,
            "nullable": true,
            "description": "Instructions to the member describing how to prepare for this appointment. Members cannot set or update instructions through the API, but they are able to access them.",
            "example": "Please fast for 12 hours prior to your appointment"
          },
          "time_zone": {
            "type": "string",
            "description": "The IANA time zone for the appointment booking. Appointments are represented in UTC time, however the zone will be stored and can be used when presenting the appointemnt in the future.",
            "example": "America/New_York"
          },
          "status": {
            "type": "string",
            "enum": [
              "booked",
              "confirmed",
              "no_show",
              "completed",
              "canceled"
            ],
            "description": "Current status of this appointment. By default, newly created appointments will be in the booked status. When an appointment is in a terminal status, such as `canceled`, it can no longer be modified.",
            "example": "booked"
          },
          "start_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the appointment starts, always reported in UTC.",
            "example": "2021-05-13T16:33:00.000Z"
          },
          "end_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the appointment ends, always reported in UTC.",
            "example": "2021-05-13T16:33:00.000Z"
          },
          "duration": {
            "type": "number",
            "description": "The computed duration of the appointment, measured as the number of minutes between `start_at` and `end_at`. This is calculated automatically in the API and returned back to you.",
            "example": 30
          },
          "participants": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "default": "user",
                  "enum": [
                    "user"
                  ],
                  "example": "user",
                  "description": "The type of participants. Participants in an appointment can be either members or users."
                },
                "participant": {
                  "oneOf": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/components/schemas/user"
                    }
                  ],
                  "x-expandable": {
                    "$ref": "#/components/schemas/user"
                  },
                  "description": "Expandable reference to the participant resource. Currently, only users can be added as participants.",
                  "example": "usr_qoGndHzx8KwdYsEByt9X"
                },
                "status": {
                  "type": "string",
                  "enum": [
                    "tentative",
                    "accepted",
                    "declined"
                  ],
                  "description": "Status of the participant. Currently, all participants are assumed to have accepted the appointment once booked.",
                  "example": "accepted"
                }
              },
              "required": [
                "type",
                "participant",
                "status"
              ]
            },
            "description": "The participants in the appointment. At this time, only users may be participants in an appointment. However, we are evaluating future expansions to the API to allow other types of bookable resources."
          },
          "video_call": {
            "type": "object",
            "properties": {
              "provider": {
                "type": "string",
                "enum": [
                  "custom",
                  "source"
                ],
                "description": "The video call provider. Source automatically generates video call links for every appointment type that is configured to do so. Alternatively, you can use the value `custom` to provide your own video call link.",
                "example": "source"
              },
              "token": {
                "type": "string",
                "nullable": true,
                "description": "A unique secure token that identifies the video call and allows a member or a user to join the call. This token is only used for 'source' video calls, and is also present in the join URL.",
                "example": "adu9AhNoo3eiZu5veizei3fu"
              },
              "join_url": {
                "type": "string",
                "description": "The URL to access the video call. Anyone with this link will be able to request to join this video call, so you should ensure it is kept safe.",
                "example": "https://mycompany.connect.sourcehealth.com/video-calls/adu9AhNoo3eiZu5veizei3fu"
              },
              "passcode": {
                "type": "string",
                "nullable": true,
                "description": "Passcode used when joining the call. This value is not used for Source-generated video calls, but it may be used if using a custom video provider that requires a passcode.",
                "example": null
              }
            },
            "required": [
              "provider",
              "token",
              "join_url",
              "passcode"
            ],
            "nullable": true,
            "description": "Information about the video call generated or provided for this appointment. By default, Source will generate a visit URL for all created appointments when the appointment type has `video_enabled = true`."
          },
          "externally_managed": {
            "type": "boolean",
            "description": "Indicates that this appointment was imported from an external integrated calendar, such as Google Calendar. External appointments are managed by Source directly and cannot be updated via API.",
            "example": false
          },
          "recurrence": {
            "type": "object",
            "properties": {
              "frequency": {
                "type": "string",
                "enum": [
                  "weekly"
                ],
                "description": "How often the appointments should recur. Source only supports 'weekly' at this time (including \"every N weeks\", using 'interval').",
                "example": "weekly"
              },
              "interval": {
                "type": "number",
                "minimum": 1,
                "maximum": 20,
                "description": "How many of the `frequency` intervals between each appointment, i.e. 'every N weeks'.",
                "example": 1
              },
              "count": {
                "type": "number",
                "minimum": 1,
                "maximum": 52,
                "description": "How many total appointments should be in the series.\n\nOne and only one of `count` or `until` must be set."
              },
              "until": {
                "type": "string",
                "format": "date",
                "description": "The date at which the recurring series will end. This date is inclusive, so if an appointment instance falls on this date, that appointment will be booked. One and only one of `count` or `until` must be set."
              },
              "days_of_week": {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "monday",
                    "tuesday",
                    "wednesday",
                    "thursday",
                    "friday",
                    "saturday",
                    "sunday"
                  ]
                },
                "description": "The days of the week on which appointments should occur. By providing multiple days, you can indicate multiple recurring appointments per week."
              }
            },
            "required": [
              "frequency",
              "interval",
              "days_of_week"
            ],
            "nullable": true,
            "description": "Defines the configuration of a recurring appointment. Appointments created as recurring series will have `series_parent` = true, and Source will automatically create an appointment for each available time in the series.\n\nUpdating the series 'parent' appointment will update any unmodified future appointments in the series, except for the start time, end times or duration. Updating an individual appointment within the series will prevent the modified fields from being updated when the series appointment is updated.  by default, create a series of recurring appointments. Expressed as a subset of RRULE fields (see [rrule.js docs](https://github.com/jakubroztocil/rrule#api) for more context, but note that we only support a limited subset of the full RRULE spec).\n\nNote that creating an appointment using an appointment type that defines default 'recurrence' configuration will not automatically result in a recurring series being created. You must define the full recurrence configuration on the appointment itself.\n\nNote: the recurring appointments feature is currently in preview. Please contact Source for more details."
          },
          "series_parent": {
            "type": "boolean",
            "description": "'Parent' appointments do not represent an actual booking at that moment in time, but are used for configuring a recurring series of appointments.\n\nNote: the recurring appointments feature is currently in preview. Please contact Source for more details."
          },
          "series": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/appointment"
              }
            ],
            "x-expandable": {
              "$ref": "#/components/schemas/appointment"
            },
            "description": "Indicates that the appointment is part of a recurring series. The configuration of the series is stored as a virtual 'parent' appointment, and this field is an expandable reference to that parent appointment.\n\nUpdating the parent appointment will update any unmodified future appointments in the series. Updating an individual appointment within the series will prevent the modified fields from being updated when the series appointment is updated.\n\nTo cancel a series, transition the series appointment into 'canceled' status, which will cancel any future appointments in the series.\n\nNote: the recurring appointments feature is currently in preview. Please contact Source for more details.",
            "example": "appt_mTvufYJBBgYmbEAEZ6rE",
            "nullable": true
          },
          "encounter": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/encounter"
              }
            ],
            "x-expandable": {
              "$ref": "#/components/schemas/encounter"
            },
            "description": "The identifier of the encounter to which this appointment relates.  This field is returned when the appointment is related to an undeleted encounter.",
            "example": "enc_05j8GyFykJwGI5pEyUmY",
            "nullable": true
          },
          "form_responses": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/components/schemas/form_response"
                }
              ],
              "x-expandable": {
                "$ref": "#/components/schemas/form_response"
              },
              "description": "Expandable reference to a form response",
              "example": "fr_mk29zZR6Qr5u5Q0BRHwu"
            },
            "description": "A list of form responses associated with this appointment. When an appointment is booked, form responses can be created automatically based on appointment type configuration. Members can then access and complete form responses, for example, via appointment notifications.",
            "example": [
              "fr_mk29zZR6Qr5u5Q0BRHwu"
            ]
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the appointment type was created.",
            "example": "2021-05-13T16:33:00.000Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the appointment type was last updated.",
            "example": "2021-05-13T16:33:00.000Z"
          }
        },
        "required": [
          "object",
          "id",
          "appointment_type",
          "location",
          "member",
          "subject",
          "instructions",
          "time_zone",
          "status",
          "start_at",
          "end_at",
          "duration",
          "participants",
          "video_call",
          "externally_managed",
          "recurrence",
          "series_parent",
          "series",
          "encounter",
          "form_responses",
          "created_at",
          "updated_at"
        ],
        "title": "Appointment",
        "description": "An appointment represents a scheduled block of time for one or more users, optionally with an associated member.\n\nDepending on your needs, you can create appointment resources in Source to reflect events that have been scheduled elsewhere, or use our availability APIs to power patient self-scheduling directly. Creating and representing your appointments in Source allows your team to have a single pane of glass for their work day.\n\nWhen creating and managing appointments via the API, members have a different level of access than users or API keys. Members are only able to book appointments during a time when users are available, and are required to follow the restrictions of the appointment type. Users and API keys can bypass these restrictions by setting skip_constraints to true.",
        "x-resourceId": "appointment",
        "x-package": "scheduling"
      },
      "appointment_type": {
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "default": "appointment_type",
            "enum": [
              "appointment_type"
            ],
            "example": "appointment_type",
            "description": "Always `appointment_type`."
          },
          "id": {
            "type": "string",
            "example": "aptp_meYUvkuaI2akjnb5Kwt7",
            "description": "Unique ID for the appointment type."
          },
          "key": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255,
            "description": "Unique key for this appointment type. You can use this when creating appointments via the API. In order to avoid potential confusion when distinguishing between appointment type IDs and appointment type keys, keys must not start with `aptp_`.",
            "example": "intake_visit"
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255,
            "description": "Name of this appointment type. This will be visible to members when booking appointments, and to users when using the Source UI.",
            "example": "Intake Visit"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "A few sentence description of this appointment type. This description will be shown to members when attempting to book an appointment of this type. While not required, it can be helpful to share what the member might expect to happen during this appointment or any resources thay should bring."
          },
          "default_instructions": {
            "type": "string",
            "nullable": true,
            "description": "The default instructions that should be provided to members when booking this type of appointment. When creating appointments via the API, these instructions will automatically be applied to the appointment unless overriden. Members are not able to change the instructions on an appointment when creating one, and will also receive this set of instructions by default.",
            "example": "Please fast for 12 hours before your visit."
          },
          "duration": {
            "type": "number",
            "description": "The default duration to apply to appointments of this type. Measured in minutes.",
            "example": 30
          },
          "slot_interval": {
            "type": "number",
            "description": "The interval between two bookable slots for appointments of this type. Measured in minutes.",
            "example": 15
          },
          "color": {
            "type": "string",
            "enum": [
              "gray",
              "blue",
              "teal",
              "yellow",
              "green",
              "red",
              "orange",
              "purple"
            ],
            "description": "The color used when showing appointments of this type on the calendar. This is primarily used in the Source UI, but you're able to use this in your own system as well.",
            "example": "blue"
          },
          "bookable": {
            "type": "boolean",
            "description": "Whether or not this appointment can be booked directly by a member. If set to false, this appointment can only be scheduled by a user. Note that appointment types with bookable set to false are still visible to members, as they may still have an appointment of that type scheduled. As a result, this does not function as a security or privacy control."
          },
          "buffer_before": {
            "type": "number",
            "description": "Provides an additional buffer of time before an appointment to prepare. Buffers do not change the appointment duration, but rather make the participants appear \"busy\" for a certain amount of time before the appointment begins. Measured in minutes.",
            "example": 0
          },
          "buffer_after": {
            "type": "number",
            "description": "Provides an additional buffer of time after an appointment to wrap up. Buffers do not change the appointment duration, but rather make the participants appear \"busy\" for a certain amount of time after the appointment ends. Measured in minutes.",
            "example": 5
          },
          "planning_horizon": {
            "type": "number",
            "description": "Controls how far in the future appointments can be booked. By default, appointment types have a 60 day planning horizon. You can extend this if you'd like members to be able to book appointments farther in the future. Omitting this field will set the planning horizon to the maximum supported value of 365 days.",
            "example": 60
          },
          "minimum_notice": {
            "type": "number",
            "description": "Controls the minimum amount of advance notice in order to book appointments of this type. For example, if this parameter is set to 60, members will only be able to book appointments starting at least 60 minutes from now. This option is only considered when members are booking appointments directly. Users can book appointments at any time, including appointments in the past. Measured in minutes.",
            "example": 60
          },
          "video_enabled": {
            "type": "boolean",
            "description": "Whether or not to create a video call for appointments of this type. Defaults to false.",
            "example": false
          },
          "routing_strategy": {
            "type": "string",
            "enum": [
              "care_team_required",
              "care_team_preferred",
              "care_team_hybrid",
              "round_robin"
            ],
            "description": "Defines how an incoming slot availability query for the appointment type should be routed to possible users. Because of the complexity in routing, it's best explained by example. Assume you have created an appointment type that can be fulfilled by users in the Physicians group. The behavior of each routing strategy is as follows:\n\n- care_team_required - Appointment slots will only be shown for Physicians who are on the member's care team. If there are   no Physicians on the member's care team, the request will fail.\n\n- care_team_preferred - Appointment slots will be shown for any Physicians on the member's care team.   If the Physicians on the care team aren't available, slots will not be returned.   If there are no Physicians on the member's care team, then slots will be returned for any available Physician.\n\n- care_team_hybrid - Appointment slots will be shown for all users in the Physicians group. For any given appointment slot,   if a Physician of the member's care team is available, they will be preferred. However, slots for other Physicians will   still be shown.\n\n- round_robin - Appointment slots will be shown for all users in the Physicians group, and no preference will be given to   users who are also on the member's care team.\n\nBy default, Source uses the care_team_preferred strategy to provide continuity of care and ensure patients have a consistent experience. However, this is not always the right booking strategy for all practices. In fact, even for a single practice, you may sometimes need to reach for another routing method.\n\nIf you have a need for a routing model that isn't covered above, please don't hesitate to reach out to our team.",
            "example": "care_team_preferred"
          },
          "groups": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/components/schemas/group"
                }
              ],
              "x-expandable": {
                "$ref": "#/components/schemas/group"
              },
              "description": "Expandable reference to a Group",
              "example": "grp_IlGhgsstvgsagl6lV89Q"
            },
            "description": "Select the groups that should be evaluated when booking an appointment. If no group is specified, you will not be able to use the appointment slot API to find bookable slots. When using the appointment slot API, you can specify more specific users and groups. For example, if your appointment type is linked to the group \"Physicians,\" and when calling the slot API you provide an include parameter for the group \"Nurses,\" you only receive available slots for users who are in both the Physicians and Nurses group.",
            "example": [
              "grp_IlGhgsstvgsagl6lV89Q"
            ]
          },
          "license_types": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string",
                  "description": "Code for the license type. For example, \"MD\".",
                  "example": "MD"
                },
                "description": {
                  "type": "string",
                  "description": "Description of the license type. For example, \"Doctor of Medcine\".",
                  "example": "Doctor of Medicine"
                }
              },
              "required": [
                "code",
                "description"
              ]
            },
            "description": "The user license(s) that are required to perform appointments of this type. When looking for appointment slots, only the availability of licensed users will be returned. When booking an appointment without the skip_constraints parameter, any licensed user must have a matching license type, otherwise a warning will be returned. If more than one license code is provided, a licensed user with any of the license codes can participate in the appointment. Providing any value will override the entire array. Providing null or an empty array will empty out the array.",
            "example": [
              {
                "code": "MD",
                "description": "Doctor of Medicine"
              }
            ]
          },
          "reminders": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "when": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "default": "before",
                      "enum": [
                        "before"
                      ],
                      "example": "before",
                      "description": "The trigger for when this reminder should be scheduled. Currently, the only supported value is `before`, indicating that this reminder should be triggered based on the requested duration prior to the start of the appointment."
                    },
                    "unit": {
                      "type": "string",
                      "enum": [
                        "minute",
                        "hour",
                        "day"
                      ],
                      "description": "The unit of time used in this reminder configuration. Units are interpreted within the appointment's scheduled time zone, meaning 24 hours and 1 day are not necessarily the same if the reminder window spans daylight savings."
                    },
                    "time": {
                      "type": "number",
                      "description": "The number of units before the appointment at which this reminder should trigger. Must be an integer greater than zero."
                    }
                  },
                  "required": [
                    "type",
                    "unit",
                    "time"
                  ]
                }
              },
              "required": [
                "when"
              ]
            },
            "description": "The reminder configuration for this appointment type. Each appointment created with this type will inherit the reminder configuration of the appointment type. Changes to reminder configuration will be applied to all future appointments.\n\nYou may configure up to five reminders per appointment type."
          },
          "recurrence": {
            "type": "object",
            "properties": {
              "frequency": {
                "type": "string",
                "enum": [
                  "weekly"
                ],
                "description": "How often the appointments should recur. Source only supports 'weekly' at this time (including \"every N weeks\", using 'interval')",
                "example": "weekly"
              },
              "interval": {
                "type": "number",
                "minimum": 1,
                "maximum": 20,
                "description": "How many of the `frequency` intervals between each appointment, i.e. 'every N weeks'.",
                "example": 1
              },
              "count": {
                "type": "number",
                "minimum": 1,
                "maximum": 52,
                "description": "How many total appointments should be in the series.\n\nOne and only one of `count` or `duration` must be set."
              },
              "duration": {
                "type": "object",
                "properties": {
                  "amount": {
                    "type": "number"
                  },
                  "unit": {
                    "type": "string",
                    "enum": [
                      "days",
                      "weeks"
                    ]
                  }
                },
                "required": [
                  "amount",
                  "unit"
                ],
                "description": "Total length of time, expressed in number of days or weeks.\n\nOne and only one of `count` or `duration` must be set."
              }
            },
            "required": [
              "frequency",
              "interval"
            ],
            "nullable": true,
            "description": "Defines the default recurrence of this appointment type, if any.  Because creating an actual recurring series requires more information than can be defined in the default (in particular, 'days_of_week' defining which day(s) to recur on), setting the appointment type recurrence will not cause an appointment created with that type to have a recurring series. The appointment must be explicitly created with the full recurrence config for the series.\n\nExpressed as a subset of RRULE fields (see [rrule.js docs](https://github.com/jakubroztocil/rrule#api) for more context, but note that we only support a limited subset of the full RRULE spec).\n\nRecurrence configuration at the appointment type level is slightly different than what is allowed on an actual recurring series, notably rather than `until`, we can specifiy a `duration`. Also, specifying the day of week or month using `days_of_week` is not allowed at the appointment type level.\n\nNote: the recurring appointments feature is currently in preview. Please contact Source for more details."
          },
          "encounter_type": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/encounter_type"
              }
            ],
            "x-expandable": {
              "$ref": "#/components/schemas/encounter_type"
            },
            "description": "The encounter type used by default when creating encounters related to appointments of this type.",
            "example": "entp_Al9BP6ZBzGmJy7A6EMU2",
            "nullable": true
          },
          "forms": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/components/schemas/form"
                }
              ],
              "x-expandable": {
                "$ref": "#/components/schemas/form"
              },
              "description": "Expandable reference to a Form",
              "example": "form_hSGPOT5BMusNLwDI3Z4N"
            },
            "description": "A list of forms that members should complete before appointments of this type. When an appointment is booked, form responses to these forms are automatically created for the member to complete.",
            "example": [
              "form_hSGPOT5BMusNLwDI3Z4N"
            ]
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the appointment type was created.",
            "example": "2021-05-13T16:33:00.000Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the appointment type was last updated.",
            "example": "2021-05-13T16:33:00.000Z"
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Timestamp when the appointment type was deleted.",
            "example": "2021-05-13T16:33:00.000Z"
          }
        },
        "required": [
          "object",
          "id",
          "key",
          "name",
          "description",
          "default_instructions",
          "duration",
          "slot_interval",
          "color",
          "bookable",
          "buffer_before",
          "buffer_after",
          "planning_horizon",
          "minimum_notice",
          "video_enabled",
          "routing_strategy",
          "groups",
          "license_types",
          "reminders",
          "recurrence",
          "encounter_type",
          "forms",
          "created_at",
          "updated_at",
          "deleted_at"
        ],
        "title": "Appointment Type",
        "description": "Appointment types describe the different types of appointments that members can book with you.\n\nEach appointment type has associated configuration that describes how events of that type should be booked, including when they're available to be booked, the standard duration and timing information, as well as with whom they can be booked. You can create and manage appointment types based on your specific booking needs.\n\nNote that appointment types include several fields which are copied to an appointment at the time of creation. These fields, such as the duration, pre buffer and post buffer, can be changed on the appointment type at any time, but will not be reflected on appointments of that type which have already been booked.",
        "x-resourceId": "appointment_type",
        "x-package": "scheduling"
      },
      "availability": {
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "default": "availability",
            "enum": [
              "availability"
            ],
            "example": "availability",
            "description": "Always `availability`."
          },
          "id": {
            "type": "string",
            "example": "avl_LNfPSf5xUwBT7LDSA3YQ",
            "description": "Unique ID for the availability."
          },
          "user": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/user"
              }
            ],
            "x-expandable": {
              "$ref": "#/components/schemas/user"
            },
            "description": "User to whom this availability schedule corresponds. At this time, each user can only have one availability schedule, and it's automatically created by Source.",
            "example": "usr_NC6MQ3FyxddKoJJpfSVL"
          },
          "resource": {
            "anyOf": [
              {
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "$ref": "#/components/schemas/user"
                  }
                ],
                "x-expandable": {
                  "$ref": "#/components/schemas/user"
                },
                "description": "Expandable reference to a User",
                "example": "usr_NC6MQ3FyxddKoJJpfSVL"
              },
              {
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "$ref": "#/components/schemas/location"
                  }
                ],
                "x-expandable": {
                  "$ref": "#/components/schemas/location"
                },
                "description": "Expandable reference to a Location",
                "example": "loc_EtTXhFHUtCXO1JWBd8TN"
              }
            ],
            "description": "Resource to which this availability schedule corresponds. Availability schedules may belong to either a location or a user. Note that this property replaces the `user` property, and should be preferred in all contexts.",
            "example": "usr_NC6MQ3FyxddKoJJpfSVL"
          },
          "time_zone": {
            "type": "string",
            "description": "The IANA time zone identifier in which this schedule should be interpreted. A time zone must be provided, but can be set to UTC. All times in a user's availability schedule are considered to be in \"local\" time, so they are impossible to interpret without a time zone.\n\nNote that while availability schedules have a time zone field on them for reference, the time zone is replicated from the bookable resource to which the schedule is attached (currently only users). If you want to change the time zone for the schedule, you need to instead change the time zone on the user. Source will automatically detect the time zone change and update the schedule as well, triggering an `availability.updated` event with the new zone.",
            "example": "America/New_York"
          },
          "rules": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "day": {
                  "type": "number",
                  "description": "The day of the week to which this rule applies, as an ISO day of week. The value of this property must be a number from 1 to 7, where 1 represents Monday, and 7 represents Sunday.",
                  "example": 1
                },
                "start": {
                  "type": "string",
                  "format": "time",
                  "description": "The start time of this rule. The value of this property is an ISO local time, formatted as HH:mm, using 24 hour time. Valid values for the start time of a rule range from 00:00 to 23:59.",
                  "example": "09:00"
                },
                "end": {
                  "type": "string",
                  "format": "time",
                  "description": "The end time of this rule. The value of this property is an ISO local time, formatted as HH:mm, using 24 hour time. Unlike rule start times, end times may range from 00:00 to 24:00, where 24:00 represents midnight at the end of the day.",
                  "example": "17:00"
                },
                "start_date": {
                  "type": "string",
                  "format": "date",
                  "nullable": true,
                  "description": "The first date from which this rule should apply, expressed as an ISO date. If set to a non-null value, this rule will not be considered when evaluating availability before the given date.",
                  "example": "2022-08-10"
                },
                "end_date": {
                  "type": "string",
                  "format": "date",
                  "nullable": true,
                  "description": "The last date on which this rule should apply, expressed as an ISO date. If set to a non-null value, this rule will not be considered when evaluating availability after the given date.",
                  "example": null
                },
                "appointment_types": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "string"
                      },
                      {
                        "$ref": "#/components/schemas/appointment_type"
                      }
                    ],
                    "x-expandable": {
                      "$ref": "#/components/schemas/appointment_type"
                    },
                    "description": "Expandable reference to an appointment type",
                    "example": "aptp_meYUvkuaI2akjnb5Kwt7"
                  },
                  "description": "An optional set of appointment types that this availability rule is restricted to. Only appointments of the specified types are bookable during the period of this rule. Omitting this field or providing an empty array implies the rule can accommodate booking any appointment type.\n\nRules are additive - when rules with different appointment type restrictions overlap in time, the set of all allowed appointment types in all overlapping rules may be booked during the overlap."
                },
                "release_window": {
                  "type": "object",
                  "properties": {
                    "unit": {
                      "type": "string",
                      "enum": [
                        "day",
                        "hour",
                        "minute"
                      ]
                    },
                    "time": {
                      "type": "number"
                    }
                  },
                  "required": [
                    "unit",
                    "time"
                  ],
                  "nullable": true,
                  "description": "The time (in hours) before this availability rule when this availability is released and appointments that don't match the rule criteria can be booked.\n\nFor example, say you have a 3pm - 5pm availability rule restricted to Urgent Care visits. Typically, this would mean that only Urgent Care visits could be scheduled during that time. If you only had one hour of Urgent Care visits booked, then an hour of your day would go unutilized.\n\nUsing release windows, you can set the time at which the remaining Urgent Care visit capacity is released for any appointment type. if you set release window to 1 hour, for example, then starting at 2pm, your members would be able to book non-Urgent Care visits at 3pm. Starting at 3pm, members would be able to book non-Urgent Care visits at 4pm, and so on."
                },
                "virtual": {
                  "type": "boolean",
                  "description": "Whether or not the user should be considered available for virtual appointments (i.e. video and phone calls) during the available time block. You may choose to set this to false if the user is working in a physical location and should not be taking telemedicine visits during this time."
                },
                "location": {
                  "oneOf": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/components/schemas/location"
                    }
                  ],
                  "x-expandable": {
                    "$ref": "#/components/schemas/location"
                  },
                  "description": "The physical location in which the user will be located during this availability block. A user may only be assigned to a single physical location per time block. When a location is added to a time block, the user will be able to be booked at that location.\n\nNote that this field is present on availability schedules for locations as well, but is ignored.",
                  "example": "loc_EtTXhFHUtCXO1JWBd8TN",
                  "nullable": true
                }
              },
              "required": [
                "day",
                "start",
                "end",
                "start_date",
                "end_date",
                "appointment_types",
                "release_window",
                "virtual",
                "location"
              ]
            },
            "description": "The list of rules for this person's availability. Each rule defines a day of week, start and end time, and an optional array of appointment types to which the rule applies. There may be multiple rules for a single day of the week. When that happens, the rules represent multiple blocks of times that the user is available in a given day. For example, you may be available from 9am-12pm, break for lunch, and then be available 1pm-5pm.",
            "example": [
              {
                "day": 1,
                "start": "09:00",
                "end": "17:00",
                "start_date": null,
                "end_date": null,
                "appointment_types": [
                  "aptp_meYUvkuaI2akjnb5Kwt7"
                ],
                "release_window": null,
                "virtual": true,
                "location": null
              },
              {
                "day": 2,
                "start": "09:00",
                "end": "17:00",
                "start_date": null,
                "end_date": null,
                "appointment_types": [],
                "release_window": null,
                "virtual": true,
                "location": null
              },
              {
                "day": 3,
                "start": "09:00",
                "end": "17:00",
                "start_date": null,
                "end_date": null,
                "appointment_types": [],
                "release_window": null,
                "virtual": true,
                "location": null
              },
              {
                "day": 4,
                "start": "09:00",
                "end": "17:00",
                "start_date": null,
                "end_date": null,
                "appointment_types": [],
                "release_window": null,
                "virtual": true,
                "location": null
              },
              {
                "day": 5,
                "start": "09:00",
                "end": "17:00",
                "start_date": null,
                "end_date": null,
                "appointment_types": [],
                "release_window": null,
                "virtual": true,
                "location": null
              }
            ]
          },
          "overrides": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "date": {
                  "type": "string",
                  "format": "date",
                  "description": "The specific date of the override, specified as an ISO 8601 date string in the format YYYY-mm-dd. There can only be one override object per date in this list.",
                  "example": "2022-01-01"
                },
                "rules": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "start": {
                        "type": "string",
                        "format": "time",
                        "description": "The start time of this rule. The value of this property is an ISO local time, formatted as HH:mm, using 24 hour time. Valid values for the start time of a rule range from 00:00 to 23:59.",
                        "example": "09:00"
                      },
                      "end": {
                        "type": "string",
                        "format": "time",
                        "description": "The end time of this rule. The value of this property is an ISO local time, formatted as HH:mm, using 24 hour time. Unlike rule start times, end times may range from 00:00 to 24:00, where 24:00 represents midnight at the end of the day.",
                        "example": "17:00"
                      },
                      "appointment_types": {
                        "type": "array",
                        "items": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "$ref": "#/components/schemas/appointment_type"
                            }
                          ],
                          "x-expandable": {
                            "$ref": "#/components/schemas/appointment_type"
                          },
                          "description": "Expandable reference to an appointment type",
                          "example": "aptp_meYUvkuaI2akjnb5Kwt7"
                        },
                        "description": "An optional set of appointment types that this override rule is restricted to. Only appointments of the specified types are bookable during the period of this override. Omitting this field or providing an empty array implies the override can accommodate booking any appointment type.\n\nAppointment type constraints are additive - when overrides with different appointment type restrictions overlap in time, the set of all allowed appointment types in all overlapping rules may be booked during the overlap."
                      },
                      "release_window": {
                        "type": "object",
                        "properties": {
                          "unit": {
                            "type": "string",
                            "enum": [
                              "day",
                              "hour",
                              "minute"
                            ]
                          },
                          "time": {
                            "type": "number"
                          }
                        },
                        "required": [
                          "unit",
                          "time"
                        ],
                        "nullable": true,
                        "description": "The time (in hours) before this availability rule when this availability is released and appointments that don't match the rule criteria can be booked.\n\nFor example, say you have a 3pm - 5pm availability rule restricted to Urgent Care visits. Typically, this would mean that only Urgent Care visits could be scheduled during that time. If you only had one hour of Urgent Care visits booked, then an hour of your day would go unutilized.\n\nUsing release windows, you can set the time at which the remaining Urgent Care visit capacity is released for any appointment type. if you set release window to 1 hour, for example, then starting at 2pm, your members would be able to book non-Urgent Care visits at 3pm. Starting at 3pm, members would be able to book non-Urgent Care visits at 4pm, and so on."
                      },
                      "virtual": {
                        "type": "boolean",
                        "description": "Whether or not the user should be considered available for virtual appointments (i.e. video and phone calls) during the available time block. You may choose to set this to false if the user is working in a physical location and should not be taking telemedicine visits during this time."
                      },
                      "location": {
                        "oneOf": [
                          {
                            "type": "string"
                          },
                          {
                            "$ref": "#/components/schemas/location"
                          }
                        ],
                        "x-expandable": {
                          "$ref": "#/components/schemas/location"
                        },
                        "description": "The physical location in which the user will be located during this availability block. A user may only be assigned to a single physical location per time block. When a location is added to a time block, the user will be able to be booked at that location.\n\nNote that this field is present on availability schedules for locations as well, but is ignored.",
                        "example": "loc_EtTXhFHUtCXO1JWBd8TN",
                        "nullable": true
                      }
                    },
                    "required": [
                      "start",
                      "end",
                      "appointment_types",
                      "release_window",
                      "virtual",
                      "location"
                    ]
                  }
                }
              },
              "required": [
                "date",
                "rules"
              ]
            },
            "description": "Overrides to the availability rules for this schedule. Overrides are specific dates on which the user's availability differs from their general rules. For example, you may be available Monday through Friday 9am-5pm, but not available on New Years Day.",
            "example": [
              {
                "date": "2022-01-01",
                "rules": []
              }
            ]
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the appointment type was created.",
            "example": "2021-05-13T16:33:00.000Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the appointment type was last updated.",
            "example": "2021-05-13T16:33:00.000Z"
          }
        },
        "required": [
          "object",
          "id",
          "user",
          "resource",
          "time_zone",
          "rules",
          "overrides",
          "created_at",
          "updated_at"
        ],
        "title": "Availability",
        "description": "Availability describes the schedule for a particular user and is used to power appointment booking.\n\nBy default, users are created with a schedule that marks them unavailable at all times. While this is a safe default, it means that members can't book appointments until you set up proper schedules.\n\nNote that availability is unique to each environment, so a user has a different schedule in live mode and test mode. Additionally, availability does not have a standard list or retrieve endpoint like most other resources. Instead, availability is a child resource of the user to which it belongs. Availability reosurces do still trigger events when they are modified.",
        "x-resourceId": "availability",
        "x-package": "scheduling"
      },
      "care_plan": {
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "default": "care_plan",
            "enum": [
              "care_plan"
            ],
            "example": "care_plan",
            "description": "Always `care_plan`."
          },
          "id": {
            "type": "string",
            "example": "cp_Ahql1iW9f9blBVgf40aL",
            "description": "Unique ID for the care plan."
          },
          "member": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/member"
              }
            ],
            "x-expandable": {
              "$ref": "#/components/schemas/member"
            },
            "description": "Member to whom this care plan relates.",
            "example": "mem_JAfPRRc59eh2YQ1aeL3D"
          },
          "name": {
            "type": "string",
            "maxLength": 255,
            "description": "Name of this care plan. This name is visible to both members and users.",
            "example": "Diabetes Maintenance"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "A long-form description of this care plan. This description is visible to members and can be used to describe the purpose of the care plan in more detail.",
            "example": "Long-term care plan for diabetes"
          },
          "status": {
            "type": "string",
            "enum": [
              "active",
              "paused",
              "completed",
              "canceled"
            ],
            "description": "Current status of this care plan. By default, care plans are created in an `active` status. You can use the `paused` status to stop activities associated with the care plan and prevent any updates to the care plan, with the expectation that the care plan will be reactivated in the future. Care plans in a `canceled` or `completed` status cannot be reactivated.",
            "example": "active"
          },
          "start_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp indicating the start of the care plan. By default, `start_at` is set to the current time on care plan creation. You can optionally set start_at to a time in the past, for example in order to backload a historical care plan. `start_at` cannot be set to a time in the future.",
            "example": "2021-05-13T16:33:00.000Z"
          },
          "end_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Timestamp indicating the end of the care plan. When a care plan is completed or canceled, the `end_at` time is automatically updated. You can optionally specify `end_at` when creating a care plan in a canceled or completed status, in order to reflect a time in the past, for example when backloading a historical care plan. `end_at` must be a time at or after `start_at` and cannot be a time in the future.",
            "example": "2021-05-13T16:33:00.000Z"
          },
          "activities": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "example": "cpa_OzMZ8uRiuMoz86anjgOI",
                  "description": "The unique identifier of this activity."
                },
                "action": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "default": "task",
                          "enum": [
                            "task"
                          ],
                          "example": "task"
                        },
                        "config": {
                          "type": "object",
                          "properties": {
                            "task_definition": {
                              "oneOf": [
                                {
                                  "type": "string"
                                },
                                {
                                  "$ref": "#/components/schemas/task_definition"
                                }
                              ],
                              "x-expandable": {
                                "$ref": "#/components/schemas/task_definition"
                              },
                              "description": "Expandable reference to a Task Definition",
                              "example": "tskd_2Lc2yr7YIYxfN3RCSlBU"
                            },
                            "summary": {
                              "type": "string",
                              "minLength": 1,
                              "description": "A brief summary of the task.",
                              "example": "Measure A1C level."
                            }
                          },
                          "required": [
                            "task_definition",
                            "summary"
                          ]
                        }
                      },
                      "required": [
                        "type",
                        "config"
                      ]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "default": "form",
                          "enum": [
                            "form"
                          ],
                          "example": "form"
                        },
                        "config": {
                          "type": "object",
                          "properties": {
                            "form": {
                              "oneOf": [
                                {
                                  "type": "string"
                                },
                                {
                                  "$ref": "#/components/schemas/form"
                                }
                              ],
                              "x-expandable": {
                                "$ref": "#/components/schemas/form"
                              },
                              "description": "Expandable reference to a Form",
                              "example": "form_hSGPOT5BMusNLwDI3Z4N"
                            }
                          },
                          "required": [
                            "form"
                          ]
                        }
                      },
                      "required": [
                        "type",
                        "config"
                      ]
                    }
                  ],
                  "discriminator": {
                    "propertyName": "type"
                  },
                  "description": "Action to take when the activity is run. The action must specify an action type and corresponding configuration matching the action type.",
                  "example": {
                    "type": "task",
                    "config": {
                      "task_definition": "tskd_2Lc2yr7YIYxfN3RCSlBU",
                      "summary": "Quarterly checkin"
                    }
                  }
                },
                "trigger": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "default": "absolute",
                          "enum": [
                            "absolute"
                          ],
                          "example": "absolute",
                          "description": "Type of time-based trigger to use for this activity. If set to `absolute`, specify the timestamp in the date parameter when this activity should run. If set to `relative`, specify in the `amount` and `unit` parameters the amount of time to wait after creation for the activity to run."
                        },
                        "date": {
                          "type": "string",
                          "format": "date-time",
                          "description": "Timestamp at which to trigger the activity."
                        }
                      },
                      "required": [
                        "type",
                        "date"
                      ]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "default": "relative",
                          "enum": [
                            "relative"
                          ],
                          "example": "relative",
                          "description": "Type of time-based trigger to use for this activity. If set to `absolute`, specify the timestamp in the date parameter when this activity should run. If set to `relative`, specify in the `amount` and `unit` parameters the amount of time to wait after creation for the activity to run."
                        },
                        "unit": {
                          "type": "string",
                          "enum": [
                            "day",
                            "week",
                            "month"
                          ],
                          "description": "Units for the time specified in `amount`."
                        },
                        "amount": {
                          "type": "number",
                          "description": "Together with the `unit` parameter, the amount of time to wait after activity creation until triggering the activity."
                        }
                      },
                      "required": [
                        "type",
                        "unit",
                        "amount"
                      ]
                    }
                  ],
                  "discriminator": {
                    "propertyName": "type"
                  },
                  "nullable": true,
                  "description": "When the activity should begin running. You can specify either an `absolute` trigger type along with a specific date and time or a `relative` trigger type to indicate a period of time after the start of the care plan. The relative trigger type supports units of `day`, `week`, and `month`.",
                  "example": {
                    "type": "relative",
                    "unit": "week",
                    "amount": 1
                  }
                },
                "recurrence": {
                  "type": "object",
                  "properties": {
                    "frequency": {
                      "type": "string",
                      "enum": [
                        "weekly"
                      ],
                      "description": "How often the activity should recur. Source only supports 'weekly' at this time (including \"every N weeks\", using `interval`).",
                      "example": "weekly"
                    },
                    "interval": {
                      "type": "number",
                      "minimum": 1,
                      "description": "How many of the `frequency` intervals between each activity execution, i.e. 'every N weeks'.",
                      "example": 1
                    },
                    "count": {
                      "type": "number",
                      "minimum": 1,
                      "description": "How many total times the activity should execute.\n\nOnly one of `count` or `until` can be set."
                    },
                    "until": {
                      "type": "string",
                      "format": "date",
                      "description": "The date at which the recurring activity ends. This date is inclusive, so if an activity execution falls on this date, it will run. Only one of `count` or `until` can be set."
                    },
                    "days_of_week": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "enum": [
                          "monday",
                          "tuesday",
                          "wednesday",
                          "thursday",
                          "friday",
                          "saturday",
                          "sunday"
                        ]
                      },
                      "description": "The days of the week on which the activity should occur. By providing multiple days, you can indicate multiple recurring activities per week."
                    }
                  },
                  "required": [
                    "frequency",
                    "interval",
                    "days_of_week"
                  ],
                  "nullable": true,
                  "description": "Defines the activity’s recurrence. If not set, the activity is expected to run once. If neither `count` nor `until` is set, the activity runs indefinitely."
                },
                "time_zone": {
                  "type": "string",
                  "description": "The IANA time zone for the recurrence and trigger time for the activity. Timestamps associated with activities are represented in UTC time, however the zone is stored and used to calculate run times for the activity.",
                  "example": "America/Denver"
                },
                "occurs_at": {
                  "type": "string",
                  "format": "date-time",
                  "nullable": true,
                  "description": "Timestamp when the activity should run next. By default, the activity runs on creation if active. If a trigger or recurrence is configured, the next run's timestamp is automatically calculated and shown in this field.",
                  "example": "2021-05-13T16:33:00.000Z"
                },
                "last_occurred_at": {
                  "type": "string",
                  "format": "date-time",
                  "nullable": true,
                  "description": "Timestamp when the activity last ran."
                },
                "last_outcome": {
                  "oneOf": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/components/schemas/task"
                    }
                  ],
                  "x-expandable": {
                    "$ref": "#/components/schemas/task"
                  },
                  "description": "The identifier of the action last created by this activity. For example, if the activity is configured to produce a task, this is the identifier of the task the activity last created.",
                  "example": "task_vAJyHgJ2VYwaYczijn9M",
                  "nullable": true
                },
                "previous_occurrences": {
                  "type": "number",
                  "description": "Number of times this activity has occurred before now."
                },
                "completed_at": {
                  "type": "string",
                  "format": "date-time",
                  "nullable": true,
                  "description": "Timestamp when the activity was completed."
                },
                "created_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Timestamp when the activity was created."
                },
                "updated_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Timestamp when the activity was last updated."
                }
              },
              "required": [
                "id",
                "action",
                "trigger",
                "recurrence",
                "time_zone",
                "occurs_at",
                "last_occurred_at",
                "last_outcome",
                "previous_occurrences",
                "completed_at",
                "created_at",
                "updated_at"
              ]
            },
            "description": "An ordered list of activities associated with this care plan. Activities represent actions the system should take while the care plan remains active. An activity can optionally be configured to start at a future time and to recur. For example, you can configure an activity to create a particular type of task every four weeks, starting one month after the care plan's start date."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the care plan was created.",
            "example": "2021-05-13T16:33:00.000Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the care plan was last updated.",
            "example": "2021-05-13T16:33:00.000Z"
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Timestamp when the care plan was deleted.",
            "example": "2021-05-13T16:33:00.000Z"
          }
        },
        "required": [
          "object",
          "id",
          "member",
          "name",
          "description",
          "status",
          "start_at",
          "end_at",
          "activities",
          "created_at",
          "updated_at",
          "deleted_at"
        ],
        "title": "Care Plan",
        "description": "A care plan is the primary method of organizing care delivery within Source. Care plans can vary in complexity, ranging from activities for a short episode of care to a long-term health maintenance plan for a specific condition. A member can have any number of active care plans at a time.\n\nEach care plan includes a set of activities that the member and care team plan to do in order to achieve the care plan’s outcomes. You can configure any number of activities that each result in a specific action, optionally at a future date or on a recurring schedule. Once a care plan is created, you must end the care plan and start a new one in order to update, remove, or add activities.\n\nWhile members cannot create care plans directly, via the API members are able to view care plan details and activities that result in member-facing actions.",
        "x-resourceId": "care_plan",
        "x-package": "clinical",
        "x-preview": true
      },
      "care_team": {
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "default": "care_team",
            "enum": [
              "care_team"
            ],
            "example": "care_team",
            "description": "Always `care_team`."
          },
          "id": {
            "type": "string",
            "description": "Unique ID of the care team.",
            "example": "crtm_Zfj4Sl03hfvZjfFJZ492"
          },
          "member": {
            "type": "string",
            "nullable": true,
            "description": "Member to which this care team is assigned.",
            "example": "mem_JAfPRRc59eh2YQ1aeL3D"
          },
          "participants": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "user": {
                  "oneOf": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/components/schemas/user"
                    }
                  ],
                  "x-expandable": {
                    "$ref": "#/components/schemas/user"
                  },
                  "description": "The user on the care team. Only users with care team roles will be eligible for automatic routing of tasks.",
                  "example": "usr_NC6MQ3FyxddKoJJpfSVL"
                }
              },
              "required": [
                "user"
              ]
            },
            "description": "The ordered list of users on the care team.",
            "example": []
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the care team was created.",
            "example": "2021-05-13T16:33:00.000Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the care team was last updated.",
            "example": "2021-05-13T16:33:00.000Z"
          }
        },
        "required": [
          "object",
          "id",
          "member",
          "participants",
          "created_at",
          "updated_at"
        ],
        "title": "Care Team",
        "description": "Care teams represent the individuals who are responsible for a member's care.\n\nEach member has an empty care team resource created for them. This care team can be updated to add or remove providers, reorder them, or point to a global, shared care team that may be assigned to multiple members.\n\nRemember that tasks, communications, and other workflow requirements will leverage the care team to determine how they're routed.",
        "x-resourceId": "care_team",
        "x-package": null
      },
      "channel": {
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "default": "channel",
            "enum": [
              "channel"
            ],
            "example": "channel",
            "description": "Always `channel`."
          },
          "id": {
            "type": "string",
            "description": "Unique ID of the channel.",
            "example": "chan_wrsKSJ6PBE52n06UDyxV"
          },
          "type": {
            "type": "string",
            "description": "The type of channel.",
            "example": "sms"
          },
          "name": {
            "type": "string",
            "description": "The name of this channel.",
            "example": "SMS Line"
          },
          "contact": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/contact_point"
              }
            ],
            "x-wrapped": true,
            "description": "The contact point that represents the handle from which this channel communicates.",
            "example": {
              "system": "phone",
              "value": "+12125551234"
            }
          },
          "capabilities": {
            "type": "object",
            "properties": {
              "attachment_types": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "rich_text": {
                "type": "boolean"
              },
              "max_length": {
                "type": "number",
                "nullable": true
              }
            },
            "required": [
              "attachment_types",
              "rich_text",
              "max_length"
            ],
            "description": "The capabilities of this channel."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the channel was created.",
            "example": "2021-05-13T16:33:00.000Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the channel was last updated.",
            "example": "2021-05-13T16:33:00.000Z"
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the channel was deleted."
          }
        },
        "required": [
          "object",
          "id",
          "type",
          "name",
          "contact",
          "capabilities",
          "created_at",
          "updated_at"
        ],
        "title": "Channel",
        "description": "Channels represent the ways that you can communicate with your members, such as SMS or live chat.\n\nYou can create and manage channels to support new ways of connecting with your members. Typically, most accounts will only use a small number of channels. However, more advanced use cases may want to create unique channels per location or service line, for example.",
        "x-resourceId": "channel",
        "x-package": "communications"
      },
      "comment": {
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "default": "comment",
            "enum": [
              "comment"
            ],
            "example": "comment",
            "description": "Always `comment`."
          },
          "id": {
            "type": "string",
            "example": "cmt_qJfs2rwurnbKXt2kbRYz",
            "description": "Unique ID for the comment."
          },
          "text": {
            "type": "string",
            "description": "Markdown formatted contents of the comment. Comments support limited Markdown syntax.",
            "example": "[@John](mention://user/usr_qoGndHzx8KwdYsEByt9X) can you take a look at this?"
          },
          "resource": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/task"
              }
            ],
            "x-expandable": {
              "$ref": "#/components/schemas/task"
            },
            "description": "The ID of the resource to which the comment is related. Currently, comments are only supported on tasks.",
            "example": "usr_qoGndHzx8KwdYsEByt9X"
          },
          "author": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/user"
              }
            ],
            "x-expandable": {
              "$ref": "#/components/schemas/user"
            },
            "description": "Text contents of the comment.",
            "example": "usr_qoGndHzx8KwdYsEByt9X"
          },
          "attachments": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/components/schemas/file"
                }
              ],
              "x-expandable": {
                "$ref": "#/components/schemas/file"
              },
              "description": "Expandable reference to a File",
              "example": "file_gdIyXM9d4LKGnewOV4OM"
            },
            "description": "Any attachments related to this comment. Currently, only file attachments are supported.",
            "example": []
          },
          "mentioned_users": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/components/schemas/user"
                }
              ],
              "x-expandable": {
                "$ref": "#/components/schemas/user"
              },
              "description": "Expandable reference to a User",
              "example": "usr_NC6MQ3FyxddKoJJpfSVL"
            },
            "description": "List of users that were mentioned in this comment. Mentions are automatically detected by scanning the markdown text content for links to the mention:// scheme.",
            "example": [
              "usr_qoGndHzx8KwdYsEByt9X"
            ]
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the comment was created.",
            "example": "2021-05-13T16:33:00.000Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the comment was last updated.",
            "example": "2021-05-13T16:33:00.000Z"
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the comment was deleted. This will only be returned if the comment is deleted."
          }
        },
        "required": [
          "object",
          "id",
          "text",
          "resource",
          "author",
          "attachments",
          "mentioned_users",
          "created_at",
          "updated_at"
        ],
        "title": "Comment",
        "description": "Comments represent internal communication about another resource in Source. For example, you can use comments to collaborate with others on your team about a particular task. Comments are not accessible to members.\n\nCurrently, comments are only supported on tasks. However, we intend to add comment support to additional resources in the future.",
        "x-resourceId": "comment",
        "x-package": null
      },
      "CompoundConditional": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "default": "compound_conditional",
            "enum": [
              "compound_conditional"
            ],
            "example": "compound_conditional"
          },
          "operator": {
            "type": "string",
            "enum": [
              "$and",
              "$or"
            ],
            "description": "The operator to apply in this conditional.",
            "example": "$and"
          },
          "operands": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Conditional"
            },
            "description": "The array of conditionals that will be combined with 'and'/'or' boolean logic to evaluate this conditional."
          }
        },
        "required": [
          "type",
          "operator",
          "operands"
        ],
        "description": "A 'compound' conditional (in contrast to a 'concrete' one) takes a set of other conditionals and applies the give '$or' or '$and' condition to combine them.\n\nThe operands may be concrete conditionals or compound ones, allowing nested 'and'/'or' combinations."
      },
      "ConcreteConditional": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "default": "concrete_conditional",
            "enum": [
              "concrete_conditional"
            ],
            "example": "concrete_conditional"
          },
          "operator": {
            "type": "string",
            "enum": [
              "$eq",
              "$ne",
              "$exists",
              "$gt",
              "$gte",
              "$lt",
              "$lte",
              "$in",
              "$nin",
              "$all",
              "$olderThan",
              "$youngerThan"
            ],
            "description": "The operator to apply in this conditional.",
            "example": "$eq"
          },
          "key": {
            "type": "string",
            "description": "The key of the question/response that this conditional is being applied to.",
            "example": "question_one"
          },
          "fact": {
            "type": "string",
            "description": "The value within the question response that this conditional is being applied to. This must correspond to a path within the given question's response schema. For example, if the question type is `date`, then the path must be 'value', which is the only field in the response schema.",
            "example": "value"
          },
          "argument": {
            "description": "The argument used to apply the operator to the input. The type of the operator depends on the operator and the input type."
          }
        },
        "required": [
          "type",
          "operator",
          "key",
          "argument"
        ],
        "description": "A 'concrete' conditional (in contrast to a 'compound' one) takes a fact, some fixed arguments, and applies the given operator to calculate the boolean result.\n\nThe input (left-hand-side) of the operator is specified by a question response key and path within that question's response schema to the fact we are using.\n\nThe argument (right-hand-side) of the operator is provided as config and its type must match the allowed types of the operator and the input type. For example, the '$eq' operator requires the argument type is the same as the input type."
      },
      "Conditional": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/ConcreteConditional"
          },
          {
            "$ref": "#/components/schemas/CompoundConditional"
          }
        ],
        "discriminator": {
          "propertyName": "type"
        }
      },
      "contact_point": {
        "type": "object",
        "properties": {
          "system": {
            "type": "string",
            "enum": [
              "phone",
              "email",
              "other"
            ],
            "description": "The system that this contact point represents.",
            "example": "phone"
          },
          "value": {
            "type": "string",
            "description": "The details of the actual contact point, such as the phone number or email address. While this value is always a string, the specific syntax will be determined based on the system.",
            "example": "+12125551234"
          }
        },
        "required": [
          "system",
          "value"
        ]
      },
      "device": {
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "default": "device",
            "enum": [
              "device"
            ],
            "example": "device",
            "description": "Always `device`."
          },
          "id": {
            "type": "string",
            "example": "dev_79Dek9tjwNUZqMWU576Q",
            "description": "Unique ID for the device."
          },
          "member": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/member"
              }
            ],
            "x-expandable": {
              "$ref": "#/components/schemas/member"
            },
            "description": "Member to which this device belongs.",
            "example": "mem_JAfPRRc59eh2YQ1aeL3D"
          },
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "active",
              "deactivated"
            ],
            "description": "Current status of the device.",
            "example": "active"
          },
          "name": {
            "type": "string",
            "description": "Display name of the device.",
            "example": "BodyTrace BT-105"
          },
          "hardware_address": {
            "type": "string",
            "nullable": true,
            "description": "Hardware ID of the device (e.g. IMEI or MAC address)",
            "example": "490154203237518"
          },
          "capabilities": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "blood_glucose",
                "blood_oxygen_saturation",
                "blood_pressure",
                "body_weight",
                "diastolic_blood_pressure",
                "heart_rate",
                "systolic_blood_pressure"
              ]
            },
            "description": "Capabilities for the device, determined by types of measurements the device can report.",
            "example": [
              "blood_pressure"
            ]
          },
          "last_seen_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Last time we received any data or heartbeat from the device.",
            "example": "2021-05-13T16:33:00.000Z"
          },
          "battery_level": {
            "type": "number",
            "nullable": true,
            "description": "Last known battery level from the device, if available.",
            "example": 99
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the device was created.",
            "example": "2021-05-13T16:33:00.000Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the device was last updated.",
            "example": "2021-05-13T16:33:00.000Z"
          }
        },
        "required": [
          "object",
          "id",
          "member",
          "status",
          "name",
          "hardware_address",
          "capabilities",
          "last_seen_at",
          "battery_level",
          "created_at",
          "updated_at"
        ],
        "title": "Device",
        "description": "Devices are physical hardware capable of monitoring the health of a member.\n\nSource is able to send devices to members by placing orders using the ordering API. Each time an order is fulfilled, a new device is registered on the platform. As users take measurements with their devices, those readings create new measurement resources.",
        "x-resourceId": "device",
        "x-package": "monitoring"
      },
      "device_model": {
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "default": "device_model",
            "enum": [
              "device_model"
            ],
            "example": "device_model",
            "description": "Always `device_model`."
          },
          "id": {
            "type": "string",
            "description": "Unique ID of the device model.",
            "example": "dev_kTRoWd1awPhUoRwL78uH"
          },
          "manufacturer": {
            "type": "string",
            "description": "Manufacturer of the device model.",
            "example": "ACME"
          },
          "model_number": {
            "type": "string",
            "description": "Model number of the device model",
            "example": "BT-005"
          },
          "category": {
            "type": "string",
            "enum": [
              "scale",
              "blood_pressure_monitor",
              "pulse_oximeter",
              "blood_glucose_monitor"
            ],
            "description": "Category of the device model.",
            "example": "blood_pressure_monitor"
          },
          "capabilities": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "blood_glucose",
                "blood_oxygen_saturation",
                "blood_pressure",
                "body_weight",
                "diastolic_blood_pressure",
                "heart_rate",
                "systolic_blood_pressure"
              ]
            },
            "description": "Capabilities for the device model, determined by types of measurements the device can report.",
            "example": [
              "blood_pressure"
            ]
          },
          "connectivity": {
            "type": "string",
            "enum": [
              "cellular",
              "bluetooth"
            ],
            "description": "Connectivity type of this device model",
            "example": "cellular"
          }
        },
        "required": [
          "object",
          "id",
          "manufacturer",
          "model_number",
          "category",
          "capabilities",
          "connectivity"
        ],
        "title": "Device Model",
        "x-resourceId": "device_model",
        "x-package": "monitoring"
      },
      "document": {
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "default": "document",
            "enum": [
              "document"
            ],
            "example": "document",
            "description": "Always `document`."
          },
          "id": {
            "type": "string",
            "example": "doc_XVkdMBfc6BXlkFJ9K23G",
            "description": "Unique ID for the document."
          },
          "name": {
            "type": "string",
            "maxLength": 255,
            "description": "A short-form name of the document.",
            "example": "Lab Result 05/01/22"
          },
          "description": {
            "type": "string",
            "maxLength": 4096,
            "nullable": true,
            "description": "A long-form text description of the document.",
            "example": "Lab Results from May 1st, 2022. Includes a CBC, Lipid Panel, and Chem-12."
          },
          "member": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/member"
              }
            ],
            "x-expandable": {
              "$ref": "#/components/schemas/member"
            },
            "description": "The member associated with the document.",
            "example": "mem_JAfPRRc59eh2YQ1aeL3D"
          },
          "file": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/file"
              }
            ],
            "x-expandable": {
              "$ref": "#/components/schemas/file"
            },
            "description": "The file that represents the document.",
            "example": "file_gdIyXM9d4LKGnewOV4OM"
          },
          "internal": {
            "type": "boolean",
            "description": "Whether only internal users or a member can view this document. If not specified, the default is false and a member can view the document.",
            "example": true
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "description": "When the document was originally created or authored. When creating a document, if no date is provided, the date the document is created is used.",
            "example": "2021-05-13T16:33:00.000Z"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the document was created.",
            "example": "2021-05-13T16:33:00.000Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the document was last updated.",
            "example": "2021-05-13T16:33:00.000Z"
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Timestamp when the document was deleted.",
            "example": "2021-05-13T16:33:00.000Z"
          }
        },
        "required": [
          "object",
          "id",
          "name",
          "description",
          "member",
          "file",
          "internal",
          "date",
          "created_at",
          "updated_at",
          "deleted_at"
        ],
        "title": "Document",
        "description": "Documents are member-specific files stored within Source. You can upload, list, retrieve, and delete documents via API for a specific member. A document references a file with a purpose of `document` uploaded via the [Files API](../file/).",
        "x-resourceId": "document",
        "x-package": null
      },
      "encounter": {
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "default": "encounter",
            "enum": [
              "encounter"
            ],
            "example": "encounter",
            "description": "Always `encounter`."
          },
          "id": {
            "type": "string",
            "example": "enc_QTt9bgcEaw5e9jpGnmzj",
            "description": "Unique ID for the encounter."
          },
          "encounter_type": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/encounter_type"
              }
            ],
            "x-expandable": {
              "$ref": "#/components/schemas/encounter_type"
            },
            "description": "The type of encounter that was created.",
            "example": "entp_Al9BP6ZBzGmJy7A6EMU2"
          },
          "member": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/member"
              }
            ],
            "x-expandable": {
              "$ref": "#/components/schemas/member"
            },
            "description": "Member to which the encounter belongs.",
            "example": "mem_JAfPRRc59eh2YQ1aeL3D"
          },
          "status": {
            "type": "string",
            "enum": [
              "open",
              "closed"
            ],
            "description": "Whether or not the encounter is open and requires follow-up or further documentation. Any note associated with an encounter must be signed before the encounter can be closed.",
            "example": "open"
          },
          "start_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the encounter started.",
            "example": "2021-05-13T16:33:00.000Z"
          },
          "end_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Timestamp of when the encounter ended.",
            "example": "2021-05-13T16:33:00.000Z"
          },
          "related": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "resource_type": {
                  "type": "string",
                  "enum": [
                    "appointment",
                    "form_response"
                  ],
                  "description": "Type of related resource.",
                  "example": "appointment"
                },
                "resource": {
                  "anyOf": [
                    {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "$ref": "#/components/schemas/appointment"
                        }
                      ],
                      "x-expandable": {
                        "$ref": "#/components/schemas/appointment"
                      },
                      "description": "Expandable reference to an Appointment",
                      "example": "appt_mTvufYJBBgYmbEAEZ6rE"
                    },
                    {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "$ref": "#/components/schemas/form_response"
                        }
                      ],
                      "x-expandable": {
                        "$ref": "#/components/schemas/form_response"
                      },
                      "description": "Expandable reference to a form response",
                      "example": "fr_mk29zZR6Qr5u5Q0BRHwu"
                    }
                  ],
                  "description": "Unique identifier for the related resource."
                }
              },
              "required": [
                "resource_type",
                "resource"
              ]
            },
            "description": "Array of resources related to the encounter, such as appointments and form responses. When retrieving encounters via API, related resources can be expanded by including `&expand=related.resource` in the encounter query."
          },
          "task": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/task"
              }
            ],
            "x-expandable": {
              "$ref": "#/components/schemas/task"
            },
            "description": "The identifier of the task associated with the encounter. Open encounters automatically generate tasks to ensure that the encounter is documented and closed. For convenience, you can optionally specify a task assignee when creating or updating an encounter using the `assignee` parameter. When the encounter is closed, the associated task is automatically resolved and unlinked from the encounter. If the encounter is reopened, a new task is created and will follow task routing configuration unless you specify an assignee.",
            "example": "task_vAJyHgJ2VYwaYczijn9M",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the encounter was created.",
            "example": "2021-05-13T16:33:00.000Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the encounter was last updated.",
            "example": "2021-05-13T16:33:00.000Z"
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Timestamp of when the encounter was deleted.",
            "example": "2021-05-13T16:33:00.000Z"
          }
        },
        "required": [
          "object",
          "id",
          "encounter_type",
          "member",
          "status",
          "start_at",
          "end_at",
          "related",
          "task",
          "created_at",
          "updated_at",
          "deleted_at"
        ],
        "title": "Encounter",
        "description": "Encounters represent the details of one or more related interactions with a member as part of their health care.\n\nDepending on your needs, you can use encounters to document an appointment with a member, a form response, or a combination of interactions. Each encounter must have a specific start and end time, representing the time period of the interactions documented by the encounter. Currently, Source supports encounters for appointments and form responses, and will support other types of encounters over time.\n\nEncounters are the entry point for notes in Source. Each encounter can optionally include one or more notes that themselves represent the documentation of the member's care. When creating encounters and notes via API, first create the encounter and then create the note related to the encounter.",
        "x-resourceId": "encounter",
        "x-package": "clinical",
        "x-preview": true
      },
      "encounter_type": {
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "default": "encounter_type",
            "enum": [
              "encounter_type"
            ],
            "example": "encounter_type",
            "description": "Always `encounter_type`."
          },
          "id": {
            "type": "string",
            "example": "entp_0IcPhnnAMjWduezNQRaC",
            "description": "Unique ID for the encounter type."
          },
          "key": {
            "type": "string",
            "description": "Unique key for this encounter type. You can use this when creating encounters via the API. In order to avoid potential confusion when distinguishing between encounter type IDs and keys, keys must not start with `entp_`.",
            "example": "back-pain-intake"
          },
          "name": {
            "type": "string",
            "maxLength": 255,
            "description": "Name of this encounter type.",
            "example": "Back Pain Intake"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "Description of this encounter type. This description is not displayed and is used to capture administrative notes about the encounter type."
          },
          "queue": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/queue"
              }
            ],
            "x-expandable": {
              "$ref": "#/components/schemas/queue"
            },
            "description": "Queue through which tasks related to encounters of this type should be routed in order to find an assignee. This queue overrides any queue specified in the task definition for open encounters. You can always change the queue for a given task once that task has been created.",
            "example": "que_6NGuKD4KdMCGXLP6uBda",
            "nullable": true
          },
          "quick": {
            "type": "boolean",
            "description": "Whether or not the encounter type is available for users to create ad hoc encounters in the Source Clinical UI without first booking an appointment or receiving a form response. If not specified, by default, the encounter type is not available in the Clinical UI for creating ad hoc encounters."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the encounter type was created.",
            "example": "2021-05-13T16:33:00.000Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the encounter type was last updated.",
            "example": "2021-05-13T16:33:00.000Z"
          },
          "archived_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Timestamp of when the encounter type was archived.",
            "example": "2021-05-13T16:33:00.000Z"
          }
        },
        "required": [
          "object",
          "id",
          "key",
          "name",
          "description",
          "queue",
          "quick",
          "created_at",
          "updated_at",
          "archived_at"
        ],
        "title": "Encounter Type",
        "description": "Encounter types inform the display and behavior of encounters.\n\nYou can use encounter types to identify similar encounters and to control how tasks related to open encounters should route. Appointment types and forms can each relate to an encounter type, giving you the ability to route the encounters for booked appointments and submitted form responses to particular clinicians on your care team.\n\nEach encounter type contains the default configuration for how tasks associated with encounters of that type should route. You can always override these settings on individual tasks. If you update the configuration for an encounter type, changes are not reflected for existing tasks for encounters, only for newly opened tasks.",
        "x-resourceId": "encounter_type",
        "x-package": "clinical",
        "x-preview": true
      },
      "error": {
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "default": "error",
            "enum": [
              "error"
            ],
            "example": "error"
          },
          "type": {
            "type": "string",
            "enum": [
              "api_error",
              "api_connection_error",
              "invalid_request_error",
              "authentication_error",
              "authorization_error",
              "unprocessable_request_error"
            ],
            "description": "The type of error encountered."
          },
          "code": {
            "type": "string",
            "description": "For errors that could be handled programmatically, a short string indicating the error code reported."
          },
          "message": {
            "type": "string",
            "description": "A human-readable message providing more details about the error."
          },
          "request_id": {
            "type": "string",
            "nullable": true,
            "description": "Unique ID for the request where the error was encountered."
          },
          "meta": {
            "type": "object",
            "additionalProperties": {},
            "description": "Additional information sent along with the error"
          }
        },
        "required": [
          "object",
          "type",
          "code",
          "message",
          "request_id"
        ]
      },
      "event": {
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "default": "event",
            "enum": [
              "event"
            ],
            "example": "event",
            "description": "Always `event`."
          },
          "id": {
            "type": "string",
            "description": "Unique ID for the event.",
            "example": "evt_KN4jugnkrxDsqH4wSFRx"
          },
          "type": {
            "type": "string",
            "description": "Type of event.",
            "example": "group.created"
          },
          "actor": {
            "anyOf": [
              {
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "$ref": "#/components/schemas/member"
                  }
                ],
                "x-expandable": {
                  "$ref": "#/components/schemas/member"
                },
                "description": "Expandable reference to a Member",
                "example": "mem_JAfPRRc59eh2YQ1aeL3D"
              },
              {
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "$ref": "#/components/schemas/user"
                  }
                ],
                "x-expandable": {
                  "$ref": "#/components/schemas/user"
                },
                "description": "Expandable reference to a User",
                "example": "usr_NC6MQ3FyxddKoJJpfSVL"
              }
            ],
            "nullable": true,
            "description": "Actor whose action triggered this event. The actor may be a user, member, or null. When the actor value is null, such as for an action being performed by the system, the `actor_type` field is fully descriptive."
          },
          "actor_type": {
            "type": "string",
            "enum": [
              "user",
              "member",
              "api",
              "system",
              "anonymous",
              "unknown"
            ],
            "description": "The type of actor whose action triggered this event. The `unknown` value should only be present in historical events created prior to December 2021.",
            "example": "user"
          },
          "member": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/member"
              }
            ],
            "x-expandable": {
              "$ref": "#/components/schemas/member"
            },
            "description": "The member on which this event was performed. This will be null on events that are not specific to a single member.",
            "example": "mem_JAfPRRc59eh2YQ1aeL3D",
            "nullable": true
          },
          "data": {
            "type": "object",
            "properties": {
              "object": {
                "description": "Serialized object related to the event.",
                "example": {
                  "object": "group",
                  "id": "grp_IlGhgsstvgsagl6lV89Q",
                  "name": "Physicians",
                  "description": "Supervising physicians",
                  "created_at": "2021-05-13T16:33:00.000Z",
                  "updated_at": "2021-05-13T16:33:00.000Z"
                }
              },
              "previous_values": {
                "description": "The previous values of any attributes that changed. This propery is typically only returned on *.updated events which may have modified several fields in a single request.",
                "example": {
                  "description": "All physicians"
                }
              }
            },
            "required": [
              "object"
            ],
            "description": "Payload contained within this event."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the event was created.",
            "example": "2021-05-13T16:33:00.000Z"
          }
        },
        "required": [
          "object",
          "id",
          "type",
          "actor",
          "actor_type",
          "member",
          "data",
          "created_at"
        ],
        "title": "Event",
        "description": "Events are our way of letting you know when something interesting happens in your account.\n\nWhen an interesting event occurs, we create a new Event object. For example, when a member is created, we create a `member.created` event. The shape of the object in the `data` property of the event will be the object associated with the type of event. For example, a `member.created` event will have a data property containing the Member object.\n\nNote that some actions may cause multiple events to be created. For example, when a member is created, you will receive both a `member.created` and a `care_team.created` event.”\n\nYou can view more information about receiving Source events via webhooks [here](https://docs.sourcehealth.com/docs/api/webhooks/).",
        "x-resourceId": "event",
        "x-package": null
      },
      "field": {
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "default": "field",
            "enum": [
              "field"
            ],
            "example": "field",
            "description": "Always `field`."
          },
          "id": {
            "type": "string",
            "example": "cf_LQliw4doEFtGKl1Bb9vJ",
            "description": "Unique ID for the field."
          },
          "key": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255,
            "pattern": "^[a-z0-9_-]+$",
            "description": "The key for this field, for use in the API. Keys must be alphanumeric strings and can contain hyphens or underscores.\n\nOnce a field has been created, its key cannot change. You are able to change its display name.",
            "example": "payer"
          },
          "name": {
            "type": "string",
            "description": "The display name for a custom field. This is the name that will show in visual presentations of this field to members or users.",
            "example": "Payer"
          },
          "resource_type": {
            "type": "string",
            "description": "The resource to which the field belongs. Currently, custom fields are only supported on members.",
            "example": "member"
          },
          "type": {
            "type": "string",
            "enum": [
              "string",
              "text",
              "number",
              "date",
              "enum"
            ],
            "description": "The data type of this custom field. The following data types are supported:\n\n- string: a single line of text, up to 255 characters\n\n- text: a long form text input, with no predefined length\n\n- number: a number, or string which can be interpreted as a number\n\n- date: a date, without a time component\n\nNote that once a field is created, its data type cannot change.",
            "example": "string"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "User-facing description for this field. This description can be updated as needed. Descriptions are not shared with members.",
            "example": "Carrier for this member's insurance policy"
          },
          "member_access": {
            "type": "string",
            "enum": [
              "none",
              "read",
              "write"
            ],
            "description": "Access level that members should be granted to this field. By default, fields are created with member access level 'none', indicating they can not read or write ot the field. You may also use 'read', which will allow members to read field data, but not write. Alternatively, you can use 'write' which grants the member read/write access.",
            "example": "none"
          },
          "options": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "key": {
                  "type": "string"
                },
                "label": {
                  "type": "string"
                }
              },
              "required": [
                "key",
                "label"
              ]
            },
            "description": "A list of options available for this field. You can create and update an array of options, each with a unique key and a display label, in order to store discrete values within the field.",
            "example": [
              {
                "key": "aetna",
                "label": "Aetna"
              },
              {
                "key": "humana",
                "label": "Humana"
              }
            ]
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the field was created.",
            "example": "2021-05-13T16:33:00.000Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the field was last updated.",
            "example": "2021-05-13T16:33:00.000Z"
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the field was deleted, which is only present for deleted fields. Deleted fields are not typically returned by the API, however they are returned in `field.deleted` events and expanded references on other objects.",
            "example": "2021-05-13T16:33:00.000Z"
          }
        },
        "required": [
          "object",
          "id",
          "key",
          "name",
          "resource_type",
          "type",
          "description",
          "member_access",
          "options",
          "created_at",
          "updated_at"
        ],
        "title": "Field",
        "description": "The Fields API allows you to define custom fields to extend the default behavior of Source resources, such as members. Using Fields, you can store customer-defined attributes with each resource, eliminating the need to manage separate databases and storage systems when you have information that doesn't quite match to a pre-defined field.\n\nYou might use Fields to define the plan level to which a member is subscribed, information about the  specific care protocol they're on, or even just where they are in their treatment journey.",
        "x-resourceId": "field",
        "x-package": null
      },
      "file": {
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "default": "file",
            "enum": [
              "file"
            ],
            "example": "file",
            "description": "Always `file`."
          },
          "id": {
            "type": "string",
            "description": "Unique ID for the file.",
            "example": "file_gdIyXM9d4LKGnewOV4OM"
          },
          "purpose": {
            "type": "string",
            "enum": [
              "message_attachment",
              "photo",
              "user_profile_photo",
              "document",
              "comment_attachment",
              "account_logo",
              "location_photo"
            ],
            "description": "The purpose of this uploaded file. Each file is required to have a clearly defined purpose, which controls what types of uploads are allowed and where the file may be referenced.",
            "example": "message_attachment"
          },
          "name": {
            "type": "string",
            "description": "The filename of the file that was uploaded.",
            "example": "Health_Records_Release_Consent.pdf"
          },
          "mime_type": {
            "type": "string",
            "description": "The MIME type of the file that was uploaded.",
            "example": "application/pdf"
          },
          "size": {
            "type": "number",
            "description": "The size of the uploaded file in bytes.",
            "example": 5123456
          },
          "url": {
            "type": "string",
            "description": "Temporary URL that can be used to access the file. The URL contained in this field will be valid for 7 days. Once it has expired, you can re-request this resource to get a fresh URL.",
            "example": "https://files.fileserver.com/3T0x2MAZmnIngkcFO3O6.pdf"
          },
          "variants": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Variants represent different versions of a file (such as thumbnails). The variants available depend on the file's purpose. Files with the `photo` purpose will have variants.",
            "example": {
              "thumbnail": "https://example.com/source_thumb.jpeg"
            }
          },
          "url_expires_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the url to access the file expires",
            "example": "2021-05-13T16:33:00.000Z"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the file was uploaded.",
            "example": "2021-05-13T16:33:00.000Z"
          }
        },
        "required": [
          "object",
          "id",
          "purpose",
          "name",
          "mime_type",
          "size",
          "url",
          "variants",
          "url_expires_at",
          "created_at"
        ],
        "title": "File",
        "description": "This resource represents a file hosted on Source's servers. You can upload files to use throughout the platform, such as sending attachments on messages. Once a file has been uploaded, you can access it by accessing the `url` property of the file resource .",
        "x-resourceId": "file",
        "x-package": null
      },
      "form": {
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "default": "form",
            "enum": [
              "form"
            ],
            "example": "form",
            "description": "Always `form`."
          },
          "id": {
            "type": "string",
            "example": "form_hSGPOT5BMusNLwDI3Z4N",
            "description": "Unique ID for the form."
          },
          "key": {
            "type": "string",
            "description": "Unique key for this form. You can use this when creating form responses via the API. In order to avoid potential confusion when distinguishing between form IDs and form keys, keys must not start with `form_`.",
            "example": "intake"
          },
          "name": {
            "type": "string",
            "description": "Description of this form. This description will be shown to responders when attempting to respond to this form. While not required, it can be helpful to share details about the form's purpose.",
            "example": "Intake"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "Description of this form",
            "example": "Intake questionnaire to be filled out before first appointment."
          },
          "public": {
            "type": "boolean",
            "description": "Whether or not this form can be directly accessed by a public responder. For example, set public to true for a public-facing intake form that should be accessible to anyone.",
            "example": false
          },
          "published_version": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/form_version"
              }
            ],
            "x-expandable": {
              "$ref": "#/components/schemas/form_version"
            },
            "description": "The current published version of the form that new responses are created against. Automatically set to the latest published version when publishing a form version.",
            "example": "fv_ByJdV5tV3eJf6KRRfoGU",
            "nullable": true
          },
          "latest_version": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/form_version"
              }
            ],
            "x-expandable": {
              "$ref": "#/components/schemas/form_version"
            },
            "description": "Most recently created version of the form. Always the current draft version.",
            "example": "fv_ByJdV5tV3eJf6KRRfoGU",
            "nullable": true
          },
          "encounter_type": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/encounter_type"
              }
            ],
            "x-expandable": {
              "$ref": "#/components/schemas/encounter_type"
            },
            "description": "The encounter type for the encounter that Source creates automatically when a response to this form is submitted. If this field is null, an encounter is not created automatically for each form response.",
            "example": "entp_Al9BP6ZBzGmJy7A6EMU2",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the form was created.",
            "example": "2021-05-13T16:33:00.000Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the form was last updated.",
            "example": "2021-05-13T16:33:00.000Z"
          },
          "archived_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Timestamp when the form was archived.",
            "example": "2021-05-13T16:33:00.000Z"
          }
        },
        "required": [
          "object",
          "id",
          "key",
          "name",
          "description",
          "public",
          "published_version",
          "latest_version",
          "encounter_type",
          "created_at",
          "updated_at",
          "archived_at"
        ],
        "title": "Form",
        "description": "Forms are questionnaire tools that allow you to gather information of any kind from a responder. You can use forms to collect responses from members or from anonymous responders, such as during an intake workflow.\n\nEach form references one or more form versions, which contain the form's configuration and content. A form always has a single draft version that can be updated. Once published, a form version becomes the active version of a form, with which responders interact. Each time a form version is published, a new draft version is created. A published form version cannot be deleted or modified. To make a form with a published form version inaccessible for new responses, archive the form.",
        "x-resourceId": "form",
        "x-package": "forms"
      },
      "form_response": {
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "default": "form_response",
            "enum": [
              "form_response"
            ],
            "example": "form_response",
            "description": "Always `form_response`."
          },
          "id": {
            "type": "string",
            "example": "fr_mk29zZR6Qr5u5Q0BRHwu",
            "description": "Unique ID for the form response."
          },
          "author": {
            "type": "string",
            "description": "Author of this form response. Source infers the author from the actor who creates the response, such as the member ID for a response created using a member token.",
            "example": "mem_JAfPRRc59eh2YQ1aeL3D"
          },
          "member": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/member"
              }
            ],
            "x-expandable": {
              "$ref": "#/components/schemas/member"
            },
            "description": "Member to which the form response belongs. Members can only view responses that are associated with them or with a member whose data they are authorized to access via a relationship.",
            "example": "mem_JAfPRRc59eh2YQ1aeL3D",
            "nullable": true
          },
          "form": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/form"
              }
            ],
            "x-expandable": {
              "$ref": "#/components/schemas/form"
            },
            "description": "The form associated with this form response.",
            "example": "form_hSGPOT5BMusNLwDI3Z4N"
          },
          "form_version": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/form_version"
              }
            ],
            "x-expandable": {
              "$ref": "#/components/schemas/form_version"
            },
            "description": "The version of the form associated with this form response.  The form version associated with the response cannot be changed after creation. Any updates to this response relate to this same form version.",
            "example": "fv_ByJdV5tV3eJf6KRRfoGU"
          },
          "calculations": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "item": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "default": "calculation",
                      "enum": [
                        "calculation"
                      ],
                      "example": "calculation"
                    },
                    "key": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 255,
                      "pattern": "^[a-zA-Z0-9_]+$",
                      "description": "Unique key of this item within the form. Used in responses and conditional logic.",
                      "example": "demographics_name"
                    },
                    "title": {
                      "type": "string",
                      "description": "Display title of this question in the form, i.e. the question text itself.",
                      "example": "How do you feel today?"
                    },
                    "expression": {
                      "type": "string",
                      "description": "Formula that should be evaluated for this calculation",
                      "example": "IF(yes_no_question, \"True\", \"False\")"
                    },
                    "data_type": {
                      "type": "string",
                      "enum": [
                        "number",
                        "string",
                        "date",
                        "date_time"
                      ],
                      "description": "Expected data type returned from the formula",
                      "example": "string"
                    }
                  },
                  "required": [
                    "type",
                    "key",
                    "title",
                    "expression",
                    "data_type"
                  ],
                  "description": "A calculation to be performed on values within the form. This form node can be used to calculate a value for a field based on the values of questions or even other calculations."
                },
                "value": {}
              },
              "required": [
                "item",
                "value"
              ]
            },
            "description": "The individual responses that capture the author's answers to corresponding items within the form version."
          },
          "responses": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "item": {
                  "$ref": "#/components/schemas/Question"
                },
                "response": {},
                "value": {},
                "score": {
                  "type": "number",
                  "nullable": true
                }
              },
              "required": [
                "item",
                "response",
                "value",
                "score"
              ]
            },
            "description": "The individual responses that capture the author's answers to corresponding items within the form version."
          },
          "status": {
            "type": "string",
            "enum": [
              "not_started",
              "started",
              "completed"
            ],
            "description": "Current status of this form response. By default, newly created form responses use the 'started' status.  When a form is submitted, the status changes to 'completed'.",
            "example": "started"
          },
          "exit_screen": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "exit_screen",
                "enum": [
                  "exit_screen"
                ],
                "example": "exit_screen"
              },
              "key": {
                "type": "string",
                "description": "A unique key for this exit screen within the form. The keys are used in exits to indicate which screen is used for the exit. An exit screen with key 'default' must exist in every form.",
                "example": "ineligible_location"
              },
              "description": {
                "type": "string",
                "description": "A description of this exit screen. If the responder reaches this exit screen, the screen's description is displayed within the completed form response."
              },
              "content_type": {
                "type": "string",
                "enum": [
                  "md"
                ],
                "description": "Type of the rich text content. Currently only `md` (i.e. Markdown) is supported.",
                "example": "md"
              },
              "content": {
                "type": "string",
                "description": "The rich text content, represented as Markdown text.",
                "example": "# Thank You\n\nWe appreciate you completing this form.\n\nYour care team will be in touch."
              }
            },
            "required": [
              "type",
              "key",
              "description",
              "content_type",
              "content"
            ],
            "description": "The exit screen the author reached, if any. Forms support conditional exits that appear based on the author's responses. If the author reaches an exit during the response, the exit screen is specified here.",
            "nullable": true
          },
          "encounter": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/encounter"
              }
            ],
            "x-expandable": {
              "$ref": "#/components/schemas/encounter"
            },
            "description": "The identifier of the encounter to which this form response relates.  This field is returned when the form response is related to an undeleted encounter.",
            "example": "enc_05j8GyFykJwGI5pEyUmY",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the form response was created.",
            "example": "2021-05-13T16:33:00.000Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the form response was last updated.",
            "example": "2021-05-13T16:33:00.000Z"
          },
          "completed_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Timestamp when the form response was submitted.",
            "example": "2021-05-13T16:33:00.000Z"
          }
        },
        "required": [
          "object",
          "id",
          "author",
          "member",
          "form",
          "form_version",
          "calculations",
          "responses",
          "status",
          "exit_screen",
          "encounter",
          "created_at",
          "updated_at",
          "completed_at"
        ],
        "title": "Form Response",
        "description": "Form responses represent a collection of answers to a particular form version, optionally associated with a particular member.\n\nYou can create form responses to capture answers to a form by specifying the form to which the response relates. Source automatically relates the response to the form's current published version at the time you create the response. Note that a form response remains tied to a given form version, and updates to other versions of that form do not affect existing responses.\n\nForm responses support both responses created by members and those created by anonymous authors, such as during an intake workflow, before you have created a member in Source.  You can update an existing response with additional answers and optionally submit it in order to update its status.",
        "x-resourceId": "form_response",
        "x-package": "forms"
      },
      "form_version": {
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "default": "form_version",
            "enum": [
              "form_version"
            ],
            "example": "form_version",
            "description": "Always `form_version`."
          },
          "id": {
            "type": "string",
            "example": "fv_ByJdV5tV3eJf6KRRfoGU",
            "description": "Unique ID for the form version."
          },
          "form": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/form"
              }
            ],
            "x-expandable": {
              "$ref": "#/components/schemas/form"
            },
            "description": "Unique ID for the parent form of this form version.",
            "example": "form_hSGPOT5BMusNLwDI3Z4N"
          },
          "changelog": {
            "type": "string",
            "nullable": true,
            "description": "Description of changes within this form version. You can use the changelog to describe the updates you are making within this form version relative to previous versions. The changelog is not visible to members and responders to the form."
          },
          "version": {
            "type": "number",
            "description": "Version number of this form version. The version number is automatically incremented when you publish a form version and a new draft version is created."
          },
          "previous_version": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/form_version"
              }
            ],
            "x-expandable": {
              "$ref": "#/components/schemas/form_version"
            },
            "description": "The previous form version. You can expand the previous form version to view its contents and configuration without the need to look up the form version separately.",
            "example": "fv_ByJdV5tV3eJf6KRRfoGU",
            "nullable": true
          },
          "calculations": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "default": "calculation",
                  "enum": [
                    "calculation"
                  ],
                  "example": "calculation"
                },
                "key": {
                  "type": "string",
                  "minLength": 1,
                  "maxLength": 255,
                  "pattern": "^[a-zA-Z0-9_]+$",
                  "description": "Unique key of this item within the form. Used in responses and conditional logic.",
                  "example": "demographics_name"
                },
                "title": {
                  "type": "string",
                  "description": "Display title of this question in the form, i.e. the question text itself.",
                  "example": "How do you feel today?"
                },
                "expression": {
                  "type": "string",
                  "description": "Formula that should be evaluated for this calculation",
                  "example": "IF(yes_no_question, \"True\", \"False\")"
                },
                "data_type": {
                  "type": "string",
                  "enum": [
                    "number",
                    "string",
                    "date",
                    "date_time"
                  ],
                  "description": "Expected data type returned from the formula",
                  "example": "string"
                }
              },
              "required": [
                "type",
                "key",
                "title",
                "expression",
                "data_type"
              ],
              "description": "A calculation to be performed on values within the form. This form node can be used to calculate a value for a field based on the values of questions or even other calculations."
            }
          },
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "default": "page",
                  "enum": [
                    "page"
                  ],
                  "example": "page"
                },
                "items": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "default": "group",
                            "enum": [
                              "group"
                            ],
                            "example": "group"
                          },
                          "items": {
                            "type": "array",
                            "items": {
                              "oneOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "default": "rich_text",
                                      "enum": [
                                        "rich_text"
                                      ],
                                      "example": "rich_text"
                                    },
                                    "content_type": {
                                      "type": "string",
                                      "enum": [
                                        "md"
                                      ],
                                      "description": "Type of the rich text content. Currently only `md` (i.e. Markdown) is supported.",
                                      "example": "md"
                                    },
                                    "content": {
                                      "type": "string",
                                      "description": "The rich text content, represented as Markdown text.",
                                      "example": "# The Title\n\nA paragraph\n\n- List Item 1\n-List Item 2"
                                    },
                                    "key": {
                                      "type": "string",
                                      "minLength": 1,
                                      "maxLength": 255,
                                      "pattern": "^[a-zA-Z0-9_]+$",
                                      "description": "Unique key of this item within the form. Used in responses and conditional logic.",
                                      "example": "demographics_name"
                                    },
                                    "conditional": {
                                      "oneOf": [
                                        {
                                          "$ref": "#/components/schemas/CompoundConditional"
                                        }
                                      ],
                                      "x-wrapped": true,
                                      "description": "A conditional statement - if it evaluates to true, this question will be displayed, if false the question will not be displayed and no response will be recorded for it."
                                    }
                                  },
                                  "required": [
                                    "type",
                                    "content_type",
                                    "content",
                                    "key"
                                  ]
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "default": "name",
                                      "enum": [
                                        "name"
                                      ],
                                      "example": "name"
                                    },
                                    "title": {
                                      "type": "string",
                                      "description": "Display title of this question in the form, i.e. the question text itself.",
                                      "example": "How do you feel today?"
                                    },
                                    "description": {
                                      "type": "string",
                                      "description": "An optional secondary text for this question, which will be displayed under the title and can contain, for example, instructions on how to answer the question."
                                    },
                                    "required": {
                                      "type": "boolean",
                                      "description": "Whether a response to this question is required or optional. Questions that are hidden by conditional rules are never required to have a response."
                                    },
                                    "key": {
                                      "type": "string",
                                      "minLength": 1,
                                      "maxLength": 255,
                                      "pattern": "^[a-zA-Z0-9_]+$",
                                      "description": "Unique key of this item within the form. Used in responses and conditional logic.",
                                      "example": "demographics_name"
                                    },
                                    "conditional": {
                                      "oneOf": [
                                        {
                                          "$ref": "#/components/schemas/CompoundConditional"
                                        }
                                      ],
                                      "x-wrapped": true,
                                      "description": "A conditional statement - if it evaluates to true, this question will be displayed, if false the question will not be displayed and no response will be recorded for it."
                                    },
                                    "destination": {
                                      "type": "string",
                                      "enum": [
                                        "member.name"
                                      ],
                                      "description": "Indicates that the response from this question should be used to populate or update the member's name."
                                    },
                                    "fields": {
                                      "type": "object",
                                      "properties": {
                                        "preferred": {
                                          "type": "string",
                                          "enum": [
                                            "none",
                                            "optional",
                                            "required"
                                          ],
                                          "description": "Indicates whether the given sub-field should be displayed or not, and if so, whether a response is optional or required.",
                                          "example": "optional"
                                        }
                                      },
                                      "required": [
                                        "preferred"
                                      ],
                                      "description": "Indicates which fields are optional, required, or should not be shown at all."
                                    }
                                  },
                                  "required": [
                                    "type",
                                    "title",
                                    "required",
                                    "key",
                                    "fields"
                                  ],
                                  "description": "A question for recording a person's name. Source uses multiple fields for names: First, middle, and last names, and an optional 'preferred' name field which can be disabled."
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "default": "date",
                                      "enum": [
                                        "date"
                                      ],
                                      "example": "date"
                                    },
                                    "title": {
                                      "type": "string",
                                      "description": "Display title of this question in the form, i.e. the question text itself.",
                                      "example": "How do you feel today?"
                                    },
                                    "description": {
                                      "type": "string",
                                      "description": "An optional secondary text for this question, which will be displayed under the title and can contain, for example, instructions on how to answer the question."
                                    },
                                    "required": {
                                      "type": "boolean",
                                      "description": "Whether a response to this question is required or optional. Questions that are hidden by conditional rules are never required to have a response."
                                    },
                                    "key": {
                                      "type": "string",
                                      "minLength": 1,
                                      "maxLength": 255,
                                      "pattern": "^[a-zA-Z0-9_]+$",
                                      "description": "Unique key of this item within the form. Used in responses and conditional logic.",
                                      "example": "demographics_name"
                                    },
                                    "conditional": {
                                      "oneOf": [
                                        {
                                          "$ref": "#/components/schemas/CompoundConditional"
                                        }
                                      ],
                                      "x-wrapped": true,
                                      "description": "A conditional statement - if it evaluates to true, this question will be displayed, if false the question will not be displayed and no response will be recorded for it."
                                    },
                                    "destination": {
                                      "type": "string",
                                      "enum": [
                                        "member.date_of_birth"
                                      ],
                                      "description": "Indicates that the response from this question should be used to populate or update the member's date of birth."
                                    },
                                    "input_type": {
                                      "type": "string",
                                      "enum": [
                                        "date_picker",
                                        "date_entry"
                                      ],
                                      "description": "Which type of UI element to use - a calendar-style date picker or direct keyboard entry input box."
                                    }
                                  },
                                  "required": [
                                    "type",
                                    "title",
                                    "required",
                                    "key",
                                    "input_type"
                                  ],
                                  "description": "A question for recording a date. You can choose from two types of date input: one with a calendar-style date picker, intended for dates around the current date; and another designed for keyboard input, such as for historical dates like dates of birth."
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "default": "address",
                                      "enum": [
                                        "address"
                                      ],
                                      "example": "address"
                                    },
                                    "title": {
                                      "type": "string",
                                      "description": "Display title of this question in the form, i.e. the question text itself.",
                                      "example": "How do you feel today?"
                                    },
                                    "description": {
                                      "type": "string",
                                      "description": "An optional secondary text for this question, which will be displayed under the title and can contain, for example, instructions on how to answer the question."
                                    },
                                    "required": {
                                      "type": "boolean",
                                      "description": "Whether a response to this question is required or optional. Questions that are hidden by conditional rules are never required to have a response."
                                    },
                                    "key": {
                                      "type": "string",
                                      "minLength": 1,
                                      "maxLength": 255,
                                      "pattern": "^[a-zA-Z0-9_]+$",
                                      "description": "Unique key of this item within the form. Used in responses and conditional logic.",
                                      "example": "demographics_name"
                                    },
                                    "conditional": {
                                      "oneOf": [
                                        {
                                          "$ref": "#/components/schemas/CompoundConditional"
                                        }
                                      ],
                                      "x-wrapped": true,
                                      "description": "A conditional statement - if it evaluates to true, this question will be displayed, if false the question will not be displayed and no response will be recorded for it."
                                    },
                                    "destination": {
                                      "type": "string",
                                      "enum": [
                                        "member.address"
                                      ],
                                      "description": "Indicates that the response from this question should be used to populate or update the member's address."
                                    },
                                    "fields": {
                                      "type": "object",
                                      "properties": {
                                        "street_line_1": {
                                          "type": "string",
                                          "enum": [
                                            "none",
                                            "optional",
                                            "required"
                                          ],
                                          "description": "Indicates whether the given sub-field should be displayed or not, and if so, whether a response is optional or required.",
                                          "example": "optional"
                                        },
                                        "street_line_2": {
                                          "type": "string",
                                          "enum": [
                                            "none",
                                            "optional",
                                            "required"
                                          ],
                                          "description": "Indicates whether the given sub-field should be displayed or not, and if so, whether a response is optional or required.",
                                          "example": "optional"
                                        },
                                        "city": {
                                          "type": "string",
                                          "enum": [
                                            "none",
                                            "optional",
                                            "required"
                                          ],
                                          "description": "Indicates whether the given sub-field should be displayed or not, and if so, whether a response is optional or required.",
                                          "example": "optional"
                                        },
                                        "postal_code": {
                                          "type": "string",
                                          "enum": [
                                            "none",
                                            "optional",
                                            "required"
                                          ],
                                          "description": "Indicates whether the given sub-field should be displayed or not, and if so, whether a response is optional or required.",
                                          "example": "optional"
                                        }
                                      },
                                      "required": [
                                        "street_line_1",
                                        "street_line_2",
                                        "city",
                                        "postal_code"
                                      ],
                                      "description": "Indicates which fields are optional, required, or should not be shown at all."
                                    }
                                  },
                                  "required": [
                                    "type",
                                    "title",
                                    "required",
                                    "key",
                                    "fields"
                                  ],
                                  "description": "A question for recording an address. Source uses multiple fields for addresses: `region` (corresponding to US state) is required, and the others can be configured as optional, required, or not shown at all."
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "default": "gender_identity",
                                      "enum": [
                                        "gender_identity"
                                      ],
                                      "example": "gender_identity"
                                    },
                                    "title": {
                                      "type": "string",
                                      "description": "Display title of this question in the form, i.e. the question text itself.",
                                      "example": "How do you feel today?"
                                    },
                                    "description": {
                                      "type": "string",
                                      "description": "An optional secondary text for this question, which will be displayed under the title and can contain, for example, instructions on how to answer the question."
                                    },
                                    "required": {
                                      "type": "boolean",
                                      "description": "Whether a response to this question is required or optional. Questions that are hidden by conditional rules are never required to have a response."
                                    },
                                    "key": {
                                      "type": "string",
                                      "minLength": 1,
                                      "maxLength": 255,
                                      "pattern": "^[a-zA-Z0-9_]+$",
                                      "description": "Unique key of this item within the form. Used in responses and conditional logic.",
                                      "example": "demographics_name"
                                    },
                                    "conditional": {
                                      "oneOf": [
                                        {
                                          "$ref": "#/components/schemas/CompoundConditional"
                                        }
                                      ],
                                      "x-wrapped": true,
                                      "description": "A conditional statement - if it evaluates to true, this question will be displayed, if false the question will not be displayed and no response will be recorded for it."
                                    },
                                    "destination": {
                                      "type": "string",
                                      "enum": [
                                        "member.gender_identity"
                                      ],
                                      "description": "Indicates that the response from this question should be used to populate or update the member's gender identity. See also: sex at birth, pronouns."
                                    }
                                  },
                                  "required": [
                                    "type",
                                    "title",
                                    "required",
                                    "key"
                                  ],
                                  "description": "A question for recording a gender identity. Source supports selecting between some standardized values or entering a user-generated text response."
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "default": "sex_at_birth",
                                      "enum": [
                                        "sex_at_birth"
                                      ],
                                      "example": "sex_at_birth"
                                    },
                                    "title": {
                                      "type": "string",
                                      "description": "Display title of this question in the form, i.e. the question text itself.",
                                      "example": "How do you feel today?"
                                    },
                                    "description": {
                                      "type": "string",
                                      "description": "An optional secondary text for this question, which will be displayed under the title and can contain, for example, instructions on how to answer the question."
                                    },
                                    "required": {
                                      "type": "boolean",
                                      "description": "Whether a response to this question is required or optional. Questions that are hidden by conditional rules are never required to have a response."
                                    },
                                    "key": {
                                      "type": "string",
                                      "minLength": 1,
                                      "maxLength": 255,
                                      "pattern": "^[a-zA-Z0-9_]+$",
                                      "description": "Unique key of this item within the form. Used in responses and conditional logic.",
                                      "example": "demographics_name"
                                    },
                                    "conditional": {
                                      "oneOf": [
                                        {
                                          "$ref": "#/components/schemas/CompoundConditional"
                                        }
                                      ],
                                      "x-wrapped": true,
                                      "description": "A conditional statement - if it evaluates to true, this question will be displayed, if false the question will not be displayed and no response will be recorded for it."
                                    },
                                    "destination": {
                                      "type": "string",
                                      "enum": [
                                        "member.sex_at_birth"
                                      ],
                                      "description": "Indicates that the response from this question should be used to populate or update the member's sex at birth."
                                    }
                                  },
                                  "required": [
                                    "type",
                                    "title",
                                    "required",
                                    "key"
                                  ],
                                  "description": "A question for recording person's birth sex, which is a selection between standardized values only. See also: gender identity."
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "default": "pronouns",
                                      "enum": [
                                        "pronouns"
                                      ],
                                      "example": "pronouns"
                                    },
                                    "title": {
                                      "type": "string",
                                      "description": "Display title of this question in the form, i.e. the question text itself.",
                                      "example": "How do you feel today?"
                                    },
                                    "description": {
                                      "type": "string",
                                      "description": "An optional secondary text for this question, which will be displayed under the title and can contain, for example, instructions on how to answer the question."
                                    },
                                    "required": {
                                      "type": "boolean",
                                      "description": "Whether a response to this question is required or optional. Questions that are hidden by conditional rules are never required to have a response."
                                    },
                                    "key": {
                                      "type": "string",
                                      "minLength": 1,
                                      "maxLength": 255,
                                      "pattern": "^[a-zA-Z0-9_]+$",
                                      "description": "Unique key of this item within the form. Used in responses and conditional logic.",
                                      "example": "demographics_name"
                                    },
                                    "conditional": {
                                      "oneOf": [
                                        {
                                          "$ref": "#/components/schemas/CompoundConditional"
                                        }
                                      ],
                                      "x-wrapped": true,
                                      "description": "A conditional statement - if it evaluates to true, this question will be displayed, if false the question will not be displayed and no response will be recorded for it."
                                    },
                                    "destination": {
                                      "type": "string",
                                      "enum": [
                                        "member.pronouns"
                                      ],
                                      "description": "Indicates that the response from this question should be used to populate or update the member's pronouns."
                                    }
                                  },
                                  "required": [
                                    "type",
                                    "title",
                                    "required",
                                    "key"
                                  ],
                                  "description": "A question for recording a person's pronouns. Source supports selecting between some standardized values or entering a user-generated text response. See also: gender identity."
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "default": "phone_numbers",
                                      "enum": [
                                        "phone_numbers"
                                      ],
                                      "example": "phone_numbers"
                                    },
                                    "title": {
                                      "type": "string",
                                      "description": "Display title of this question in the form, i.e. the question text itself.",
                                      "example": "How do you feel today?"
                                    },
                                    "description": {
                                      "type": "string",
                                      "description": "An optional secondary text for this question, which will be displayed under the title and can contain, for example, instructions on how to answer the question."
                                    },
                                    "required": {
                                      "type": "boolean",
                                      "description": "Whether a response to this question is required or optional. Questions that are hidden by conditional rules are never required to have a response."
                                    },
                                    "key": {
                                      "type": "string",
                                      "minLength": 1,
                                      "maxLength": 255,
                                      "pattern": "^[a-zA-Z0-9_]+$",
                                      "description": "Unique key of this item within the form. Used in responses and conditional logic.",
                                      "example": "demographics_name"
                                    },
                                    "conditional": {
                                      "oneOf": [
                                        {
                                          "$ref": "#/components/schemas/CompoundConditional"
                                        }
                                      ],
                                      "x-wrapped": true,
                                      "description": "A conditional statement - if it evaluates to true, this question will be displayed, if false the question will not be displayed and no response will be recorded for it."
                                    },
                                    "destination": {
                                      "type": "string",
                                      "enum": [
                                        "member.phone_numbers"
                                      ],
                                      "description": "Indicates that the response from this question should be used to populate or update the member's phone numbers."
                                    },
                                    "allowed_uses": {
                                      "type": "array",
                                      "items": {
                                        "type": "string",
                                        "enum": [
                                          "home",
                                          "work",
                                          "mobile",
                                          "fax",
                                          "other"
                                        ]
                                      },
                                      "description": "Control which 'use' values are allowed (e.g. 'mobile', or 'fax').",
                                      "example": [
                                        "home",
                                        "work",
                                        "mobile",
                                        "fax",
                                        "other"
                                      ]
                                    },
                                    "max": {
                                      "type": "number",
                                      "description": "The maximum number of phone numbers that can be collected.",
                                      "example": 5
                                    }
                                  },
                                  "required": [
                                    "type",
                                    "title",
                                    "required",
                                    "key",
                                    "allowed_uses",
                                    "max"
                                  ],
                                  "description": "A question for recording phone numbers. Source supports multiple phone numbers for a member, and requires a 'use' value for each number (e.g. mobile, work, or fax.)"
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "default": "free_text",
                                      "enum": [
                                        "free_text"
                                      ],
                                      "example": "free_text"
                                    },
                                    "title": {
                                      "type": "string",
                                      "description": "Display title of this question in the form, i.e. the question text itself.",
                                      "example": "How do you feel today?"
                                    },
                                    "description": {
                                      "type": "string",
                                      "description": "An optional secondary text for this question, which will be displayed under the title and can contain, for example, instructions on how to answer the question."
                                    },
                                    "required": {
                                      "type": "boolean",
                                      "description": "Whether a response to this question is required or optional. Questions that are hidden by conditional rules are never required to have a response."
                                    },
                                    "key": {
                                      "type": "string",
                                      "minLength": 1,
                                      "maxLength": 255,
                                      "pattern": "^[a-zA-Z0-9_]+$",
                                      "description": "Unique key of this item within the form. Used in responses and conditional logic.",
                                      "example": "demographics_name"
                                    },
                                    "conditional": {
                                      "oneOf": [
                                        {
                                          "$ref": "#/components/schemas/CompoundConditional"
                                        }
                                      ],
                                      "x-wrapped": true,
                                      "description": "A conditional statement - if it evaluates to true, this question will be displayed, if false the question will not be displayed and no response will be recorded for it."
                                    }
                                  },
                                  "required": [
                                    "type",
                                    "title",
                                    "required",
                                    "key"
                                  ],
                                  "description": "A question type for recording free text responses in a single line of plain text."
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "default": "long_text",
                                      "enum": [
                                        "long_text"
                                      ],
                                      "example": "long_text"
                                    },
                                    "title": {
                                      "type": "string",
                                      "description": "Display title of this question in the form, i.e. the question text itself.",
                                      "example": "How do you feel today?"
                                    },
                                    "description": {
                                      "type": "string",
                                      "description": "An optional secondary text for this question, which will be displayed under the title and can contain, for example, instructions on how to answer the question."
                                    },
                                    "required": {
                                      "type": "boolean",
                                      "description": "Whether a response to this question is required or optional. Questions that are hidden by conditional rules are never required to have a response."
                                    },
                                    "key": {
                                      "type": "string",
                                      "minLength": 1,
                                      "maxLength": 255,
                                      "pattern": "^[a-zA-Z0-9_]+$",
                                      "description": "Unique key of this item within the form. Used in responses and conditional logic.",
                                      "example": "demographics_name"
                                    },
                                    "conditional": {
                                      "oneOf": [
                                        {
                                          "$ref": "#/components/schemas/CompoundConditional"
                                        }
                                      ],
                                      "x-wrapped": true,
                                      "description": "A conditional statement - if it evaluates to true, this question will be displayed, if false the question will not be displayed and no response will be recorded for it."
                                    }
                                  },
                                  "required": [
                                    "type",
                                    "title",
                                    "required",
                                    "key"
                                  ],
                                  "description": "A question type for recording free text responses in a text area suitable for paragraphs."
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "default": "number",
                                      "enum": [
                                        "number"
                                      ],
                                      "example": "number"
                                    },
                                    "title": {
                                      "type": "string",
                                      "description": "Display title of this question in the form, i.e. the question text itself.",
                                      "example": "How do you feel today?"
                                    },
                                    "description": {
                                      "type": "string",
                                      "description": "An optional secondary text for this question, which will be displayed under the title and can contain, for example, instructions on how to answer the question."
                                    },
                                    "required": {
                                      "type": "boolean",
                                      "description": "Whether a response to this question is required or optional. Questions that are hidden by conditional rules are never required to have a response."
                                    },
                                    "key": {
                                      "type": "string",
                                      "minLength": 1,
                                      "maxLength": 255,
                                      "pattern": "^[a-zA-Z0-9_]+$",
                                      "description": "Unique key of this item within the form. Used in responses and conditional logic.",
                                      "example": "demographics_name"
                                    },
                                    "conditional": {
                                      "oneOf": [
                                        {
                                          "$ref": "#/components/schemas/CompoundConditional"
                                        }
                                      ],
                                      "x-wrapped": true,
                                      "description": "A conditional statement - if it evaluates to true, this question will be displayed, if false the question will not be displayed and no response will be recorded for it."
                                    },
                                    "min": {
                                      "type": "number",
                                      "nullable": true,
                                      "description": "Control the minimum allowed value"
                                    },
                                    "max": {
                                      "type": "number",
                                      "nullable": true,
                                      "description": "Control the maximum allowed value"
                                    }
                                  },
                                  "required": [
                                    "type",
                                    "title",
                                    "required",
                                    "key"
                                  ],
                                  "description": "A question type for recording numerical responses as a single number, either an integer or decimal."
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "default": "single_select",
                                      "enum": [
                                        "single_select"
                                      ],
                                      "example": "single_select"
                                    },
                                    "title": {
                                      "type": "string",
                                      "description": "Display title of this question in the form, i.e. the question text itself.",
                                      "example": "How do you feel today?"
                                    },
                                    "description": {
                                      "type": "string",
                                      "description": "An optional secondary text for this question, which will be displayed under the title and can contain, for example, instructions on how to answer the question."
                                    },
                                    "required": {
                                      "type": "boolean",
                                      "description": "Whether a response to this question is required or optional. Questions that are hidden by conditional rules are never required to have a response."
                                    },
                                    "key": {
                                      "type": "string",
                                      "minLength": 1,
                                      "maxLength": 255,
                                      "pattern": "^[a-zA-Z0-9_]+$",
                                      "description": "Unique key of this item within the form. Used in responses and conditional logic.",
                                      "example": "demographics_name"
                                    },
                                    "conditional": {
                                      "oneOf": [
                                        {
                                          "$ref": "#/components/schemas/CompoundConditional"
                                        }
                                      ],
                                      "x-wrapped": true,
                                      "description": "A conditional statement - if it evaluates to true, this question will be displayed, if false the question will not be displayed and no response will be recorded for it."
                                    },
                                    "options": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "key": {
                                            "type": "string",
                                            "description": "Hidden 'key' for this option. Must be unique within the question."
                                          },
                                          "label": {
                                            "type": "string",
                                            "description": "Display label for this option. Must be unique within the question."
                                          },
                                          "score": {
                                            "type": "number"
                                          }
                                        },
                                        "required": [
                                          "key",
                                          "label"
                                        ],
                                        "description": "Describes an option within a single- or multi-select input."
                                      },
                                      "description": "The list of options available for this question."
                                    },
                                    "other": {
                                      "type": "object",
                                      "properties": {
                                        "label": {
                                          "type": "string",
                                          "description": "Display label for the 'other' option.",
                                          "example": "Other (please tell us where)"
                                        },
                                        "required": {
                                          "type": "boolean",
                                          "description": "Whether or not a response to the free-text input is required if the responder selected 'other'",
                                          "example": false
                                        }
                                      },
                                      "required": [
                                        "label",
                                        "required"
                                      ],
                                      "description": "Controls whether a user-generated 'other' free text field is offered, and whether a free text response is required. If this object is blank or null, no 'other' option is presented.",
                                      "nullable": true,
                                      "example": null
                                    },
                                    "input_type": {
                                      "type": "string",
                                      "enum": [
                                        "radio",
                                        "drop_down"
                                      ],
                                      "description": "Control the input type of the single-select question.",
                                      "example": "drop_down"
                                    },
                                    "scoring_method": {
                                      "type": "string",
                                      "enum": [
                                        "none",
                                        "max"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "type",
                                    "title",
                                    "required",
                                    "key",
                                    "options",
                                    "input_type"
                                  ],
                                  "description": "A question type for recording a single choice between provided options. Using the 'other' config, this question can optionally include a user-entered 'other' option."
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "default": "multi_select",
                                      "enum": [
                                        "multi_select"
                                      ],
                                      "example": "multi_select"
                                    },
                                    "title": {
                                      "type": "string",
                                      "description": "Display title of this question in the form, i.e. the question text itself.",
                                      "example": "How do you feel today?"
                                    },
                                    "description": {
                                      "type": "string",
                                      "description": "An optional secondary text for this question, which will be displayed under the title and can contain, for example, instructions on how to answer the question."
                                    },
                                    "required": {
                                      "type": "boolean",
                                      "description": "Whether a response to this question is required or optional. Questions that are hidden by conditional rules are never required to have a response."
                                    },
                                    "key": {
                                      "type": "string",
                                      "minLength": 1,
                                      "maxLength": 255,
                                      "pattern": "^[a-zA-Z0-9_]+$",
                                      "description": "Unique key of this item within the form. Used in responses and conditional logic.",
                                      "example": "demographics_name"
                                    },
                                    "conditional": {
                                      "oneOf": [
                                        {
                                          "$ref": "#/components/schemas/CompoundConditional"
                                        }
                                      ],
                                      "x-wrapped": true,
                                      "description": "A conditional statement - if it evaluates to true, this question will be displayed, if false the question will not be displayed and no response will be recorded for it."
                                    },
                                    "options": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "key": {
                                            "type": "string",
                                            "description": "Hidden 'key' for this option. Must be unique within the question."
                                          },
                                          "label": {
                                            "type": "string",
                                            "description": "Display label for this option. Must be unique within the question."
                                          },
                                          "score": {
                                            "type": "number"
                                          }
                                        },
                                        "required": [
                                          "key",
                                          "label"
                                        ],
                                        "description": "Describes an option within a single- or multi-select input."
                                      },
                                      "description": "The list of options available for this question."
                                    },
                                    "other": {
                                      "type": "object",
                                      "properties": {
                                        "label": {
                                          "type": "string",
                                          "description": "Display label for the 'other' option.",
                                          "example": "Other (please tell us where)"
                                        },
                                        "required": {
                                          "type": "boolean",
                                          "description": "Whether or not a response to the free-text input is required if the responder selected 'other'",
                                          "example": false
                                        }
                                      },
                                      "required": [
                                        "label",
                                        "required"
                                      ],
                                      "description": "Controls whether user-generated 'other' free text fields is offered, and whether at least one free text response is required. If this object is blank or null, no 'other' option is presented.",
                                      "nullable": true,
                                      "example": null
                                    },
                                    "input_type": {
                                      "type": "string",
                                      "enum": [
                                        "checkbox"
                                      ],
                                      "description": "Control the input type of the multi-select question.",
                                      "example": "checkbox"
                                    },
                                    "scoring_method": {
                                      "type": "string",
                                      "enum": [
                                        "none",
                                        "max",
                                        "sum"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "type",
                                    "title",
                                    "required",
                                    "key",
                                    "options",
                                    "input_type"
                                  ],
                                  "description": "A question type for recording a multiple choices among provided options. Using the 'other' config, this question can optionally include one or more user-generated 'other' options."
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "default": "yes_no",
                                      "enum": [
                                        "yes_no"
                                      ],
                                      "example": "yes_no"
                                    },
                                    "title": {
                                      "type": "string",
                                      "description": "Display title of this question in the form, i.e. the question text itself.",
                                      "example": "How do you feel today?"
                                    },
                                    "description": {
                                      "type": "string",
                                      "description": "An optional secondary text for this question, which will be displayed under the title and can contain, for example, instructions on how to answer the question."
                                    },
                                    "required": {
                                      "type": "boolean",
                                      "description": "Whether a response to this question is required or optional. Questions that are hidden by conditional rules are never required to have a response."
                                    },
                                    "key": {
                                      "type": "string",
                                      "minLength": 1,
                                      "maxLength": 255,
                                      "pattern": "^[a-zA-Z0-9_]+$",
                                      "description": "Unique key of this item within the form. Used in responses and conditional logic.",
                                      "example": "demographics_name"
                                    },
                                    "conditional": {
                                      "oneOf": [
                                        {
                                          "$ref": "#/components/schemas/CompoundConditional"
                                        }
                                      ],
                                      "x-wrapped": true,
                                      "description": "A conditional statement - if it evaluates to true, this question will be displayed, if false the question will not be displayed and no response will be recorded for it."
                                    },
                                    "labels": {
                                      "type": "object",
                                      "properties": {
                                        "yes": {
                                          "type": "string",
                                          "nullable": true,
                                          "description": "Display label for the 'yes' option.",
                                          "example": "True"
                                        },
                                        "no": {
                                          "type": "string",
                                          "nullable": true,
                                          "description": "Display label for the 'no' option.",
                                          "example": "False"
                                        }
                                      },
                                      "nullable": true,
                                      "description": "Display labels for the yes or no options."
                                    }
                                  },
                                  "required": [
                                    "type",
                                    "title",
                                    "required",
                                    "key"
                                  ],
                                  "description": "A question type for recording a discrete yes or no response."
                                }
                              ],
                              "discriminator": {
                                "propertyName": "type"
                              }
                            },
                            "description": "Array of form items, such as questions and display elements."
                          },
                          "key": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 255,
                            "pattern": "^[a-zA-Z0-9_]+$",
                            "description": "Unique key of this item within the form. Used in responses and conditional logic.",
                            "example": "demographics_name"
                          },
                          "conditional": {
                            "oneOf": [
                              {
                                "$ref": "#/components/schemas/CompoundConditional"
                              }
                            ],
                            "x-wrapped": true,
                            "description": "A conditional statement - if it evaluates to true, this question will be displayed, if false the question will not be displayed and no response will be recorded for it."
                          }
                        },
                        "required": [
                          "type",
                          "items",
                          "key"
                        ],
                        "description": "A group within a form is used to apply a conditional display to a group of questions and display elements. One common use for groups is to ask one question and then a series of follow-up questions for certain responses to the first question.\n\nGroups cannot span multiple pages nor contain other groups."
                      },
                      {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "default": "rich_text",
                            "enum": [
                              "rich_text"
                            ],
                            "example": "rich_text"
                          },
                          "content_type": {
                            "type": "string",
                            "enum": [
                              "md"
                            ],
                            "description": "Type of the rich text content. Currently only `md` (i.e. Markdown) is supported.",
                            "example": "md"
                          },
                          "content": {
                            "type": "string",
                            "description": "The rich text content, represented as Markdown text.",
                            "example": "# The Title\n\nA paragraph\n\n- List Item 1\n-List Item 2"
                          },
                          "key": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 255,
                            "pattern": "^[a-zA-Z0-9_]+$",
                            "description": "Unique key of this item within the form. Used in responses and conditional logic.",
                            "example": "demographics_name"
                          },
                          "conditional": {
                            "oneOf": [
                              {
                                "$ref": "#/components/schemas/CompoundConditional"
                              }
                            ],
                            "x-wrapped": true,
                            "description": "A conditional statement - if it evaluates to true, this question will be displayed, if false the question will not be displayed and no response will be recorded for it."
                          }
                        },
                        "required": [
                          "type",
                          "content_type",
                          "content",
                          "key"
                        ]
                      },
                      {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "default": "name",
                            "enum": [
                              "name"
                            ],
                            "example": "name"
                          },
                          "title": {
                            "type": "string",
                            "description": "Display title of this question in the form, i.e. the question text itself.",
                            "example": "How do you feel today?"
                          },
                          "description": {
                            "type": "string",
                            "description": "An optional secondary text for this question, which will be displayed under the title and can contain, for example, instructions on how to answer the question."
                          },
                          "required": {
                            "type": "boolean",
                            "description": "Whether a response to this question is required or optional. Questions that are hidden by conditional rules are never required to have a response."
                          },
                          "key": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 255,
                            "pattern": "^[a-zA-Z0-9_]+$",
                            "description": "Unique key of this item within the form. Used in responses and conditional logic.",
                            "example": "demographics_name"
                          },
                          "conditional": {
                            "oneOf": [
                              {
                                "$ref": "#/components/schemas/CompoundConditional"
                              }
                            ],
                            "x-wrapped": true,
                            "description": "A conditional statement - if it evaluates to true, this question will be displayed, if false the question will not be displayed and no response will be recorded for it."
                          },
                          "destination": {
                            "type": "string",
                            "enum": [
                              "member.name"
                            ],
                            "description": "Indicates that the response from this question should be used to populate or update the member's name."
                          },
                          "fields": {
                            "type": "object",
                            "properties": {
                              "preferred": {
                                "type": "string",
                                "enum": [
                                  "none",
                                  "optional",
                                  "required"
                                ],
                                "description": "Indicates whether the given sub-field should be displayed or not, and if so, whether a response is optional or required.",
                                "example": "optional"
                              }
                            },
                            "required": [
                              "preferred"
                            ],
                            "description": "Indicates which fields are optional, required, or should not be shown at all."
                          }
                        },
                        "required": [
                          "type",
                          "title",
                          "required",
                          "key",
                          "fields"
                        ],
                        "description": "A question for recording a person's name. Source uses multiple fields for names: First, middle, and last names, and an optional 'preferred' name field which can be disabled."
                      },
                      {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "default": "date",
                            "enum": [
                              "date"
                            ],
                            "example": "date"
                          },
                          "title": {
                            "type": "string",
                            "description": "Display title of this question in the form, i.e. the question text itself.",
                            "example": "How do you feel today?"
                          },
                          "description": {
                            "type": "string",
                            "description": "An optional secondary text for this question, which will be displayed under the title and can contain, for example, instructions on how to answer the question."
                          },
                          "required": {
                            "type": "boolean",
                            "description": "Whether a response to this question is required or optional. Questions that are hidden by conditional rules are never required to have a response."
                          },
                          "key": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 255,
                            "pattern": "^[a-zA-Z0-9_]+$",
                            "description": "Unique key of this item within the form. Used in responses and conditional logic.",
                            "example": "demographics_name"
                          },
                          "conditional": {
                            "oneOf": [
                              {
                                "$ref": "#/components/schemas/CompoundConditional"
                              }
                            ],
                            "x-wrapped": true,
                            "description": "A conditional statement - if it evaluates to true, this question will be displayed, if false the question will not be displayed and no response will be recorded for it."
                          },
                          "destination": {
                            "type": "string",
                            "enum": [
                              "member.date_of_birth"
                            ],
                            "description": "Indicates that the response from this question should be used to populate or update the member's date of birth."
                          },
                          "input_type": {
                            "type": "string",
                            "enum": [
                              "date_picker",
                              "date_entry"
                            ],
                            "description": "Which type of UI element to use - a calendar-style date picker or direct keyboard entry input box."
                          }
                        },
                        "required": [
                          "type",
                          "title",
                          "required",
                          "key",
                          "input_type"
                        ],
                        "description": "A question for recording a date. You can choose from two types of date input: one with a calendar-style date picker, intended for dates around the current date; and another designed for keyboard input, such as for historical dates like dates of birth."
                      },
                      {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "default": "address",
                            "enum": [
                              "address"
                            ],
                            "example": "address"
                          },
                          "title": {
                            "type": "string",
                            "description": "Display title of this question in the form, i.e. the question text itself.",
                            "example": "How do you feel today?"
                          },
                          "description": {
                            "type": "string",
                            "description": "An optional secondary text for this question, which will be displayed under the title and can contain, for example, instructions on how to answer the question."
                          },
                          "required": {
                            "type": "boolean",
                            "description": "Whether a response to this question is required or optional. Questions that are hidden by conditional rules are never required to have a response."
                          },
                          "key": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 255,
                            "pattern": "^[a-zA-Z0-9_]+$",
                            "description": "Unique key of this item within the form. Used in responses and conditional logic.",
                            "example": "demographics_name"
                          },
                          "conditional": {
                            "oneOf": [
                              {
                                "$ref": "#/components/schemas/CompoundConditional"
                              }
                            ],
                            "x-wrapped": true,
                            "description": "A conditional statement - if it evaluates to true, this question will be displayed, if false the question will not be displayed and no response will be recorded for it."
                          },
                          "destination": {
                            "type": "string",
                            "enum": [
                              "member.address"
                            ],
                            "description": "Indicates that the response from this question should be used to populate or update the member's address."
                          },
                          "fields": {
                            "type": "object",
                            "properties": {
                              "street_line_1": {
                                "type": "string",
                                "enum": [
                                  "none",
                                  "optional",
                                  "required"
                                ],
                                "description": "Indicates whether the given sub-field should be displayed or not, and if so, whether a response is optional or required.",
                                "example": "optional"
                              },
                              "street_line_2": {
                                "type": "string",
                                "enum": [
                                  "none",
                                  "optional",
                                  "required"
                                ],
                                "description": "Indicates whether the given sub-field should be displayed or not, and if so, whether a response is optional or required.",
                                "example": "optional"
                              },
                              "city": {
                                "type": "string",
                                "enum": [
                                  "none",
                                  "optional",
                                  "required"
                                ],
                                "description": "Indicates whether the given sub-field should be displayed or not, and if so, whether a response is optional or required.",
                                "example": "optional"
                              },
                              "postal_code": {
                                "type": "string",
                                "enum": [
                                  "none",
                                  "optional",
                                  "required"
                                ],
                                "description": "Indicates whether the given sub-field should be displayed or not, and if so, whether a response is optional or required.",
                                "example": "optional"
                              }
                            },
                            "required": [
                              "street_line_1",
                              "street_line_2",
                              "city",
                              "postal_code"
                            ],
                            "description": "Indicates which fields are optional, required, or should not be shown at all."
                          }
                        },
                        "required": [
                          "type",
                          "title",
                          "required",
                          "key",
                          "fields"
                        ],
                        "description": "A question for recording an address. Source uses multiple fields for addresses: `region` (corresponding to US state) is required, and the others can be configured as optional, required, or not shown at all."
                      },
                      {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "default": "gender_identity",
                            "enum": [
                              "gender_identity"
                            ],
                            "example": "gender_identity"
                          },
                          "title": {
                            "type": "string",
                            "description": "Display title of this question in the form, i.e. the question text itself.",
                            "example": "How do you feel today?"
                          },
                          "description": {
                            "type": "string",
                            "description": "An optional secondary text for this question, which will be displayed under the title and can contain, for example, instructions on how to answer the question."
                          },
                          "required": {
                            "type": "boolean",
                            "description": "Whether a response to this question is required or optional. Questions that are hidden by conditional rules are never required to have a response."
                          },
                          "key": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 255,
                            "pattern": "^[a-zA-Z0-9_]+$",
                            "description": "Unique key of this item within the form. Used in responses and conditional logic.",
                            "example": "demographics_name"
                          },
                          "conditional": {
                            "oneOf": [
                              {
                                "$ref": "#/components/schemas/CompoundConditional"
                              }
                            ],
                            "x-wrapped": true,
                            "description": "A conditional statement - if it evaluates to true, this question will be displayed, if false the question will not be displayed and no response will be recorded for it."
                          },
                          "destination": {
                            "type": "string",
                            "enum": [
                              "member.gender_identity"
                            ],
                            "description": "Indicates that the response from this question should be used to populate or update the member's gender identity. See also: sex at birth, pronouns."
                          }
                        },
                        "required": [
                          "type",
                          "title",
                          "required",
                          "key"
                        ],
                        "description": "A question for recording a gender identity. Source supports selecting between some standardized values or entering a user-generated text response."
                      },
                      {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "default": "sex_at_birth",
                            "enum": [
                              "sex_at_birth"
                            ],
                            "example": "sex_at_birth"
                          },
                          "title": {
                            "type": "string",
                            "description": "Display title of this question in the form, i.e. the question text itself.",
                            "example": "How do you feel today?"
                          },
                          "description": {
                            "type": "string",
                            "description": "An optional secondary text for this question, which will be displayed under the title and can contain, for example, instructions on how to answer the question."
                          },
                          "required": {
                            "type": "boolean",
                            "description": "Whether a response to this question is required or optional. Questions that are hidden by conditional rules are never required to have a response."
                          },
                          "key": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 255,
                            "pattern": "^[a-zA-Z0-9_]+$",
                            "description": "Unique key of this item within the form. Used in responses and conditional logic.",
                            "example": "demographics_name"
                          },
                          "conditional": {
                            "oneOf": [
                              {
                                "$ref": "#/components/schemas/CompoundConditional"
                              }
                            ],
                            "x-wrapped": true,
                            "description": "A conditional statement - if it evaluates to true, this question will be displayed, if false the question will not be displayed and no response will be recorded for it."
                          },
                          "destination": {
                            "type": "string",
                            "enum": [
                              "member.sex_at_birth"
                            ],
                            "description": "Indicates that the response from this question should be used to populate or update the member's sex at birth."
                          }
                        },
                        "required": [
                          "type",
                          "title",
                          "required",
                          "key"
                        ],
                        "description": "A question for recording person's birth sex, which is a selection between standardized values only. See also: gender identity."
                      },
                      {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "default": "pronouns",
                            "enum": [
                              "pronouns"
                            ],
                            "example": "pronouns"
                          },
                          "title": {
                            "type": "string",
                            "description": "Display title of this question in the form, i.e. the question text itself.",
                            "example": "How do you feel today?"
                          },
                          "description": {
                            "type": "string",
                            "description": "An optional secondary text for this question, which will be displayed under the title and can contain, for example, instructions on how to answer the question."
                          },
                          "required": {
                            "type": "boolean",
                            "description": "Whether a response to this question is required or optional. Questions that are hidden by conditional rules are never required to have a response."
                          },
                          "key": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 255,
                            "pattern": "^[a-zA-Z0-9_]+$",
                            "description": "Unique key of this item within the form. Used in responses and conditional logic.",
                            "example": "demographics_name"
                          },
                          "conditional": {
                            "oneOf": [
                              {
                                "$ref": "#/components/schemas/CompoundConditional"
                              }
                            ],
                            "x-wrapped": true,
                            "description": "A conditional statement - if it evaluates to true, this question will be displayed, if false the question will not be displayed and no response will be recorded for it."
                          },
                          "destination": {
                            "type": "string",
                            "enum": [
                              "member.pronouns"
                            ],
                            "description": "Indicates that the response from this question should be used to populate or update the member's pronouns."
                          }
                        },
                        "required": [
                          "type",
                          "title",
                          "required",
                          "key"
                        ],
                        "description": "A question for recording a person's pronouns. Source supports selecting between some standardized values or entering a user-generated text response. See also: gender identity."
                      },
                      {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "default": "phone_numbers",
                            "enum": [
                              "phone_numbers"
                            ],
                            "example": "phone_numbers"
                          },
                          "title": {
                            "type": "string",
                            "description": "Display title of this question in the form, i.e. the question text itself.",
                            "example": "How do you feel today?"
                          },
                          "description": {
                            "type": "string",
                            "description": "An optional secondary text for this question, which will be displayed under the title and can contain, for example, instructions on how to answer the question."
                          },
                          "required": {
                            "type": "boolean",
                            "description": "Whether a response to this question is required or optional. Questions that are hidden by conditional rules are never required to have a response."
                          },
                          "key": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 255,
                            "pattern": "^[a-zA-Z0-9_]+$",
                            "description": "Unique key of this item within the form. Used in responses and conditional logic.",
                            "example": "demographics_name"
                          },
                          "conditional": {
                            "oneOf": [
                              {
                                "$ref": "#/components/schemas/CompoundConditional"
                              }
                            ],
                            "x-wrapped": true,
                            "description": "A conditional statement - if it evaluates to true, this question will be displayed, if false the question will not be displayed and no response will be recorded for it."
                          },
                          "destination": {
                            "type": "string",
                            "enum": [
                              "member.phone_numbers"
                            ],
                            "description": "Indicates that the response from this question should be used to populate or update the member's phone numbers."
                          },
                          "allowed_uses": {
                            "type": "array",
                            "items": {
                              "type": "string",
                              "enum": [
                                "home",
                                "work",
                                "mobile",
                                "fax",
                                "other"
                              ]
                            },
                            "description": "Control which 'use' values are allowed (e.g. 'mobile', or 'fax').",
                            "example": [
                              "home",
                              "work",
                              "mobile",
                              "fax",
                              "other"
                            ]
                          },
                          "max": {
                            "type": "number",
                            "description": "The maximum number of phone numbers that can be collected.",
                            "example": 5
                          }
                        },
                        "required": [
                          "type",
                          "title",
                          "required",
                          "key",
                          "allowed_uses",
                          "max"
                        ],
                        "description": "A question for recording phone numbers. Source supports multiple phone numbers for a member, and requires a 'use' value for each number (e.g. mobile, work, or fax.)"
                      },
                      {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "default": "free_text",
                            "enum": [
                              "free_text"
                            ],
                            "example": "free_text"
                          },
                          "title": {
                            "type": "string",
                            "description": "Display title of this question in the form, i.e. the question text itself.",
                            "example": "How do you feel today?"
                          },
                          "description": {
                            "type": "string",
                            "description": "An optional secondary text for this question, which will be displayed under the title and can contain, for example, instructions on how to answer the question."
                          },
                          "required": {
                            "type": "boolean",
                            "description": "Whether a response to this question is required or optional. Questions that are hidden by conditional rules are never required to have a response."
                          },
                          "key": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 255,
                            "pattern": "^[a-zA-Z0-9_]+$",
                            "description": "Unique key of this item within the form. Used in responses and conditional logic.",
                            "example": "demographics_name"
                          },
                          "conditional": {
                            "oneOf": [
                              {
                                "$ref": "#/components/schemas/CompoundConditional"
                              }
                            ],
                            "x-wrapped": true,
                            "description": "A conditional statement - if it evaluates to true, this question will be displayed, if false the question will not be displayed and no response will be recorded for it."
                          }
                        },
                        "required": [
                          "type",
                          "title",
                          "required",
                          "key"
                        ],
                        "description": "A question type for recording free text responses in a single line of plain text."
                      },
                      {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "default": "long_text",
                            "enum": [
                              "long_text"
                            ],
                            "example": "long_text"
                          },
                          "title": {
                            "type": "string",
                            "description": "Display title of this question in the form, i.e. the question text itself.",
                            "example": "How do you feel today?"
                          },
                          "description": {
                            "type": "string",
                            "description": "An optional secondary text for this question, which will be displayed under the title and can contain, for example, instructions on how to answer the question."
                          },
                          "required": {
                            "type": "boolean",
                            "description": "Whether a response to this question is required or optional. Questions that are hidden by conditional rules are never required to have a response."
                          },
                          "key": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 255,
                            "pattern": "^[a-zA-Z0-9_]+$",
                            "description": "Unique key of this item within the form. Used in responses and conditional logic.",
                            "example": "demographics_name"
                          },
                          "conditional": {
                            "oneOf": [
                              {
                                "$ref": "#/components/schemas/CompoundConditional"
                              }
                            ],
                            "x-wrapped": true,
                            "description": "A conditional statement - if it evaluates to true, this question will be displayed, if false the question will not be displayed and no response will be recorded for it."
                          }
                        },
                        "required": [
                          "type",
                          "title",
                          "required",
                          "key"
                        ],
                        "description": "A question type for recording free text responses in a text area suitable for paragraphs."
                      },
                      {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "default": "number",
                            "enum": [
                              "number"
                            ],
                            "example": "number"
                          },
                          "title": {
                            "type": "string",
                            "description": "Display title of this question in the form, i.e. the question text itself.",
                            "example": "How do you feel today?"
                          },
                          "description": {
                            "type": "string",
                            "description": "An optional secondary text for this question, which will be displayed under the title and can contain, for example, instructions on how to answer the question."
                          },
                          "required": {
                            "type": "boolean",
                            "description": "Whether a response to this question is required or optional. Questions that are hidden by conditional rules are never required to have a response."
                          },
                          "key": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 255,
                            "pattern": "^[a-zA-Z0-9_]+$",
                            "description": "Unique key of this item within the form. Used in responses and conditional logic.",
                            "example": "demographics_name"
                          },
                          "conditional": {
                            "oneOf": [
                              {
                                "$ref": "#/components/schemas/CompoundConditional"
                              }
                            ],
                            "x-wrapped": true,
                            "description": "A conditional statement - if it evaluates to true, this question will be displayed, if false the question will not be displayed and no response will be recorded for it."
                          },
                          "min": {
                            "type": "number",
                            "nullable": true,
                            "description": "Control the minimum allowed value"
                          },
                          "max": {
                            "type": "number",
                            "nullable": true,
                            "description": "Control the maximum allowed value"
                          }
                        },
                        "required": [
                          "type",
                          "title",
                          "required",
                          "key"
                        ],
                        "description": "A question type for recording numerical responses as a single number, either an integer or decimal."
                      },
                      {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "default": "single_select",
                            "enum": [
                              "single_select"
                            ],
                            "example": "single_select"
                          },
                          "title": {
                            "type": "string",
                            "description": "Display title of this question in the form, i.e. the question text itself.",
                            "example": "How do you feel today?"
                          },
                          "description": {
                            "type": "string",
                            "description": "An optional secondary text for this question, which will be displayed under the title and can contain, for example, instructions on how to answer the question."
                          },
                          "required": {
                            "type": "boolean",
                            "description": "Whether a response to this question is required or optional. Questions that are hidden by conditional rules are never required to have a response."
                          },
                          "key": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 255,
                            "pattern": "^[a-zA-Z0-9_]+$",
                            "description": "Unique key of this item within the form. Used in responses and conditional logic.",
                            "example": "demographics_name"
                          },
                          "conditional": {
                            "oneOf": [
                              {
                                "$ref": "#/components/schemas/CompoundConditional"
                              }
                            ],
                            "x-wrapped": true,
                            "description": "A conditional statement - if it evaluates to true, this question will be displayed, if false the question will not be displayed and no response will be recorded for it."
                          },
                          "options": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "key": {
                                  "type": "string",
                                  "description": "Hidden 'key' for this option. Must be unique within the question."
                                },
                                "label": {
                                  "type": "string",
                                  "description": "Display label for this option. Must be unique within the question."
                                },
                                "score": {
                                  "type": "number"
                                }
                              },
                              "required": [
                                "key",
                                "label"
                              ],
                              "description": "Describes an option within a single- or multi-select input."
                            },
                            "description": "The list of options available for this question."
                          },
                          "other": {
                            "type": "object",
                            "properties": {
                              "label": {
                                "type": "string",
                                "description": "Display label for the 'other' option.",
                                "example": "Other (please tell us where)"
                              },
                              "required": {
                                "type": "boolean",
                                "description": "Whether or not a response to the free-text input is required if the responder selected 'other'",
                                "example": false
                              }
                            },
                            "required": [
                              "label",
                              "required"
                            ],
                            "description": "Controls whether a user-generated 'other' free text field is offered, and whether a free text response is required. If this object is blank or null, no 'other' option is presented.",
                            "nullable": true,
                            "example": null
                          },
                          "input_type": {
                            "type": "string",
                            "enum": [
                              "radio",
                              "drop_down"
                            ],
                            "description": "Control the input type of the single-select question.",
                            "example": "drop_down"
                          },
                          "scoring_method": {
                            "type": "string",
                            "enum": [
                              "none",
                              "max"
                            ]
                          }
                        },
                        "required": [
                          "type",
                          "title",
                          "required",
                          "key",
                          "options",
                          "input_type"
                        ],
                        "description": "A question type for recording a single choice between provided options. Using the 'other' config, this question can optionally include a user-entered 'other' option."
                      },
                      {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "default": "multi_select",
                            "enum": [
                              "multi_select"
                            ],
                            "example": "multi_select"
                          },
                          "title": {
                            "type": "string",
                            "description": "Display title of this question in the form, i.e. the question text itself.",
                            "example": "How do you feel today?"
                          },
                          "description": {
                            "type": "string",
                            "description": "An optional secondary text for this question, which will be displayed under the title and can contain, for example, instructions on how to answer the question."
                          },
                          "required": {
                            "type": "boolean",
                            "description": "Whether a response to this question is required or optional. Questions that are hidden by conditional rules are never required to have a response."
                          },
                          "key": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 255,
                            "pattern": "^[a-zA-Z0-9_]+$",
                            "description": "Unique key of this item within the form. Used in responses and conditional logic.",
                            "example": "demographics_name"
                          },
                          "conditional": {
                            "oneOf": [
                              {
                                "$ref": "#/components/schemas/CompoundConditional"
                              }
                            ],
                            "x-wrapped": true,
                            "description": "A conditional statement - if it evaluates to true, this question will be displayed, if false the question will not be displayed and no response will be recorded for it."
                          },
                          "options": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "key": {
                                  "type": "string",
                                  "description": "Hidden 'key' for this option. Must be unique within the question."
                                },
                                "label": {
                                  "type": "string",
                                  "description": "Display label for this option. Must be unique within the question."
                                },
                                "score": {
                                  "type": "number"
                                }
                              },
                              "required": [
                                "key",
                                "label"
                              ],
                              "description": "Describes an option within a single- or multi-select input."
                            },
                            "description": "The list of options available for this question."
                          },
                          "other": {
                            "type": "object",
                            "properties": {
                              "label": {
                                "type": "string",
                                "description": "Display label for the 'other' option.",
                                "example": "Other (please tell us where)"
                              },
                              "required": {
                                "type": "boolean",
                                "description": "Whether or not a response to the free-text input is required if the responder selected 'other'",
                                "example": false
                              }
                            },
                            "required": [
                              "label",
                              "required"
                            ],
                            "description": "Controls whether user-generated 'other' free text fields is offered, and whether at least one free text response is required. If this object is blank or null, no 'other' option is presented.",
                            "nullable": true,
                            "example": null
                          },
                          "input_type": {
                            "type": "string",
                            "enum": [
                              "checkbox"
                            ],
                            "description": "Control the input type of the multi-select question.",
                            "example": "checkbox"
                          },
                          "scoring_method": {
                            "type": "string",
                            "enum": [
                              "none",
                              "max",
                              "sum"
                            ]
                          }
                        },
                        "required": [
                          "type",
                          "title",
                          "required",
                          "key",
                          "options",
                          "input_type"
                        ],
                        "description": "A question type for recording a multiple choices among provided options. Using the 'other' config, this question can optionally include one or more user-generated 'other' options."
                      },
                      {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "default": "yes_no",
                            "enum": [
                              "yes_no"
                            ],
                            "example": "yes_no"
                          },
                          "title": {
                            "type": "string",
                            "description": "Display title of this question in the form, i.e. the question text itself.",
                            "example": "How do you feel today?"
                          },
                          "description": {
                            "type": "string",
                            "description": "An optional secondary text for this question, which will be displayed under the title and can contain, for example, instructions on how to answer the question."
                          },
                          "required": {
                            "type": "boolean",
                            "description": "Whether a response to this question is required or optional. Questions that are hidden by conditional rules are never required to have a response."
                          },
                          "key": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 255,
                            "pattern": "^[a-zA-Z0-9_]+$",
                            "description": "Unique key of this item within the form. Used in responses and conditional logic.",
                            "example": "demographics_name"
                          },
                          "conditional": {
                            "oneOf": [
                              {
                                "$ref": "#/components/schemas/CompoundConditional"
                              }
                            ],
                            "x-wrapped": true,
                            "description": "A conditional statement - if it evaluates to true, this question will be displayed, if false the question will not be displayed and no response will be recorded for it."
                          },
                          "labels": {
                            "type": "object",
                            "properties": {
                              "yes": {
                                "type": "string",
                                "nullable": true,
                                "description": "Display label for the 'yes' option.",
                                "example": "True"
                              },
                              "no": {
                                "type": "string",
                                "nullable": true,
                                "description": "Display label for the 'no' option.",
                                "example": "False"
                              }
                            },
                            "nullable": true,
                            "description": "Display labels for the yes or no options."
                          }
                        },
                        "required": [
                          "type",
                          "title",
                          "required",
                          "key"
                        ],
                        "description": "A question type for recording a discrete yes or no response."
                      }
                    ],
                    "discriminator": {
                      "propertyName": "type"
                    }
                  },
                  "description": "Array of form elements. Pages can include any element, except another page."
                },
                "exits": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "default": "exit",
                        "enum": [
                          "exit"
                        ],
                        "example": "exit"
                      },
                      "exit_screen_key": {
                        "type": "string",
                        "description": "Indicates which exit screen to display if the conditions are met."
                      },
                      "conditional": {
                        "$ref": "#/components/schemas/CompoundConditional"
                      }
                    },
                    "required": [
                      "type",
                      "exit_screen_key",
                      "conditional"
                    ],
                    "description": "An exit is a point in a form at which a responder may be directed to a specific exit screen, identified by the `exit_screen_key`, based on answers to previous questions referenced in the `conditional`."
                  },
                  "nullable": true,
                  "description": "Array of exit points."
                },
                "key": {
                  "type": "string",
                  "minLength": 1,
                  "maxLength": 255,
                  "pattern": "^[a-zA-Z0-9_]+$",
                  "description": "Unique key of this item within the form. Used in responses and conditional logic.",
                  "example": "demographics_name"
                },
                "conditional": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/CompoundConditional"
                    }
                  ],
                  "x-wrapped": true,
                  "description": "A conditional statement - if it evaluates to true, this question will be displayed, if false the question will not be displayed and no response will be recorded for it."
                }
              },
              "required": [
                "type",
                "items",
                "key"
              ],
              "description": "Pages are the top-level organization of a form. At least one page must exist. Each page defines the elements that display together to a responder and consists of an array of other form items."
            },
            "description": "An array of items that describe the form version's content and configuration. Pages form the top-level item and contain additional elements, such as questions, display elements, and groups of items."
          },
          "exit_screens": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "default": "exit_screen",
                  "enum": [
                    "exit_screen"
                  ],
                  "example": "exit_screen"
                },
                "key": {
                  "type": "string",
                  "description": "A unique key for this exit screen within the form. The keys are used in exits to indicate which screen is used for the exit. An exit screen with key 'default' must exist in every form.",
                  "example": "ineligible_location"
                },
                "description": {
                  "type": "string",
                  "description": "A description of this exit screen. If the responder reaches this exit screen, the screen's description is displayed within the completed form response."
                },
                "content_type": {
                  "type": "string",
                  "enum": [
                    "md"
                  ],
                  "description": "Type of the rich text content. Currently only `md` (i.e. Markdown) is supported.",
                  "example": "md"
                },
                "content": {
                  "type": "string",
                  "description": "The rich text content, represented as Markdown text.",
                  "example": "# Thank You\n\nWe appreciate you completing this form.\n\nYour care team will be in touch."
                }
              },
              "required": [
                "type",
                "key",
                "description",
                "content_type",
                "content"
              ],
              "description": "Each form has a default exit screen that is shown when the responder completes the form. You can optionally intercept the form completion flow via the Source SDK.\n\nYou can also configure exits within a form by adding an exit within your form that references an exit screen key. You can create as many exit screens and exits as you need. A common example is when a responder answers questions as part of an intake form that indicates they are not eligible for services. In that case, you can create an exit screen and exit that indicate to the responder they are ineligible and end their form response early."
            },
            "description": "A map of 'key' to exit screen content. Each form must contain an exit screen with the key 'default', and additional exit screens can be configured and referenced by exits within the form."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the form version was created.",
            "example": "2021-05-13T16:33:00.000Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the form version was last updated.",
            "example": "2021-05-13T16:33:00.000Z"
          },
          "published_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Timestamp when the form version was published.",
            "example": "2021-05-13T16:33:00.000Z"
          }
        },
        "required": [
          "object",
          "id",
          "form",
          "changelog",
          "version",
          "previous_version",
          "calculations",
          "items",
          "exit_screens",
          "created_at",
          "updated_at",
          "published_at"
        ],
        "title": "Form Version",
        "description": "Form versions contain the contents and configuration of a form. Each form may have multiple versions over time as you update the form's contents. A given form only ever has a single draft version at a time.\n\nOnce published, a form version becomes the active version of a form, with which responders interact. Each time a form version is published, a new draft version for that form is created. A published form version cannot be deleted or modified.",
        "x-resourceId": "form_version",
        "x-package": "forms"
      },
      "group": {
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "default": "group",
            "enum": [
              "group"
            ],
            "example": "group",
            "description": "Always `group`."
          },
          "id": {
            "type": "string",
            "example": "grp_IlGhgsstvgsagl6lV89Q",
            "description": "Unique ID for the group."
          },
          "name": {
            "type": "string",
            "maxLength": 255,
            "description": "Public display name for this group. The name must be unique across all groups.",
            "example": "Physicians"
          },
          "description": {
            "type": "string",
            "maxLength": 4096,
            "nullable": true,
            "description": "A description for this group.",
            "example": null
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the group was created.",
            "example": "2021-05-13T16:33:00.000Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the group was last updated.",
            "example": "2021-05-13T16:33:00.000Z"
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the group was deleted, which is only present for deleted groups. Deleted groups are not typically returned by the API, however they are returned in `group.deleted` events and expanded references on other objects.",
            "example": "2021-05-13T16:33:00.000Z"
          }
        },
        "required": [
          "object",
          "id",
          "name",
          "description",
          "created_at",
          "updated_at"
        ],
        "title": "Group",
        "description": "Groups can help you organize your team by describing qualities that group members have. For example, you might create groups for Physicians, Nurses, and Care Navigators. You can then leverage these groups when routing tasks or viewing schedule availability.",
        "x-resourceId": "group",
        "x-package": null
      },
      "integration": {
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "default": "integration",
            "enum": [
              "integration"
            ],
            "example": "integration",
            "description": "Always `integration`."
          },
          "id": {
            "type": "string"
          },
          "user": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/user"
              }
            ],
            "x-expandable": {
              "$ref": "#/components/schemas/user"
            },
            "description": "Expandable reference to a User",
            "example": "usr_NC6MQ3FyxddKoJJpfSVL",
            "nullable": true
          },
          "type": {
            "type": "string",
            "enum": [
              "cronofy",
              "canvas",
              "elation"
            ]
          },
          "enabled": {
            "type": "boolean"
          },
          "config": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "default": "canvas",
                    "enum": [
                      "canvas"
                    ],
                    "example": "canvas"
                  },
                  "api_base_url": {
                    "type": "string",
                    "description": "The URL of the Canvas instance FHIR API to connect to.",
                    "example": "https://fhir-subdomain.canvas.com"
                  },
                  "web_base_url": {
                    "type": "string",
                    "description": "The URL of the Canvas instance web application to connect to.",
                    "example": "https://subdomain.canvas.com"
                  }
                },
                "required": [
                  "type",
                  "api_base_url",
                  "web_base_url"
                ]
              },
              {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "default": "elation",
                    "enum": [
                      "elation"
                    ],
                    "example": "elation"
                  },
                  "api_base_url": {
                    "type": "string",
                    "description": "The URL of the Elation API to connect to.",
                    "example": "https://sandbox.elationemr.com"
                  },
                  "web_base_url": {
                    "type": "string",
                    "description": "The URL of the Elation instance web application to connect to.",
                    "example": "https://sandbox.elationemr.com"
                  }
                },
                "required": [
                  "type",
                  "api_base_url",
                  "web_base_url"
                ]
              }
            ],
            "discriminator": {
              "propertyName": "type"
            },
            "nullable": true,
            "description": "Integration-specific configuration. Each integration type requires different config data."
          },
          "external_id": {
            "type": "string",
            "nullable": true,
            "description": "The corresponding ID of this integration in the external system.",
            "example": null
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the integration was created.",
            "example": "2021-05-13T16:33:00.000Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the integration was last updated.",
            "example": "2021-05-13T16:33:00.000Z"
          }
        },
        "required": [
          "object",
          "id",
          "user",
          "type",
          "enabled",
          "config",
          "external_id",
          "created_at",
          "updated_at"
        ],
        "title": "Integration",
        "description": "This resource represents an integration (such as Google Calendar)",
        "x-resourceId": "integration",
        "x-package": null
      },
      "intent": {
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "default": "intent",
            "enum": [
              "intent"
            ],
            "example": "intent",
            "description": "Always `intent`."
          },
          "id": {
            "type": "string",
            "example": "itnt_CPCpl5PfZmCzqMLlCi1v",
            "description": "Unique ID for the intent."
          },
          "member": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/member"
              }
            ],
            "x-expandable": {
              "$ref": "#/components/schemas/member"
            },
            "description": "The member to whom this intent belongs.",
            "example": "mem_JAfPRRc59eh2YQ1aeL3D"
          },
          "type": {
            "type": "string",
            "enum": [
              "scheduling",
              "form"
            ],
            "description": "The type of intent that needs to be completed. Source supports two intent types: 'scheduling' and 'form'.",
            "example": "scheduling"
          },
          "status": {
            "type": "string",
            "enum": [
              "active",
              "expired",
              "canceled",
              "completed"
            ],
            "description": "The current status of the intent. When the status is 'expired', 'canceled', or 'completed', a member can no  longer use the intent. When a member fulfills an intent, for example by booking an appointment or completing  a form response, the status is updated automatically to 'completed'. When an intent is past its expires_at time,  the status is updated automatically to 'expired'.",
            "example": "active"
          },
          "expires_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when this intent expires. By default, intents expire 30 days after creation. Once the intent  reaches its expiration, the intent status is automatically updated to 'expired' and can no longer be used.",
            "example": "2021-05-13T16:33:00.000Z"
          },
          "link": {
            "type": "string",
            "description": "The URL to access the intent. Anyone with this link will be able to access the intent, so you should ensure  it is kept safe.",
            "example": "https://subdomain.connect.sourcehealth.com/elements/scheduler/is_PFzr0osaO3NzDYQXaiC7MLk9"
          },
          "secret": {
            "type": "string",
            "description": "A unique, secure token that identifies the intent and allows a member to access it. You can use this token to  pass an intent into embeddable Source elements. This token is also present in the the link URL.",
            "example": "is_PFzr0osaO3NzDYQXaiC7MLk9"
          },
          "configuration": {
            "anyOf": [
              {
                "type": "object",
                "properties": {
                  "appointment_type": {
                    "type": "string",
                    "example": "aptp_meYUvkuaI2akjnb5Kwt7",
                    "description": "The key or identifier of the appointment type. If the intent type is 'scheduling', this configuration  parameter is required."
                  },
                  "start_search_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The start time for the appointment availability search associated with this intent. If not set, the  availability window will start at the time the member accesses this intent to search for an appointment."
                  },
                  "end_search_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The latest time for the appointment availability search associated with this intent. If not set, the  availability window will end at the planning horizon of the appointment type associated with the intent."
                  },
                  "participants": {
                    "type": "array",
                    "items": {
                      "anyOf": [
                        {
                          "type": "string",
                          "example": "usr_qoGndHzx8KwdYsEByt9X"
                        },
                        {
                          "type": "string",
                          "example": "grp_IlGhgsstvgsagl6lV89Q"
                        }
                      ]
                    },
                    "description": "Provide a set of users and groups that should be included when searching for available slots using this intent.  The users and groups included in this parameter must still be included in the appointment type's configuration  in order for the availability API to return slots for them."
                  },
                  "duration": {
                    "type": "number",
                    "description": "The duration of the appointment to book, in minutes, using this intent. By default, Source will use either the  appointment type's duration. However, you may specify an alternative duration here to calculate slots for an  appointment of a different length.\n\nMust be a number between 5 and 360 minutes (6 hours)."
                  }
                },
                "required": [
                  "appointment_type"
                ]
              },
              {
                "type": "object",
                "properties": {
                  "form": {
                    "type": "string",
                    "example": "form_hSGPOT5BMusNLwDI3Z4N",
                    "description": "The key or identifier of the form. When the member accesses this intent, the published version  of the form at that time is used to create the form response. If the intent type is 'form', this  configuration parameter is required."
                  }
                },
                "required": [
                  "form"
                ]
              }
            ],
            "description": "A set of configuration describing the appointment you wish the member to book or form you wish the member to  complete. This parameter's configuration depends on the intent type you specify."
          },
          "send_notification": {
            "type": "boolean",
            "description": "Whether or not this intent should generate a notification to the member.",
            "example": false
          },
          "outcome": {
            "anyOf": [
              {
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "$ref": "#/components/schemas/appointment"
                  }
                ],
                "x-expandable": {
                  "$ref": "#/components/schemas/appointment"
                },
                "description": "Expandable reference to an Appointment",
                "example": "appt_mTvufYJBBgYmbEAEZ6rE"
              },
              {
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "$ref": "#/components/schemas/form_response"
                  }
                ],
                "x-expandable": {
                  "$ref": "#/components/schemas/form_response"
                },
                "description": "Expandable reference to a form response",
                "example": "fr_mk29zZR6Qr5u5Q0BRHwu"
              }
            ],
            "nullable": true,
            "description": "A resource created using this intent. For example, if an appointment is booked using this intent, this field  contains that appointment ID. If a form response is completed using this request, this field contains that form  response ID."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the intent was created.",
            "example": "2021-05-13T16:33:00.000Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the intent was last updated.",
            "example": "2021-05-13T16:33:00.000Z"
          }
        },
        "required": [
          "object",
          "id",
          "member",
          "type",
          "status",
          "expires_at",
          "link",
          "secret",
          "configuration",
          "send_notification",
          "outcome",
          "created_at",
          "updated_at"
        ],
        "title": "Intent",
        "description": "Intents support a range of workflows in which you want to request that a member take a specific action given  configuration you provide when creating the intent. For example, you can create an intent in order to request that  a member book a particular appointment type within a date range. As another example, you can create an intent in order  to request that a member complete a specific form response. The intent you create includes a link you can then share  with a member in order to fulfill the intent.\n\nIntents use statuses to indicate whether they are active or have reached a terminal status, such as completed,  expired, or canceled. You can create intents at any time and cancel intents that are no longer relevant. You cannot  update an existing intent other than to cancel it, and then create a new intent.",
        "x-resourceId": "intent",
        "x-package": null,
        "x-preview": true
      },
      "license": {
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "default": "license",
            "enum": [
              "license"
            ],
            "example": "license",
            "description": "Always `license`."
          },
          "id": {
            "type": "string",
            "example": "lic_R8qQYHFZO6dTjOBxHAda",
            "description": "Unique ID for the license."
          },
          "user": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/user"
              }
            ],
            "x-expandable": {
              "$ref": "#/components/schemas/user"
            },
            "description": "User to whom the license belongs.",
            "example": "usr_NC6MQ3FyxddKoJJpfSVL"
          },
          "type": {
            "type": "object",
            "properties": {
              "code": {
                "type": "string",
                "description": "Code for the license type. For example, \"MD\".",
                "example": "MD"
              },
              "description": {
                "type": "string",
                "description": "Description of the license type. For example, \"Doctor of Medcine\".",
                "example": "Doctor of Medicine"
              }
            },
            "required": [
              "code",
              "description"
            ],
            "description": "The type of clinical license. If you have a need for a license type that is not supported, please don’t hesitate to reach out to Source."
          },
          "region": {
            "type": "string",
            "description": "Region with which the license is associated. This is represented as an ISO-3166-2:US code. For example, \"US-NY\".",
            "example": "US-NY"
          },
          "license_number": {
            "type": "string",
            "nullable": true,
            "description": "The ID or number issued by the licensing body for this license.",
            "example": "299535"
          },
          "status": {
            "type": "string",
            "enum": [
              "active",
              "inactive"
            ],
            "description": "Status of the license.",
            "example": "active"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "Description of the license.",
            "example": "License was verified by licensing board on 8/27/22."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the license was created.",
            "example": "2021-05-13T16:33:00.000Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the license was last updated.",
            "example": "2021-05-13T16:33:00.000Z"
          }
        },
        "required": [
          "object",
          "id",
          "user",
          "type",
          "region",
          "license_number",
          "status",
          "description",
          "created_at",
          "updated_at"
        ],
        "title": "License",
        "description": "Licenses represent the legal permission to perform an occupation, such as to deliver medical care. A license is specific to a region (in the US, a state or territory) whose licensing body has granted the license.\n\nSource uses licenses to guide, for example, automatic routing of tasks and appointments configured to require licensure. Source compares a user's license region with the member's address region to evaluate appropriate licensure. Each user can have any number of licenses. Licenses can be created, updated, and deleted for a user.",
        "x-resourceId": "license",
        "x-package": null
      },
      "location": {
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "default": "location",
            "enum": [
              "location"
            ],
            "example": "location",
            "description": "Always `location`."
          },
          "id": {
            "type": "string",
            "example": "loc_EtTXhFHUtCXO1JWBd8TN",
            "description": "Unique ID for the location."
          },
          "name": {
            "type": "string",
            "maxLength": 255,
            "description": "Unique name for this location.",
            "example": "Main Campus"
          },
          "type": {
            "type": "string",
            "enum": [
              "physical",
              "virtual"
            ],
            "description": "Whether the location is a physical location, or a virtual one. There is always one and only one virtual location for each Source account. You may have any number of physical locations, however.",
            "example": "physical"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "Free text description for this location. This might be used to include information about this location, the services that are offered here, or exceptions to operating hours.",
            "example": "Our new flagship in the heard of New York City."
          },
          "directions": {
            "type": "string",
            "nullable": true,
            "description": "Free text directions for accessing this location. Typically, this is used to store information that is broadly applicable, such as \"take exit 45 off of I-485, and turn right on Front Street.\" You may also use it to provide more specific building level access information, such as \"enter through the north lobby, pass the security desk and take the elevator to the 3rd floor.\"",
            "example": "Pass security in the lobby, and take the elevator to the 2nd floor."
          },
          "address": {
            "type": "object",
            "properties": {
              "street_line_1": {
                "type": "string",
                "description": "The first line of the street address.",
                "example": "1 City Point"
              },
              "street_line_2": {
                "type": "string",
                "nullable": true,
                "description": "The second line of the street address."
              },
              "city": {
                "type": "string",
                "description": "The city.",
                "example": "Brooklyn"
              },
              "region": {
                "type": "string",
                "description": "The region - in the US this should be the two-letter state code.",
                "example": "NY"
              },
              "postal_code": {
                "type": "string",
                "description": "The postal code (i.e. zip code).",
                "example": "11215"
              },
              "country": {
                "type": "string",
                "description": "The country, as a two-letter ISO 3166-1 code. US is the only supported country at this time.",
                "example": "US"
              }
            },
            "required": [
              "street_line_1",
              "street_line_2",
              "city",
              "region",
              "postal_code",
              "country"
            ],
            "nullable": true,
            "description": "The physical address of the location. Only provided when the location type is \"physical.\""
          },
          "image": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/file"
              }
            ],
            "x-expandable": {
              "$ref": "#/components/schemas/file"
            },
            "description": "Image associated with the physical location. Must be a file of type `location_photo`. Images are optional, but can be helpful for patients to identify the location.",
            "example": "file_gdIyXM9d4LKGnewOV4OM",
            "nullable": true
          },
          "phone_numbers": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "use": {
                  "type": "string",
                  "enum": [
                    "home",
                    "work",
                    "mobile",
                    "fax",
                    "other"
                  ],
                  "description": "Type of phone number.",
                  "example": "mobile"
                },
                "value": {
                  "type": "string",
                  "description": "The phone number to use. This should be formatted in E.164 format.",
                  "example": "+12125551234"
                }
              },
              "required": [
                "use",
                "value"
              ]
            },
            "description": "An array of phone numbers associated with the location."
          },
          "coordinates": {
            "type": "array",
            "items": {
              "type": "number"
            },
            "nullable": true,
            "description": "The latitude/longitude pair for this location, if it's a physical location. Source attempts to geocode all physical locations at the time of creation.",
            "example": [
              -120.23307,
              38.62936
            ]
          },
          "time_zone": {
            "type": "string",
            "description": "The time zone in which this location operates. It is used whenever Source needs to determine the local time for a location.",
            "example": "America/New_York"
          },
          "distance": {
            "type": "number",
            "description": "When searching locations nearby a coordinate, this field will contain the distance (in km) between the location and provided coordinate. This field will only be present when a geo-searching request is issued via the List all Locations endpoint."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the location was created.",
            "example": "2021-05-13T16:33:00.000Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the location was last updated.",
            "example": "2021-05-13T16:33:00.000Z"
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the location was deleted, which is only present for deleted locations. Deleted locations are not typically returned by the API, however they are returned in `location.deleted` events and expanded references on other objects.",
            "example": "2021-05-13T16:33:00.000Z"
          }
        },
        "required": [
          "object",
          "id",
          "name",
          "type",
          "description",
          "directions",
          "address",
          "image",
          "phone_numbers",
          "coordinates",
          "time_zone",
          "created_at",
          "updated_at"
        ],
        "title": "Location",
        "description": "Locations are the places where you provide care to your members.\n\nWhen you configure locations in Source, you'll have complete control over when and how appointments are offered to your members, as well as the services that can be delivered at each location.\n\nEvery Source account is created with one virtual location, which houses the settings that will be used when booking and managing virtual visits. Additional physical locations can be added for practices that need them.\n\nPlease note: managing locations is currently in preview, and not available to all customers. Reach out to Source if you'd like to enable this for your account.",
        "x-resourceId": "location",
        "x-package": null,
        "x-preview": true
      },
      "measurement": {
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "default": "measurement",
            "enum": [
              "measurement"
            ],
            "example": "measurement",
            "description": "Always `measurement`."
          },
          "id": {
            "type": "string",
            "description": "Unique ID of the measurement.",
            "example": "meas_0EipsUv2yRFxynHshisN"
          },
          "member": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/member"
              }
            ],
            "x-expandable": {
              "$ref": "#/components/schemas/member"
            },
            "description": "Member to which this measurement belongs.",
            "example": "mem_JAfPRRc59eh2YQ1aeL3D"
          },
          "device": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/device"
              }
            ],
            "x-expandable": {
              "$ref": "#/components/schemas/device"
            },
            "description": "The device that reported the reading.",
            "example": "dev_kTRoWd1awPhUoRwL78uH"
          },
          "kind": {
            "type": "string",
            "enum": [
              "numeric",
              "composite"
            ],
            "description": "The kind of measurement being reported, which can either be numeric or composite.\n\nIf a measurement is of kind numeric, the properties value and unit will be set. If it is composite, then the items dictionary will be set."
          },
          "value": {
            "type": "string",
            "description": "Numeric value of this measurement (non-numeric not supported at this time). Source always returns measurements as strings to avoid floating-point precision issues.",
            "example": "100.45"
          },
          "unit": {
            "type": "string",
            "description": "Unit that the measurement is reported in.",
            "example": "kg"
          },
          "type": {
            "type": "string",
            "enum": [
              "blood_glucose",
              "blood_oxygen_saturation",
              "blood_pressure",
              "body_weight",
              "diastolic_blood_pressure",
              "heart_rate",
              "systolic_blood_pressure"
            ],
            "description": "The type of the measurement",
            "example": "body_weight"
          },
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "value": {
                  "type": "string",
                  "description": "Numeric value of this measurement (non-numeric not supported at this time). Source always returns measurements as strings to avoid floating-point precision issues.",
                  "example": "100.45"
                },
                "unit": {
                  "type": "string",
                  "description": "Unit that the measurement is reported in.",
                  "example": "lb"
                }
              },
              "required": [
                "value",
                "unit"
              ]
            },
            "description": "Measurements included in this composite. The key of this dictionary will be the measurement type alias."
          },
          "time": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the measurement was taken.",
            "example": "2021-05-13T16:33:00.000Z"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the measurement was created.",
            "example": "2021-05-13T16:33:00.000Z"
          }
        },
        "required": [
          "object",
          "id",
          "member",
          "device",
          "kind",
          "type",
          "items",
          "time",
          "created_at"
        ],
        "title": "Measurement",
        "description": "Measurements are reports of objective physiological markers on a member, such as blood pressure, body weight, or blood glucose.\n\nMeasurements are often created by devices that have been sent to the member, but can also be created directly via the API. Either way, measurements are stored for the member and can be viewed by clinicians with access to health data.",
        "x-resourceId": "measurement",
        "x-package": "monitoring"
      },
      "member": {
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "default": "member",
            "enum": [
              "member"
            ],
            "example": "member",
            "description": "Always `member`."
          },
          "id": {
            "type": "string",
            "example": "mem_5QW8j1oKqQjNaPk4Hv3f",
            "description": "Unique ID for the member."
          },
          "title": {
            "type": "string",
            "nullable": true,
            "description": "Title for the member (Mr., Mrs., Dr., etc)."
          },
          "first_name": {
            "type": "string",
            "description": "First name of the member.",
            "example": "Catherine"
          },
          "middle_name": {
            "type": "string",
            "nullable": true,
            "description": "Middle name of the member.",
            "example": null
          },
          "last_name": {
            "type": "string",
            "description": "Last name of the member.",
            "example": "Parker"
          },
          "preferred_name": {
            "type": "string",
            "nullable": true,
            "description": "The member's preferred name. This could be a shortened or alternate name that the member typically prefers to be called.",
            "example": "Cathy"
          },
          "email": {
            "type": "string",
            "nullable": true,
            "description": "Email address for the member.",
            "example": "evieparker@example.org"
          },
          "date_of_birth": {
            "type": "string",
            "format": "date",
            "nullable": true,
            "description": "Date of birth of the member.",
            "example": "1990-10-10"
          },
          "time_zone": {
            "type": "string",
            "nullable": true,
            "description": "The IANA time zone identifier of the member, if one is known. If no time zone is known, null is returned.",
            "example": "America/New_York"
          },
          "sex_at_birth": {
            "type": "string",
            "enum": [
              "male",
              "female",
              "other",
              "undisclosed"
            ],
            "nullable": true,
            "description": "Sex assigned and recorded on the birth certificate at the time of the individual's birth. This information is often clinically useful, but is not necessarily indicative of the individual's gender identity.",
            "example": "female"
          },
          "administrative_gender": {
            "type": "string",
            "enum": [
              "male",
              "female",
              "other"
            ],
            "nullable": true,
            "description": "The gender of a person used for administrative purposes, such as on government-issued ID documents.",
            "example": "female"
          },
          "gender_identity": {
            "type": "object",
            "properties": {
              "value": {
                "type": "string",
                "enum": [
                  "female",
                  "male",
                  "non_binary",
                  "other",
                  "transgender_female",
                  "transgender_male",
                  "undisclosed"
                ],
                "description": "Coded value"
              },
              "text": {
                "type": "string",
                "description": "Human-readable display text of coded value, or member-provided string when value is 'other'"
              }
            },
            "required": [
              "value",
              "text"
            ],
            "nullable": true,
            "description": "The individual member's identification of gender. Note that receiving a null value for gender is not the same as an undisclosed gender. The latter means that the user specifically opted to not disclose a gender. The former indicates that the gender is unknown and/or was not provided.",
            "example": {
              "value": "female",
              "text": "Woman"
            }
          },
          "pronouns": {
            "type": "object",
            "properties": {
              "value": {
                "type": "string",
                "enum": [
                  "she_her",
                  "he_him",
                  "they_them",
                  "other"
                ],
                "description": "Coded value or 'other'"
              },
              "text": {
                "type": "string",
                "description": "Human-readable display text of coded value, or member-provided string when value is 'other'"
              }
            },
            "required": [
              "value",
              "text"
            ],
            "nullable": true,
            "description": "Describes how the person would like to be referred to when not using their name.",
            "example": {
              "value": "they_them",
              "text": "They/Them"
            }
          },
          "address": {
            "type": "object",
            "properties": {
              "street_line_1": {
                "type": "string",
                "nullable": true,
                "description": "The first line of the street address.",
                "example": "1 City Point"
              },
              "street_line_2": {
                "type": "string",
                "nullable": true,
                "description": "The second line of the street address."
              },
              "city": {
                "type": "string",
                "nullable": true,
                "description": "The city.",
                "example": "Brooklyn"
              },
              "region": {
                "type": "string",
                "description": "The region - in the US this should be the two-letter state code.",
                "example": "NY"
              },
              "postal_code": {
                "type": "string",
                "nullable": true,
                "description": "The postal code (i.e. zip code).",
                "example": "11215"
              },
              "country": {
                "type": "string",
                "description": "The country, as a two-letter ISO 3166-1 code. US is the only supported country at this time.",
                "example": "US"
              }
            },
            "required": [
              "street_line_1",
              "street_line_2",
              "city",
              "region",
              "postal_code",
              "country"
            ],
            "nullable": true,
            "description": "Primary address for the member. If you provide an address, you must specify at least the country and region."
          },
          "phone_numbers": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "use": {
                  "type": "string",
                  "enum": [
                    "home",
                    "work",
                    "mobile",
                    "fax",
                    "other"
                  ],
                  "description": "Type of phone number.",
                  "example": "mobile"
                },
                "value": {
                  "type": "string",
                  "description": "The phone number to use. This should be formatted in E.164 format.",
                  "example": "+12125551234"
                }
              },
              "required": [
                "use",
                "value"
              ]
            },
            "description": "An array of phone numbers associated with the member"
          },
          "care_team": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/care_team"
              }
            ],
            "x-expandable": {
              "$ref": "#/components/schemas/care_team"
            },
            "description": "The care team that is assigned to this member.",
            "example": "crtm_Zfj4Sl03hfvZjfFJZ492"
          },
          "profile_image": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/file"
              }
            ],
            "x-expandable": {
              "$ref": "#/components/schemas/file"
            },
            "description": "The file for the member's profile image.",
            "example": "file_gdIyXM9d4LKGnewOV4OM",
            "nullable": true
          },
          "license_region": {
            "type": "string",
            "nullable": true,
            "description": "Licensing region the member is located within.       This is represented as an ISO-3166-2:US code and always matches the region of the member's address.",
            "example": "US-NY"
          },
          "tags": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/components/schemas/tag"
                }
              ],
              "x-expandable": {
                "$ref": "#/components/schemas/tag"
              },
              "description": "Expandable reference to a Tag",
              "example": "tag_ro2MsQK3MTC8wtsJUDDd"
            },
            "description": "List of tags attached to this member."
          },
          "enrollment_status": {
            "type": "string",
            "enum": [
              "enrolled",
              "not_enrolled",
              "redacted"
            ],
            "description": "Current status of the member's enrollment in receiving care services. By default, newly created members are in the `enrolled` status. If a member is not actively receiving care, use the `not_enrolled` status.\n\nWhen viewing a member with `access_level = 'limited'`, the value of `enrollment_status` will be `redacted`. This is not valid as an input.",
            "example": "enrolled"
          },
          "access_level": {
            "type": "string",
            "enum": [
              "full",
              "limited"
            ],
            "description": "Indicates whether any of the member's information has been redacted for security reasons. Possible values are: full - all member fields that are populated in Source have been returned, for example a member viewing themselves, or a care team or API key retrieving a member within their account; or limited - only some very basic identifying information such as name and profile image has been returned, for example a caregiver who can see another caregiver participating in message threads for a member they are both related to, even when the caregivers are not directly related.",
            "example": "full"
          },
          "external_identifiers": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "integration": {
                  "oneOf": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/components/schemas/integration"
                    }
                  ],
                  "x-expandable": {
                    "$ref": "#/components/schemas/integration"
                  },
                  "description": "Expandable reference to an Integration",
                  "example": "int_CoI0pt2LSWjGOTWRLZeT"
                },
                "external_id": {
                  "type": "string",
                  "description": "The unique identifier of the member in the integrated system.",
                  "example": "ext_ybNXqZDkat6pJ7d39Zx9"
                }
              },
              "required": [
                "integration",
                "external_id"
              ]
            },
            "description": "An array of external identifiers for the member. Each identifier is associated with a particular external integration. The member's external identifier must be unique for a given integration."
          },
          "custom_fields": {
            "type": "object",
            "additionalProperties": {},
            "description": "Custom fields associated with the user. Custom fields must be registered with the Fields API before they can be used on resources, such as a member.\n\nOnce you've created a custom field, its value will be returned on the related member. You may also use custom fields when filtering members, using the List all Members endpoint."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the member was created.",
            "example": "2021-05-13T16:33:00.000Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the member was last updated.",
            "example": "2021-05-13T16:33:00.000Z"
          }
        },
        "required": [
          "object",
          "id",
          "title",
          "first_name",
          "middle_name",
          "last_name",
          "preferred_name",
          "email",
          "date_of_birth",
          "time_zone",
          "sex_at_birth",
          "administrative_gender",
          "gender_identity",
          "pronouns",
          "address",
          "phone_numbers",
          "care_team",
          "profile_image",
          "license_region",
          "tags",
          "enrollment_status",
          "access_level",
          "external_identifiers",
          "custom_fields",
          "created_at",
          "updated_at"
        ],
        "title": "Member",
        "description": "Members are people who may receive care from you or who interact with your team, such as caregivers for those receiving care.\n\nMost operations in the Source platform center around a particular member. You can create new members at any time.",
        "x-resourceId": "member",
        "x-package": null
      },
      "message": {
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "default": "message",
            "enum": [
              "message"
            ],
            "example": "message",
            "description": "Always `message`."
          },
          "id": {
            "type": "string",
            "description": "Unique ID of this Message."
          },
          "type": {
            "type": "string",
            "enum": [
              "text",
              "system"
            ],
            "description": "The type of message that was sent. Text messages are messages from a member or user and represent most messages sent on the platform. System messages are automatically generated when notable thread events occur (such as reassignments and status changes).",
            "example": "text"
          },
          "thread": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/thread"
              }
            ],
            "x-expandable": {
              "$ref": "#/components/schemas/thread"
            },
            "description": "Thread to which the message belongs.",
            "example": "thrd_7BqeKrhbVU7c4Cigqs60"
          },
          "channel": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/channel"
              }
            ],
            "x-expandable": {
              "$ref": "#/components/schemas/channel"
            },
            "description": "The channel over which the message was sent. For messages sent via Source's in-app chat feature, the channel is null.",
            "example": "chan_wrsKSJ6PBE52n06UDyxV",
            "nullable": true
          },
          "channel_type": {
            "type": "string",
            "description": "The type of channel. Currently, Source supports chat (in-app messaging) and sms channel types.",
            "example": "sms"
          },
          "from": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/contact_point"
              }
            ],
            "nullable": true,
            "description": "Contact point from which the message was sent. For inbound messages from a member or caregiver, this value is the contact point they used (for example, the member's phone number). For outbound messages from the care team, this value is the channel's contact point (for example, the practice's provisioned phone number).",
            "example": {
              "system": "phone",
              "value": "12125551234"
            }
          },
          "to": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/contact_point"
              }
            ],
            "nullable": true,
            "description": "Contact point to which the message was sent. For inbound messages from a member or caregiver, this value is the channel's contact point (for example, the practice's provisioned phone number). For outbound messages sent to a member or caregiver, this value is the contact point of the member or caregiver (for example, the member's phone number).",
            "example": {
              "system": "phone",
              "value": "12125556789"
            }
          },
          "text": {
            "type": "string",
            "description": "Plain text contents of the message."
          },
          "sender": {
            "anyOf": [
              {
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "$ref": "#/components/schemas/member"
                  }
                ],
                "x-expandable": {
                  "$ref": "#/components/schemas/member"
                },
                "description": "Expandable reference to a Member",
                "example": "mem_JAfPRRc59eh2YQ1aeL3D"
              },
              {
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "$ref": "#/components/schemas/user"
                  }
                ],
                "x-expandable": {
                  "$ref": "#/components/schemas/user"
                },
                "description": "Expandable reference to a User",
                "example": "usr_NC6MQ3FyxddKoJJpfSVL"
              },
              {
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "$ref": "#/components/schemas/api_key"
                  }
                ],
                "x-expandable": {
                  "$ref": "#/components/schemas/api_key"
                },
                "description": "Expandable reference to an Api Key",
                "example": "key_XRJbHlfuCKSZQ1T2U0ax"
              }
            ],
            "description": "The person or api key who sent this message."
          },
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "sent",
              "failed"
            ],
            "description": "The current status of the message. For messages sent via Source's in-app chat feature, messages go directly to the 'sent' status. For all other channels, the message is created in a 'pending' status and then transitions to the 'sent' status upon successful sending, or the 'failed' status if an error occurs.",
            "example": "sent"
          },
          "sent_at": {
            "type": "string",
            "format": "date-time",
            "description": "The time at which this message was sent.",
            "example": "2021-05-13T16:33:00.000Z"
          },
          "direction": {
            "type": "string",
            "enum": [
              "inbound",
              "outbound"
            ],
            "description": "Inbound or outbound from the perspective of the care team. All messages sent by members have an inbound direction. This field can be useful when displaying a thread in a member experience, with messages from the care team on one side of the display and messages from the member on the opposite side.",
            "example": "outbound"
          },
          "attachments": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "file",
                    "link"
                  ],
                  "description": "The type of attachment. Currently, the only supported attachment types are `file` and `link`, but other attachment types may be added.",
                  "example": "file"
                },
                "description": {
                  "type": "string",
                  "nullable": true,
                  "description": "A description of the attachment. If a file uploaded to Source is attached, the file's name is displayed. Otherwise, this description is displayed.",
                  "example": "3T0x2MAZmnIngkcFO3O6.pdf"
                },
                "url": {
                  "type": "string",
                  "description": "The URL where the attachment's contents can be accessed. For link attachments, the link to redirect. For file attachments, the URL returned by Source is a link to the file.",
                  "example": "https://files.fileserver.com/3T0x2MAZmnIngkcFO3O6.pdf"
                },
                "resource": {
                  "oneOf": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/components/schemas/file"
                    }
                  ],
                  "x-expandable": {
                    "$ref": "#/components/schemas/file"
                  },
                  "description": "The resource which is attached to the message",
                  "example": "file_gdIyXM9d4LKGnewOV4OM",
                  "nullable": true
                },
                "metadata": {
                  "type": "object",
                  "additionalProperties": {},
                  "description": "A map of your own metadata to be included alongside this attachment. For example, you can use this metadata for bookkeeping or rendering in your member experience.\n\nMetadata may only be set when calling the API with your API keys. It cannot be set when using member tokens.",
                  "example": {
                    "patient_id": 456789,
                    "visit_id": "123"
                  }
                }
              },
              "required": [
                "type",
                "description",
                "url",
                "resource",
                "metadata"
              ]
            },
            "description": "Any attachments to the message, such as files and links."
          },
          "impersonated_by": {
            "type": "string",
            "nullable": true,
            "description": "The API key who created the message on behalf of `sender`. If null, the message sender was not impersonated.",
            "example": null
          },
          "redacted_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "The time at which this message redacted.",
            "example": "2021-05-13T16:33:00.000Z"
          }
        },
        "required": [
          "object",
          "id",
          "type",
          "thread",
          "channel",
          "channel_type",
          "from",
          "to",
          "text",
          "sender",
          "status",
          "sent_at",
          "direction",
          "attachments",
          "impersonated_by",
          "redacted_at"
        ],
        "title": "Message",
        "description": "Messages are exchanged between members and their care team.\n\nEach thread in the communications product consists of individual messages. Messages can be sent either from the member or their care team. You can create rich messaging experiences for your patients by building on top of our API or by using our React SDK inside your patient experience.",
        "x-resourceId": "message",
        "x-package": "communications"
      },
      "note": {
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "default": "note",
            "enum": [
              "note"
            ],
            "example": "note",
            "description": "Always `note`."
          },
          "id": {
            "type": "string",
            "example": "note_8pitvSre35TyAyhSVIzA",
            "description": "Unique ID for the note."
          },
          "encounter": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/encounter"
              }
            ],
            "x-expandable": {
              "$ref": "#/components/schemas/encounter"
            },
            "description": "Encounter to which this note belongs.",
            "example": "enc_05j8GyFykJwGI5pEyUmY"
          },
          "member": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/member"
              }
            ],
            "x-expandable": {
              "$ref": "#/components/schemas/member"
            },
            "description": "Member to which this note belongs.",
            "example": "mem_JAfPRRc59eh2YQ1aeL3D"
          },
          "author": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/user"
              }
            ],
            "x-expandable": {
              "$ref": "#/components/schemas/user"
            },
            "description": "Author of this note. The author must always be a user and cannot be modified once the note is created. If a new author is required for a note, the original note must be superseded.",
            "example": "usr_NC6MQ3FyxddKoJJpfSVL"
          },
          "latest_version": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/note_version"
              }
            ],
            "x-wrapped": true,
            "description": "Latest version of the note. The latest version is automatically updated as the note is drafted and signed."
          },
          "signed_version": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/note"
              }
            ],
            "x-expandable": {
              "$ref": "#/components/schemas/note"
            },
            "description": "Finalized, signed version of the note. Once signed, a note cannot be modified, except by superseding the note. A subsequent version may only be created by the system, for example in order to populate references to other resources within the structure of the note.",
            "example": "nv_CtPZUd5nZ3QOKKGgq0Mg",
            "nullable": true
          },
          "signed_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Timestamp when the note was signed.",
            "example": "2021-05-13T16:33:00.000Z"
          },
          "superseded_by": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/note"
              }
            ],
            "x-expandable": {
              "$ref": "#/components/schemas/note"
            },
            "description": "Identifier of the note that supersedes this note. You can supersede a signed note in order to addend or  correct the original note.",
            "example": "note_FqDRM52wu8lQoUnJsXBH",
            "nullable": true
          },
          "supersedes": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/note"
              }
            ],
            "x-expandable": {
              "$ref": "#/components/schemas/note"
            },
            "description": " Identifier of the note that this note supersedes.",
            "example": "note_FqDRM52wu8lQoUnJsXBH",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the note was created.",
            "example": "2021-05-13T16:33:00.000Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the note was last updated.",
            "example": "2021-05-13T16:33:00.000Z"
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Timestamp of when the note was deleted.",
            "example": "2021-05-13T16:33:00.000Z"
          }
        },
        "required": [
          "object",
          "id",
          "encounter",
          "member",
          "author",
          "latest_version",
          "signed_version",
          "signed_at",
          "superseded_by",
          "supersedes",
          "created_at",
          "updated_at",
          "deleted_at"
        ],
        "title": "Note",
        "description": "A note represents the structured documentation of an encounter.\n\nDepending on your needs, you can create notes to document new information, decisions, and actions made as part  of an encounter. Every note relates to a single encounter, and you can choose what encounters require a note.\n\nEach note has a single author who is the only user who can modify or sign the note once it is created, other than  an API key acting on behalf of the author. Once signed, the note cannot be changed and the latest note version is  considered the final note. A user can supersede a signed note with a new note, when necessary to correct or addend  the original note.",
        "x-resourceId": "note",
        "x-package": "clinical",
        "x-preview": true
      },
      "note_content_node": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "attrs": {
            "type": "object",
            "additionalProperties": {}
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/note_content_node"
            }
          },
          "marks": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string"
                },
                "attrs": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            }
          },
          "text": {
            "type": "string"
          }
        }
      },
      "note_version": {
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "default": "note_version",
            "enum": [
              "note_version"
            ],
            "example": "note_version",
            "description": "Always `note_version`."
          },
          "id": {
            "type": "string",
            "example": "nv_aWYK3Ie1SnNFeIQQceoG",
            "description": "Unique ID for the note version."
          },
          "note": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/note"
              }
            ],
            "x-expandable": {
              "$ref": "#/components/schemas/note"
            },
            "description": "Parent note of this note version",
            "example": "note_FqDRM52wu8lQoUnJsXBH"
          },
          "author_type": {
            "type": "string",
            "enum": [
              "user",
              "system"
            ],
            "description": "The type of author of this note version. If the type is `system`, this note version was automatically created by the system, for example in order to populate references to other resources within the structure of the note."
          },
          "author": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/user"
              }
            ],
            "x-expandable": {
              "$ref": "#/components/schemas/user"
            },
            "description": "Author of this note version. The author must always be a user.",
            "example": "usr_NC6MQ3FyxddKoJJpfSVL",
            "nullable": true
          },
          "impersonated_by": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/api_key"
              }
            ],
            "x-expandable": {
              "$ref": "#/components/schemas/api_key"
            },
            "description": "The API key who created the note version on behalf of the author. If null, the note version's author was not impersonated.",
            "example": "key_XRJbHlfuCKSZQ1T2U0ax",
            "nullable": true
          },
          "version": {
            "type": "number",
            "description": "Version number of this note version. The version number is automatically incremented by the system when a new note version is created."
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/note_content_node"
            },
            "description": "Content of the note version. The content can consist of text and structured data. Keep in mind that the content structure is subject to change over time as note features are developed."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the note version was created.",
            "example": "2021-05-13T16:33:00.000Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the note version was last updated.",
            "example": "2021-05-13T16:33:00.000Z"
          }
        },
        "required": [
          "object",
          "id",
          "note",
          "author_type",
          "author",
          "impersonated_by",
          "version",
          "content",
          "created_at",
          "updated_at"
        ],
        "title": "Note Version",
        "description": "Note versions contain the content of an instance of a note. Each note may have multiple versions, with the  latest version reflecting the most up-to-date content of the note. A signed note only ever has a single  signed version.",
        "x-resourceId": "note_version",
        "x-package": "clinical",
        "x-preview": true
      },
      "notification_preferences": {
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "default": "notification_preferences",
            "enum": [
              "notification_preferences"
            ],
            "example": "notification_preferences",
            "description": "Always `notification_preferences`."
          },
          "recipient": {
            "anyOf": [
              {
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "$ref": "#/components/schemas/member"
                  }
                ],
                "x-expandable": {
                  "$ref": "#/components/schemas/member"
                },
                "description": "Expandable reference to a Member",
                "example": "mem_JAfPRRc59eh2YQ1aeL3D"
              },
              {
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "$ref": "#/components/schemas/user"
                  }
                ],
                "x-expandable": {
                  "$ref": "#/components/schemas/user"
                },
                "description": "Expandable reference to a User",
                "example": "usr_NC6MQ3FyxddKoJJpfSVL"
              }
            ],
            "description": "The recipient to which these preferences belong."
          },
          "notifications": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "app": {
                  "type": "boolean",
                  "description": "Whether or not this notification is enabled via in-app notifications."
                },
                "email": {
                  "type": "boolean",
                  "description": "Whether or not this notification is enabled via email."
                },
                "sms": {
                  "type": "boolean",
                  "description": "Whether or not this notification is enabled via SMS. Please contact the Source team to enable SMS capabilities for your account."
                }
              },
              "required": [
                "app",
                "email",
                "sms"
              ]
            },
            "description": "The settings for all notifications that apply to the recipient type. Each notification will have a key in this dictionary, and the value will be the configuration for that notification."
          }
        },
        "required": [
          "object",
          "recipient",
          "notifications"
        ],
        "description": "Notification preferences allow you to control how Source contacts members and users of important activity. Using this API, you can enable or disable notifications for each member individually across each channel.\n\nIf you'd like to globally enable or disable certain notifications, you can manage these settings through the notifications page of the Source Administration dashboard.",
        "x-resourceId": "notification_preferences",
        "x-package": null
      },
      "order": {
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "default": "order",
            "enum": [
              "order"
            ],
            "example": "order",
            "description": "Always `order`."
          },
          "id": {
            "type": "string",
            "description": "Unique ID for the order.",
            "example": "ord_0EipsUv2yRFxynHshisN"
          },
          "member": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/member"
              }
            ],
            "x-expandable": {
              "$ref": "#/components/schemas/member"
            },
            "description": "The member that should receive this order.",
            "example": "mem_JAfPRRc59eh2YQ1aeL3D"
          },
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "fulfilled",
              "canceled"
            ],
            "description": "Current status of the order.",
            "example": "pending"
          },
          "shipping_address": {
            "type": "object",
            "properties": {
              "street_line_1": {
                "type": "string",
                "description": "The first line of the street address.",
                "example": "1 City Point"
              },
              "street_line_2": {
                "type": "string",
                "nullable": true,
                "description": "The second line of the street address."
              },
              "city": {
                "type": "string",
                "description": "The city.",
                "example": "Brooklyn"
              },
              "region": {
                "type": "string",
                "description": "The region - in the US this should be the two-letter state code.",
                "example": "NY"
              },
              "postal_code": {
                "type": "string",
                "description": "The postal code (i.e. zip code).",
                "example": "11215"
              },
              "country": {
                "type": "string",
                "description": "The country, as a two-letter ISO 3166-1 code. US is the only supported country at this time.",
                "example": "US"
              }
            },
            "required": [
              "street_line_1",
              "street_line_2",
              "city",
              "region",
              "postal_code",
              "country"
            ],
            "description": "Address to which the order will be shipped."
          },
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "object": {
                  "type": "string",
                  "default": "order_item",
                  "enum": [
                    "order_item"
                  ],
                  "example": "order_item",
                  "description": "Always `order_item`."
                },
                "id": {
                  "type": "string",
                  "description": "Unique ID of the order line item"
                },
                "product": {
                  "oneOf": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/components/schemas/product"
                    }
                  ],
                  "x-expandable": {
                    "$ref": "#/components/schemas/product"
                  },
                  "description": "Expandable reference to a Product",
                  "example": "prod_m0zvh4UpfvtRZasxVUwE"
                },
                "quantity": {
                  "type": "number",
                  "minimum": 1,
                  "description": "Quantity of this product in the line item.",
                  "example": 1
                },
                "unit_price": {
                  "type": "number",
                  "description": "Unit price for the line item (in cents).",
                  "example": 1500
                },
                "tax_total": {
                  "type": "number",
                  "description": "Tax amount for this line item (in cents).",
                  "example": 500
                },
                "total": {
                  "type": "number",
                  "description": "Total amount for this line item, including taxes (in cents).",
                  "example": 2000
                }
              },
              "required": [
                "object",
                "id",
                "product",
                "quantity",
                "unit_price",
                "tax_total",
                "total"
              ]
            },
            "description": "Items included in the order."
          },
          "fulfillment": {
            "type": "object",
            "properties": {
              "object": {
                "type": "string",
                "default": "fulfillment",
                "enum": [
                  "fulfillment"
                ],
                "example": "fulfillment",
                "description": "Always `fulfillment`."
              },
              "id": {
                "type": "string",
                "description": "Unique ID of the fulfillment."
              },
              "carrier": {
                "type": "string",
                "description": "Carrier that was used to fulfill the order.",
                "example": "UPS"
              },
              "tracking_number": {
                "type": "string",
                "description": "Tracking number for the package.",
                "example": "1Z1982039810391830"
              },
              "tracking_url": {
                "type": "string",
                "description": "Tracking URL to view the shipment status.",
                "example": "https://example.com/tracking/1Z1982039810391830"
              },
              "shipped_at": {
                "type": "string",
                "format": "date-time",
                "nullable": true,
                "description": "Timestamp when the fulfillment was shipped."
              }
            },
            "required": [
              "object",
              "id",
              "carrier",
              "tracking_number",
              "tracking_url",
              "shipped_at"
            ],
            "nullable": true,
            "description": "Fulfillment details for the order, if it has been fulfilled."
          },
          "subtotal": {
            "type": "number",
            "description": "Subtotal of all items on the order, not including tax or shipping (in cents).",
            "example": 15000
          },
          "shipping_subtotal": {
            "type": "number",
            "description": "Shipping amount for the order (in cents).",
            "example": 2000
          },
          "shipping_tax": {
            "type": "number",
            "description": "Tax amount paid, if applicable, on shipping (in cents)",
            "example": 100
          },
          "tax_total": {
            "type": "number",
            "description": "Tax amount for the order (in cents).",
            "example": 1500
          },
          "total": {
            "type": "number",
            "description": "Total inclusive of all taxes and shipping charges (in cents).",
            "example": 18500
          },
          "currency": {
            "type": "string",
            "description": "Currency of the order, as an ISO 4217 3-letter code.",
            "example": "USD"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the order was created.",
            "example": "2021-05-13T16:33:00.000Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the order was last updated.",
            "example": "2021-05-13T16:33:00.000Z"
          }
        },
        "required": [
          "object",
          "id",
          "member",
          "status",
          "shipping_address",
          "items",
          "fulfillment",
          "subtotal",
          "shipping_subtotal",
          "shipping_tax",
          "tax_total",
          "total",
          "currency",
          "created_at",
          "updated_at"
        ],
        "title": "Order",
        "x-resourceId": "order",
        "x-package": "monitoring"
      },
      "product": {
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "default": "product",
            "enum": [
              "product"
            ],
            "example": "product",
            "description": "Always product."
          },
          "id": {
            "type": "string",
            "description": "Unique ID of the product"
          },
          "name": {
            "type": "string",
            "description": "The human-readable name of the product"
          },
          "unit_price": {
            "type": "number",
            "description": "Unit price of this product (in cents).",
            "example": 1500
          },
          "device_model": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/device_model"
              }
            ],
            "x-expandable": {
              "$ref": "#/components/schemas/device_model"
            },
            "description": "Expandable reference to the DeviceModel",
            "example": "devm_i34fkCzQpZM0vatw9fMn",
            "nullable": true
          }
        },
        "required": [
          "object",
          "id",
          "name",
          "unit_price",
          "device_model"
        ],
        "title": "Product",
        "description": "A Product is an item that can be added to an order, for example a connected medical device. When the Product does correspond to a device, the expandable 'device_model' field will indicate they type of device.",
        "x-resourceId": "product",
        "x-package": null
      },
      "Question": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "name",
                "enum": [
                  "name"
                ],
                "example": "name"
              },
              "title": {
                "type": "string",
                "description": "Display title of this question in the form, i.e. the question text itself.",
                "example": "How do you feel today?"
              },
              "description": {
                "type": "string",
                "description": "An optional secondary text for this question, which will be displayed under the title and can contain, for example, instructions on how to answer the question."
              },
              "required": {
                "type": "boolean",
                "description": "Whether a response to this question is required or optional. Questions that are hidden by conditional rules are never required to have a response."
              },
              "key": {
                "type": "string",
                "minLength": 1,
                "maxLength": 255,
                "pattern": "^[a-zA-Z0-9_]+$",
                "description": "Unique key of this item within the form. Used in responses and conditional logic.",
                "example": "demographics_name"
              },
              "conditional": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CompoundConditional"
                  }
                ],
                "x-wrapped": true,
                "description": "A conditional statement - if it evaluates to true, this question will be displayed, if false the question will not be displayed and no response will be recorded for it."
              },
              "destination": {
                "type": "string",
                "enum": [
                  "member.name"
                ],
                "description": "Indicates that the response from this question should be used to populate or update the member's name."
              },
              "fields": {
                "type": "object",
                "properties": {
                  "preferred": {
                    "type": "string",
                    "enum": [
                      "none",
                      "optional",
                      "required"
                    ],
                    "description": "Indicates whether the given sub-field should be displayed or not, and if so, whether a response is optional or required.",
                    "example": "optional"
                  }
                },
                "required": [
                  "preferred"
                ],
                "description": "Indicates which fields are optional, required, or should not be shown at all."
              }
            },
            "required": [
              "type",
              "title",
              "required",
              "key",
              "fields"
            ],
            "description": "A question for recording a person's name. Source uses multiple fields for names: First, middle, and last names, and an optional 'preferred' name field which can be disabled."
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "date",
                "enum": [
                  "date"
                ],
                "example": "date"
              },
              "title": {
                "type": "string",
                "description": "Display title of this question in the form, i.e. the question text itself.",
                "example": "How do you feel today?"
              },
              "description": {
                "type": "string",
                "description": "An optional secondary text for this question, which will be displayed under the title and can contain, for example, instructions on how to answer the question."
              },
              "required": {
                "type": "boolean",
                "description": "Whether a response to this question is required or optional. Questions that are hidden by conditional rules are never required to have a response."
              },
              "key": {
                "type": "string",
                "minLength": 1,
                "maxLength": 255,
                "pattern": "^[a-zA-Z0-9_]+$",
                "description": "Unique key of this item within the form. Used in responses and conditional logic.",
                "example": "demographics_name"
              },
              "conditional": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CompoundConditional"
                  }
                ],
                "x-wrapped": true,
                "description": "A conditional statement - if it evaluates to true, this question will be displayed, if false the question will not be displayed and no response will be recorded for it."
              },
              "destination": {
                "type": "string",
                "enum": [
                  "member.date_of_birth"
                ],
                "description": "Indicates that the response from this question should be used to populate or update the member's date of birth."
              },
              "input_type": {
                "type": "string",
                "enum": [
                  "date_picker",
                  "date_entry"
                ],
                "description": "Which type of UI element to use - a calendar-style date picker or direct keyboard entry input box."
              }
            },
            "required": [
              "type",
              "title",
              "required",
              "key",
              "input_type"
            ],
            "description": "A question for recording a date. You can choose from two types of date input: one with a calendar-style date picker, intended for dates around the current date; and another designed for keyboard input, such as for historical dates like dates of birth."
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "address",
                "enum": [
                  "address"
                ],
                "example": "address"
              },
              "title": {
                "type": "string",
                "description": "Display title of this question in the form, i.e. the question text itself.",
                "example": "How do you feel today?"
              },
              "description": {
                "type": "string",
                "description": "An optional secondary text for this question, which will be displayed under the title and can contain, for example, instructions on how to answer the question."
              },
              "required": {
                "type": "boolean",
                "description": "Whether a response to this question is required or optional. Questions that are hidden by conditional rules are never required to have a response."
              },
              "key": {
                "type": "string",
                "minLength": 1,
                "maxLength": 255,
                "pattern": "^[a-zA-Z0-9_]+$",
                "description": "Unique key of this item within the form. Used in responses and conditional logic.",
                "example": "demographics_name"
              },
              "conditional": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CompoundConditional"
                  }
                ],
                "x-wrapped": true,
                "description": "A conditional statement - if it evaluates to true, this question will be displayed, if false the question will not be displayed and no response will be recorded for it."
              },
              "destination": {
                "type": "string",
                "enum": [
                  "member.address"
                ],
                "description": "Indicates that the response from this question should be used to populate or update the member's address."
              },
              "fields": {
                "type": "object",
                "properties": {
                  "street_line_1": {
                    "type": "string",
                    "enum": [
                      "none",
                      "optional",
                      "required"
                    ],
                    "description": "Indicates whether the given sub-field should be displayed or not, and if so, whether a response is optional or required.",
                    "example": "optional"
                  },
                  "street_line_2": {
                    "type": "string",
                    "enum": [
                      "none",
                      "optional",
                      "required"
                    ],
                    "description": "Indicates whether the given sub-field should be displayed or not, and if so, whether a response is optional or required.",
                    "example": "optional"
                  },
                  "city": {
                    "type": "string",
                    "enum": [
                      "none",
                      "optional",
                      "required"
                    ],
                    "description": "Indicates whether the given sub-field should be displayed or not, and if so, whether a response is optional or required.",
                    "example": "optional"
                  },
                  "postal_code": {
                    "type": "string",
                    "enum": [
                      "none",
                      "optional",
                      "required"
                    ],
                    "description": "Indicates whether the given sub-field should be displayed or not, and if so, whether a response is optional or required.",
                    "example": "optional"
                  }
                },
                "required": [
                  "street_line_1",
                  "street_line_2",
                  "city",
                  "postal_code"
                ],
                "description": "Indicates which fields are optional, required, or should not be shown at all."
              }
            },
            "required": [
              "type",
              "title",
              "required",
              "key",
              "fields"
            ],
            "description": "A question for recording an address. Source uses multiple fields for addresses: `region` (corresponding to US state) is required, and the others can be configured as optional, required, or not shown at all."
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "gender_identity",
                "enum": [
                  "gender_identity"
                ],
                "example": "gender_identity"
              },
              "title": {
                "type": "string",
                "description": "Display title of this question in the form, i.e. the question text itself.",
                "example": "How do you feel today?"
              },
              "description": {
                "type": "string",
                "description": "An optional secondary text for this question, which will be displayed under the title and can contain, for example, instructions on how to answer the question."
              },
              "required": {
                "type": "boolean",
                "description": "Whether a response to this question is required or optional. Questions that are hidden by conditional rules are never required to have a response."
              },
              "key": {
                "type": "string",
                "minLength": 1,
                "maxLength": 255,
                "pattern": "^[a-zA-Z0-9_]+$",
                "description": "Unique key of this item within the form. Used in responses and conditional logic.",
                "example": "demographics_name"
              },
              "conditional": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CompoundConditional"
                  }
                ],
                "x-wrapped": true,
                "description": "A conditional statement - if it evaluates to true, this question will be displayed, if false the question will not be displayed and no response will be recorded for it."
              },
              "destination": {
                "type": "string",
                "enum": [
                  "member.gender_identity"
                ],
                "description": "Indicates that the response from this question should be used to populate or update the member's gender identity. See also: sex at birth, pronouns."
              }
            },
            "required": [
              "type",
              "title",
              "required",
              "key"
            ],
            "description": "A question for recording a gender identity. Source supports selecting between some standardized values or entering a user-generated text response."
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "sex_at_birth",
                "enum": [
                  "sex_at_birth"
                ],
                "example": "sex_at_birth"
              },
              "title": {
                "type": "string",
                "description": "Display title of this question in the form, i.e. the question text itself.",
                "example": "How do you feel today?"
              },
              "description": {
                "type": "string",
                "description": "An optional secondary text for this question, which will be displayed under the title and can contain, for example, instructions on how to answer the question."
              },
              "required": {
                "type": "boolean",
                "description": "Whether a response to this question is required or optional. Questions that are hidden by conditional rules are never required to have a response."
              },
              "key": {
                "type": "string",
                "minLength": 1,
                "maxLength": 255,
                "pattern": "^[a-zA-Z0-9_]+$",
                "description": "Unique key of this item within the form. Used in responses and conditional logic.",
                "example": "demographics_name"
              },
              "conditional": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CompoundConditional"
                  }
                ],
                "x-wrapped": true,
                "description": "A conditional statement - if it evaluates to true, this question will be displayed, if false the question will not be displayed and no response will be recorded for it."
              },
              "destination": {
                "type": "string",
                "enum": [
                  "member.sex_at_birth"
                ],
                "description": "Indicates that the response from this question should be used to populate or update the member's sex at birth."
              }
            },
            "required": [
              "type",
              "title",
              "required",
              "key"
            ],
            "description": "A question for recording person's birth sex, which is a selection between standardized values only. See also: gender identity."
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "pronouns",
                "enum": [
                  "pronouns"
                ],
                "example": "pronouns"
              },
              "title": {
                "type": "string",
                "description": "Display title of this question in the form, i.e. the question text itself.",
                "example": "How do you feel today?"
              },
              "description": {
                "type": "string",
                "description": "An optional secondary text for this question, which will be displayed under the title and can contain, for example, instructions on how to answer the question."
              },
              "required": {
                "type": "boolean",
                "description": "Whether a response to this question is required or optional. Questions that are hidden by conditional rules are never required to have a response."
              },
              "key": {
                "type": "string",
                "minLength": 1,
                "maxLength": 255,
                "pattern": "^[a-zA-Z0-9_]+$",
                "description": "Unique key of this item within the form. Used in responses and conditional logic.",
                "example": "demographics_name"
              },
              "conditional": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CompoundConditional"
                  }
                ],
                "x-wrapped": true,
                "description": "A conditional statement - if it evaluates to true, this question will be displayed, if false the question will not be displayed and no response will be recorded for it."
              },
              "destination": {
                "type": "string",
                "enum": [
                  "member.pronouns"
                ],
                "description": "Indicates that the response from this question should be used to populate or update the member's pronouns."
              }
            },
            "required": [
              "type",
              "title",
              "required",
              "key"
            ],
            "description": "A question for recording a person's pronouns. Source supports selecting between some standardized values or entering a user-generated text response. See also: gender identity."
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "phone_numbers",
                "enum": [
                  "phone_numbers"
                ],
                "example": "phone_numbers"
              },
              "title": {
                "type": "string",
                "description": "Display title of this question in the form, i.e. the question text itself.",
                "example": "How do you feel today?"
              },
              "description": {
                "type": "string",
                "description": "An optional secondary text for this question, which will be displayed under the title and can contain, for example, instructions on how to answer the question."
              },
              "required": {
                "type": "boolean",
                "description": "Whether a response to this question is required or optional. Questions that are hidden by conditional rules are never required to have a response."
              },
              "key": {
                "type": "string",
                "minLength": 1,
                "maxLength": 255,
                "pattern": "^[a-zA-Z0-9_]+$",
                "description": "Unique key of this item within the form. Used in responses and conditional logic.",
                "example": "demographics_name"
              },
              "conditional": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CompoundConditional"
                  }
                ],
                "x-wrapped": true,
                "description": "A conditional statement - if it evaluates to true, this question will be displayed, if false the question will not be displayed and no response will be recorded for it."
              },
              "destination": {
                "type": "string",
                "enum": [
                  "member.phone_numbers"
                ],
                "description": "Indicates that the response from this question should be used to populate or update the member's phone numbers."
              },
              "allowed_uses": {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "home",
                    "work",
                    "mobile",
                    "fax",
                    "other"
                  ]
                },
                "description": "Control which 'use' values are allowed (e.g. 'mobile', or 'fax').",
                "example": [
                  "home",
                  "work",
                  "mobile",
                  "fax",
                  "other"
                ]
              },
              "max": {
                "type": "number",
                "description": "The maximum number of phone numbers that can be collected.",
                "example": 5
              }
            },
            "required": [
              "type",
              "title",
              "required",
              "key",
              "allowed_uses",
              "max"
            ],
            "description": "A question for recording phone numbers. Source supports multiple phone numbers for a member, and requires a 'use' value for each number (e.g. mobile, work, or fax.)"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "free_text",
                "enum": [
                  "free_text"
                ],
                "example": "free_text"
              },
              "title": {
                "type": "string",
                "description": "Display title of this question in the form, i.e. the question text itself.",
                "example": "How do you feel today?"
              },
              "description": {
                "type": "string",
                "description": "An optional secondary text for this question, which will be displayed under the title and can contain, for example, instructions on how to answer the question."
              },
              "required": {
                "type": "boolean",
                "description": "Whether a response to this question is required or optional. Questions that are hidden by conditional rules are never required to have a response."
              },
              "key": {
                "type": "string",
                "minLength": 1,
                "maxLength": 255,
                "pattern": "^[a-zA-Z0-9_]+$",
                "description": "Unique key of this item within the form. Used in responses and conditional logic.",
                "example": "demographics_name"
              },
              "conditional": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CompoundConditional"
                  }
                ],
                "x-wrapped": true,
                "description": "A conditional statement - if it evaluates to true, this question will be displayed, if false the question will not be displayed and no response will be recorded for it."
              }
            },
            "required": [
              "type",
              "title",
              "required",
              "key"
            ],
            "description": "A question type for recording free text responses in a single line of plain text."
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "long_text",
                "enum": [
                  "long_text"
                ],
                "example": "long_text"
              },
              "title": {
                "type": "string",
                "description": "Display title of this question in the form, i.e. the question text itself.",
                "example": "How do you feel today?"
              },
              "description": {
                "type": "string",
                "description": "An optional secondary text for this question, which will be displayed under the title and can contain, for example, instructions on how to answer the question."
              },
              "required": {
                "type": "boolean",
                "description": "Whether a response to this question is required or optional. Questions that are hidden by conditional rules are never required to have a response."
              },
              "key": {
                "type": "string",
                "minLength": 1,
                "maxLength": 255,
                "pattern": "^[a-zA-Z0-9_]+$",
                "description": "Unique key of this item within the form. Used in responses and conditional logic.",
                "example": "demographics_name"
              },
              "conditional": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CompoundConditional"
                  }
                ],
                "x-wrapped": true,
                "description": "A conditional statement - if it evaluates to true, this question will be displayed, if false the question will not be displayed and no response will be recorded for it."
              }
            },
            "required": [
              "type",
              "title",
              "required",
              "key"
            ],
            "description": "A question type for recording free text responses in a text area suitable for paragraphs."
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "number",
                "enum": [
                  "number"
                ],
                "example": "number"
              },
              "title": {
                "type": "string",
                "description": "Display title of this question in the form, i.e. the question text itself.",
                "example": "How do you feel today?"
              },
              "description": {
                "type": "string",
                "description": "An optional secondary text for this question, which will be displayed under the title and can contain, for example, instructions on how to answer the question."
              },
              "required": {
                "type": "boolean",
                "description": "Whether a response to this question is required or optional. Questions that are hidden by conditional rules are never required to have a response."
              },
              "key": {
                "type": "string",
                "minLength": 1,
                "maxLength": 255,
                "pattern": "^[a-zA-Z0-9_]+$",
                "description": "Unique key of this item within the form. Used in responses and conditional logic.",
                "example": "demographics_name"
              },
              "conditional": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CompoundConditional"
                  }
                ],
                "x-wrapped": true,
                "description": "A conditional statement - if it evaluates to true, this question will be displayed, if false the question will not be displayed and no response will be recorded for it."
              },
              "min": {
                "type": "number",
                "nullable": true,
                "description": "Control the minimum allowed value"
              },
              "max": {
                "type": "number",
                "nullable": true,
                "description": "Control the maximum allowed value"
              }
            },
            "required": [
              "type",
              "title",
              "required",
              "key"
            ],
            "description": "A question type for recording numerical responses as a single number, either an integer or decimal."
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "single_select",
                "enum": [
                  "single_select"
                ],
                "example": "single_select"
              },
              "title": {
                "type": "string",
                "description": "Display title of this question in the form, i.e. the question text itself.",
                "example": "How do you feel today?"
              },
              "description": {
                "type": "string",
                "description": "An optional secondary text for this question, which will be displayed under the title and can contain, for example, instructions on how to answer the question."
              },
              "required": {
                "type": "boolean",
                "description": "Whether a response to this question is required or optional. Questions that are hidden by conditional rules are never required to have a response."
              },
              "key": {
                "type": "string",
                "minLength": 1,
                "maxLength": 255,
                "pattern": "^[a-zA-Z0-9_]+$",
                "description": "Unique key of this item within the form. Used in responses and conditional logic.",
                "example": "demographics_name"
              },
              "conditional": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CompoundConditional"
                  }
                ],
                "x-wrapped": true,
                "description": "A conditional statement - if it evaluates to true, this question will be displayed, if false the question will not be displayed and no response will be recorded for it."
              },
              "options": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "key": {
                      "type": "string",
                      "description": "Hidden 'key' for this option. Must be unique within the question."
                    },
                    "label": {
                      "type": "string",
                      "description": "Display label for this option. Must be unique within the question."
                    },
                    "score": {
                      "type": "number"
                    }
                  },
                  "required": [
                    "key",
                    "label"
                  ],
                  "description": "Describes an option within a single- or multi-select input."
                },
                "description": "The list of options available for this question."
              },
              "other": {
                "type": "object",
                "properties": {
                  "label": {
                    "type": "string",
                    "description": "Display label for the 'other' option.",
                    "example": "Other (please tell us where)"
                  },
                  "required": {
                    "type": "boolean",
                    "description": "Whether or not a response to the free-text input is required if the responder selected 'other'",
                    "example": false
                  }
                },
                "required": [
                  "label",
                  "required"
                ],
                "description": "Controls whether a user-generated 'other' free text field is offered, and whether a free text response is required. If this object is blank or null, no 'other' option is presented.",
                "nullable": true,
                "example": null
              },
              "input_type": {
                "type": "string",
                "enum": [
                  "radio",
                  "drop_down"
                ],
                "description": "Control the input type of the single-select question.",
                "example": "drop_down"
              },
              "scoring_method": {
                "type": "string",
                "enum": [
                  "none",
                  "max"
                ]
              }
            },
            "required": [
              "type",
              "title",
              "required",
              "key",
              "options",
              "input_type"
            ],
            "description": "A question type for recording a single choice between provided options. Using the 'other' config, this question can optionally include a user-entered 'other' option."
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "multi_select",
                "enum": [
                  "multi_select"
                ],
                "example": "multi_select"
              },
              "title": {
                "type": "string",
                "description": "Display title of this question in the form, i.e. the question text itself.",
                "example": "How do you feel today?"
              },
              "description": {
                "type": "string",
                "description": "An optional secondary text for this question, which will be displayed under the title and can contain, for example, instructions on how to answer the question."
              },
              "required": {
                "type": "boolean",
                "description": "Whether a response to this question is required or optional. Questions that are hidden by conditional rules are never required to have a response."
              },
              "key": {
                "type": "string",
                "minLength": 1,
                "maxLength": 255,
                "pattern": "^[a-zA-Z0-9_]+$",
                "description": "Unique key of this item within the form. Used in responses and conditional logic.",
                "example": "demographics_name"
              },
              "conditional": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CompoundConditional"
                  }
                ],
                "x-wrapped": true,
                "description": "A conditional statement - if it evaluates to true, this question will be displayed, if false the question will not be displayed and no response will be recorded for it."
              },
              "options": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "key": {
                      "type": "string",
                      "description": "Hidden 'key' for this option. Must be unique within the question."
                    },
                    "label": {
                      "type": "string",
                      "description": "Display label for this option. Must be unique within the question."
                    },
                    "score": {
                      "type": "number"
                    }
                  },
                  "required": [
                    "key",
                    "label"
                  ],
                  "description": "Describes an option within a single- or multi-select input."
                },
                "description": "The list of options available for this question."
              },
              "other": {
                "type": "object",
                "properties": {
                  "label": {
                    "type": "string",
                    "description": "Display label for the 'other' option.",
                    "example": "Other (please tell us where)"
                  },
                  "required": {
                    "type": "boolean",
                    "description": "Whether or not a response to the free-text input is required if the responder selected 'other'",
                    "example": false
                  }
                },
                "required": [
                  "label",
                  "required"
                ],
                "description": "Controls whether user-generated 'other' free text fields is offered, and whether at least one free text response is required. If this object is blank or null, no 'other' option is presented.",
                "nullable": true,
                "example": null
              },
              "input_type": {
                "type": "string",
                "enum": [
                  "checkbox"
                ],
                "description": "Control the input type of the multi-select question.",
                "example": "checkbox"
              },
              "scoring_method": {
                "type": "string",
                "enum": [
                  "none",
                  "max",
                  "sum"
                ]
              }
            },
            "required": [
              "type",
              "title",
              "required",
              "key",
              "options",
              "input_type"
            ],
            "description": "A question type for recording a multiple choices among provided options. Using the 'other' config, this question can optionally include one or more user-generated 'other' options."
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "yes_no",
                "enum": [
                  "yes_no"
                ],
                "example": "yes_no"
              },
              "title": {
                "type": "string",
                "description": "Display title of this question in the form, i.e. the question text itself.",
                "example": "How do you feel today?"
              },
              "description": {
                "type": "string",
                "description": "An optional secondary text for this question, which will be displayed under the title and can contain, for example, instructions on how to answer the question."
              },
              "required": {
                "type": "boolean",
                "description": "Whether a response to this question is required or optional. Questions that are hidden by conditional rules are never required to have a response."
              },
              "key": {
                "type": "string",
                "minLength": 1,
                "maxLength": 255,
                "pattern": "^[a-zA-Z0-9_]+$",
                "description": "Unique key of this item within the form. Used in responses and conditional logic.",
                "example": "demographics_name"
              },
              "conditional": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CompoundConditional"
                  }
                ],
                "x-wrapped": true,
                "description": "A conditional statement - if it evaluates to true, this question will be displayed, if false the question will not be displayed and no response will be recorded for it."
              },
              "labels": {
                "type": "object",
                "properties": {
                  "yes": {
                    "type": "string",
                    "nullable": true,
                    "description": "Display label for the 'yes' option.",
                    "example": "True"
                  },
                  "no": {
                    "type": "string",
                    "nullable": true,
                    "description": "Display label for the 'no' option.",
                    "example": "False"
                  }
                },
                "nullable": true,
                "description": "Display labels for the yes or no options."
              }
            },
            "required": [
              "type",
              "title",
              "required",
              "key"
            ],
            "description": "A question type for recording a discrete yes or no response."
          }
        ],
        "discriminator": {
          "propertyName": "type"
        }
      },
      "queue": {
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "default": "queue",
            "enum": [
              "queue"
            ],
            "example": "queue",
            "description": "Always `queue`."
          },
          "id": {
            "type": "string",
            "example": "que_6NGuKD4KdMCGXLP6uBda",
            "description": "Unique ID for the queue."
          },
          "name": {
            "type": "string",
            "maxLength": 255,
            "description": "Public display name for this queue. The name must be unique across all queues.",
            "example": "Urgent Review"
          },
          "description": {
            "type": "string",
            "maxLength": 4096,
            "nullable": true,
            "description": "A description for this queue.",
            "example": null
          },
          "routing_strategy": {
            "type": "string",
            "enum": [
              "care_team_required",
              "care_team_preferred",
              "round_robin"
            ],
            "description": "Defines how a new task should be routed to the possible users defined in `routing_targets`. Because of the complexity in routing, it's best explained by example. Assume you have created a task that must be completed by a user in the Physicians group, which you have specified in the queue's `routing_targets`. The behavior of each routing strategy is as follows:\n\n* care_team_required - The task will be assigned only to a user who is in the Physicians group and who is on the member's care team. If there are no Physicians on the member's care team, the task will remain unassigned. If there are multiple Physicians on the member's care team, the first physician on the care team will be assigned the task.\n\n* care_team_preferred - The task will be assigned to a user who is in the Physicians group and is on the member's care team, if there are any. If there are no Physicians on the member's care team, the task will be assigned to another user in the Physicians group.\n\n* round_robin - The task will be assigned to a user in the Physicians group, and no preference will be given to users who are also on the member's care team.\n\nIf more than one group is listed in the queue's `routing_targets`, each group will be evaluated in order until a user assignment is found. If no user is found in any group, the task will remain unassigned.\n\nBy default, Source uses the `care_team_required` strategy to provide continuity of care and ensure patients have a consistent experience. However, this is not always the right task assignment strategy for all practices. In fact, even for a single practice, you may sometimes need to reach for another routing method.",
            "example": "care_team_required"
          },
          "routing_targets": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "group": {
                  "oneOf": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/components/schemas/group"
                    }
                  ],
                  "x-expandable": {
                    "$ref": "#/components/schemas/group"
                  },
                  "description": "Expandable reference to the group resource.",
                  "example": "grp_IlGhgsstvgsagl6lV89Q"
                }
              },
              "required": [
                "group"
              ]
            },
            "description": "The groups associated with the queue. The queue's groups define the users on care teams who will receive automatically routed tasks."
          },
          "replacement_queue": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/queue"
              }
            ],
            "x-expandable": {
              "$ref": "#/components/schemas/queue"
            },
            "description": "The ID of the queue to use as a replacement for task definitions and tasks that reference the deleted queue. If not specified, Source removes the reference to the deleted queue.",
            "example": "que_6NGuKD4KdMCGXLP6uBda"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the queue was created.",
            "example": "2021-05-13T16:33:00.000Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the queue was last updated.",
            "example": "2021-05-13T16:33:00.000Z"
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the queue was deleted, which is only present for deleted queues. Deleted queues are not typically returned by the API, however they are returned in `queue.deleted` events and expanded references on other objects.",
            "example": "2021-05-13T16:33:00.000Z"
          }
        },
        "required": [
          "object",
          "id",
          "name",
          "description",
          "routing_strategy",
          "routing_targets",
          "replacement_queue",
          "created_at",
          "updated_at"
        ],
        "title": "Queue",
        "description": "Queues describe tasks that are related by the fact that they are typically completed by a group of users. You can use queues alongside groups to configure how tasks are routed automatically to an assignee within and beyond a member's care team.",
        "x-resourceId": "queue",
        "x-package": null
      },
      "recurring_slot": {
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "default": "recurring_slot",
            "enum": [
              "recurring_slot"
            ],
            "example": "recurring_slot",
            "description": "Always `recurring_slot`."
          },
          "instances": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "start_at": {
                  "type": "string",
                  "description": "The start time of this recurring appointment slot.",
                  "example": "2021-05-13T16:33:00.000Z"
                },
                "end_at": {
                  "type": "string",
                  "description": "The end time of this recurring appointment slot.",
                  "example": "2021-05-13T16:33:00.000Z"
                },
                "conflicts": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "resource": {
                        "anyOf": [
                          {
                            "type": "string",
                            "example": "usr_qoGndHzx8KwdYsEByt9X"
                          },
                          {
                            "type": "string",
                            "example": "loc_EtTXhFHUtCXO1JWBd8TN"
                          }
                        ]
                      },
                      "reasons": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "enum": [
                            "existing_appointment",
                            "participant_unavailable",
                            "location_unavailable"
                          ]
                        }
                      }
                    },
                    "required": [
                      "resource",
                      "reasons"
                    ]
                  },
                  "description": "The reasons, if any, why one or more of the requested participants cannot be booked for this recurring appointment slot, provided as an array of conflict reasons per participant. When empty, all particpants have scheduled availability for this slot and none have conflicting appointments."
                }
              },
              "required": [
                "start_at",
                "end_at",
                "conflicts"
              ]
            }
          }
        },
        "required": [
          "object",
          "instances"
        ],
        "title": "Recurring Slot",
        "description": "Recurring slots represent the status of each instance of a series of recurring appointments.\n\nSource's scheduling APIs can be used to power rich member self-booking workflows. For recurring appointments, it is expected that the initial appointment time be selected first using the Slots API, then the status of each instance within the recurring series can be retrieved using this recurring slots API, before proceeding to book the series via the Appointments API.\n\nUnlike most other resources in the Source API, slots are not stored. As a result, they do not have an identifier, nor do they trigger any kind of events. Instead, slots are dynamically calculated as needed based on the availability of people in your team.",
        "x-resourceId": "recurring_slot",
        "x-package": "scheduling"
      },
      "relationship": {
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "default": "relationship",
            "enum": [
              "relationship"
            ],
            "example": "relationship",
            "description": "Always `relationship`."
          },
          "id": {
            "type": "string",
            "example": "rel_ggufPKOyKNNWF3TPPXuK",
            "description": "Unique ID for the relationship."
          },
          "subject_member": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/member"
              }
            ],
            "x-expandable": {
              "$ref": "#/components/schemas/member"
            },
            "description": "The member receiving care to whom the relationship applies.",
            "example": "mem_JAfPRRc59eh2YQ1aeL3D"
          },
          "authorized_member": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/member"
              }
            ],
            "x-expandable": {
              "$ref": "#/components/schemas/member"
            },
            "description": "The member acting as the related person for the `member`. For example, if a member consents to their spouse participating in their care, specify the spouse's member ID here.",
            "example": "mem_JAfPRRc59eh2YQ1aeL3D"
          },
          "status": {
            "type": "string",
            "enum": [
              "active",
              "inactive"
            ],
            "description": "Current status of the relationship. By default, newly created relationships have a status of 'active'. When a relationship is in a status of 'inactive', the authorized member can no longer access the member's data.",
            "example": "active"
          },
          "type": {
            "type": "string",
            "enum": [
              "brother",
              "child",
              "daughter",
              "father",
              "friend",
              "grandchild",
              "grandparent",
              "mother",
              "parent",
              "partner",
              "professional_caregiver",
              "sibling",
              "sister",
              "son",
              "spouse",
              "other"
            ],
            "description": "The type of relationship. If set to 'other', you must provide a description for the relationship.",
            "example": "spouse"
          },
          "description": {
            "type": "string",
            "maxLength": 4096,
            "nullable": true,
            "description": "A description for this relationship. Use the description to add detail about the relationship, such as whether the related member has power of attorney for the member.",
            "example": "Power Of Attorney"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the relationship was created.",
            "example": "2021-05-13T16:33:00.000Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the relationship was last updated.",
            "example": "2021-05-13T16:33:00.000Z"
          }
        },
        "required": [
          "object",
          "id",
          "subject_member",
          "authorized_member",
          "status",
          "type",
          "description",
          "created_at",
          "updated_at"
        ],
        "title": "Relationship",
        "description": "Relationships connect a member who is receiving care with a member who is involved in supporting that care. You can use relationships to allow caregivers, family members, or other people to whom the member has consented to participate in the member's care. Active relationships allow a caregiver to view, edit, and create data for a member, such as viewing and sending messages or booking appointments. The member to whom the relationship applies can view basic demographic information about the related person. You can create or update any number of relationships for a given member at any time.",
        "x-resourceId": "relationship",
        "x-package": null
      },
      "slot": {
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "default": "slot",
            "enum": [
              "slot"
            ],
            "example": "slot",
            "description": "Always `slot`."
          },
          "start_at": {
            "type": "string",
            "description": "The start time of this appointment slot. Slot start times will be calculated based on the available times of the bookable resources, as well as the selected appointment type's slot interval.",
            "example": "2021-05-13T16:33:00.000Z"
          },
          "end_at": {
            "type": "string",
            "description": "The end time of this appointment slot. Slot end times are determined by taking the slot start time and adding the appointment's duration. As a result, it's possible (indeed likely) for slots returned from the API to overlap. For example, if your appointment type has a 15 minute slot interval and a 30 minute duration, your slots will be 10:00-10:30, 10:15-10:45, 10:30-11:00, and so on.",
            "example": "2021-05-13T16:33:00.000Z"
          },
          "preferred": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/user"
              }
            ],
            "x-expandable": {
              "$ref": "#/components/schemas/user"
            },
            "description": "The preferred user to meet with if this slot is chosen. Source automatically determines a preferred user for each slot based on the routing preferences provided when looking up appointment slots.",
            "example": "usr_NC6MQ3FyxddKoJJpfSVL"
          },
          "available": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/components/schemas/user"
                }
              ],
              "x-expandable": {
                "$ref": "#/components/schemas/user"
              },
              "description": "Expandable reference to a User",
              "example": "usr_NC6MQ3FyxddKoJJpfSVL"
            },
            "description": "The list of all possible users who are available during this appointment slot, including the preferred user. We will only return users in this list if they are able to serve the provided appointment type, are available according to their availability, and have no conflicting appointments."
          }
        },
        "required": [
          "object",
          "start_at",
          "end_at",
          "preferred",
          "available"
        ],
        "title": "Slot",
        "description": "Slots represent chunks of time where a user is available for an appointment with a member.\n\nSource's scheduling APIs can be used to power rich member self-booking workflows. Typically, these experiences start by presenting a list of available appointment types (by querying the appointment types resource), and then present a list of slots by querying the slot availability APIs documented here.\n\nUnlike most other resources in the Source API, slots are not stored. As a result, they do not have an identifier, nor do they trigger any kind of events. Instead, slots are dynamically calculated as needed based on the availability of people in your team.",
        "x-resourceId": "slot",
        "x-package": "scheduling"
      },
      "tag": {
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "default": "tag",
            "enum": [
              "tag"
            ],
            "example": "tag",
            "description": "Always `tag`."
          },
          "id": {
            "type": "string",
            "example": "tag_ro2MsQK3MTC8wtsJUDDd",
            "description": "Unique ID for the tag."
          },
          "name": {
            "type": "string",
            "description": "Unique name of the tag that is used for display."
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "Description for this tag. The description is not displayed and is used to capture administrative notes about the tag."
          },
          "color": {
            "type": "string",
            "enum": [
              "gray",
              "blue",
              "teal",
              "yellow",
              "green",
              "red",
              "orange",
              "purple"
            ],
            "nullable": true,
            "description": "The color of the tag when displaying the tag. This is primarily used in the Source UI, but you're able to use this in your own system as well."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the tag was created.",
            "example": "2021-05-13T16:33:00.000Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the tag was last updated.",
            "example": "2021-05-13T16:33:00.000Z"
          },
          "archived_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Timestamp when the tag was archived. If the tag is not archived, this field is null.",
            "example": null
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the tag was deleted, which is only present for deleted tags. Deleted tags are not typically returned by the API, however they are returned in `tag.deleted` events and expanded references on other objects.",
            "example": "2021-05-13T16:33:00.000Z"
          }
        },
        "required": [
          "object",
          "id",
          "name",
          "description",
          "color",
          "created_at",
          "updated_at",
          "archived_at"
        ],
        "title": "Tag",
        "description": "Tags help you quickly define custom attributes that can be applied to another resource in Source. Currently, tags can only be applied to members. A member tag displays in the sidebar within a member's chart.\n\nYou can add, modify, archive, and delete tags via API as needed.",
        "x-resourceId": "tag",
        "x-package": null
      },
      "task": {
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "default": "task",
            "enum": [
              "task"
            ],
            "example": "task",
            "description": "Always `task`."
          },
          "id": {
            "type": "string",
            "example": "task_vAJyHgJ2VYwaYczijn9M",
            "description": "Unique ID for the task."
          },
          "definition": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/task_definition"
              }
            ],
            "x-expandable": {
              "$ref": "#/components/schemas/task_definition"
            },
            "description": "The type of task that needs to be completed.",
            "example": "tskd_2Lc2yr7YIYxfN3RCSlBU"
          },
          "member": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/member"
              }
            ],
            "x-expandable": {
              "$ref": "#/components/schemas/member"
            },
            "description": "The member for which the task should be performed.",
            "example": "mem_JAfPRRc59eh2YQ1aeL3D"
          },
          "assignee": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/user"
              }
            ],
            "x-expandable": {
              "$ref": "#/components/schemas/user"
            },
            "description": "The user to which this task is assigned. If set to null, the task is unassigned.",
            "example": "usr_NC6MQ3FyxddKoJJpfSVL",
            "nullable": true
          },
          "queue": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/queue"
              }
            ],
            "x-expandable": {
              "$ref": "#/components/schemas/queue"
            },
            "description": "The queue to which a task is assigned. When creating a task, if no queue is specified for the task, the task will use the queue of the task definition. If no queue exists on the task definition, the task will not be placed in a queue.",
            "example": "que_6NGuKD4KdMCGXLP6uBda",
            "nullable": true
          },
          "summary": {
            "type": "string",
            "description": "A human-readable string that describes the task at a high level. For system created tasks this field will be populated by the system.",
            "example": "Please follow up with patient"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "Long-form text describing the task to be performed. You can use this field to share any additional relevant context to the care team that will be acting on this task.",
            "example": "The member had a specific question about their medication and how it interacts with their Hypertension."
          },
          "status": {
            "type": "string",
            "enum": [
              "open",
              "in_progress",
              "blocked",
              "on_hold",
              "resolved",
              "canceled"
            ],
            "description": "Status the task is currently in",
            "example": "open"
          },
          "assignment_method": {
            "type": "string",
            "enum": [
              "direct",
              "indirect"
            ],
            "description": "This property allows you to see how the task was assigned. When we automatically assign tasks based on your pre-defined routing rules, the value of this property will be `indirect`. When an assignee is specified through the API or by a user in the interface, the value of this property will be `direct`.",
            "example": "direct"
          },
          "managed": {
            "type": "boolean",
            "description": "Whether or not the task is managed automatically by Source. If a task is managed, only Source can resolve or create the task. You can still update other properties of the task.\"",
            "example": false
          },
          "comments": {
            "type": "number",
            "description": "The number of comments that have been made on this task.",
            "example": 0
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the task was created.",
            "example": "2021-05-13T16:33:00.000Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the task was last updated.",
            "example": "2021-05-13T16:33:00.000Z"
          },
          "due_at": {
            "type": "string",
            "format": "date-time",
            "description": "The time by which this task should be completed",
            "example": "2021-10-10T00:10:00.000Z"
          },
          "related": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "resource_type": {
                  "type": "string",
                  "enum": [
                    "thread",
                    "encounter"
                  ],
                  "description": "Related object type",
                  "example": "thread"
                },
                "resource": {
                  "anyOf": [
                    {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "$ref": "#/components/schemas/thread"
                        }
                      ],
                      "x-expandable": {
                        "$ref": "#/components/schemas/thread"
                      },
                      "description": "Expandable reference to the message's thread.",
                      "example": "thrd_7BqeKrhbVU7c4Cigqs60"
                    },
                    {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "$ref": "#/components/schemas/encounter"
                        }
                      ],
                      "x-expandable": {
                        "$ref": "#/components/schemas/encounter"
                      },
                      "description": "Expandable reference to an Encounter",
                      "example": "enc_05j8GyFykJwGI5pEyUmY"
                    }
                  ],
                  "description": "Unique identifier for the related resource."
                }
              },
              "required": [
                "resource_type",
                "resource"
              ]
            },
            "description": "A list of related resources, such as open threads. The resource can be expanded with e.g. '&expand=related.resource'."
          }
        },
        "required": [
          "object",
          "id",
          "definition",
          "member",
          "assignee",
          "queue",
          "summary",
          "description",
          "status",
          "assignment_method",
          "managed",
          "comments",
          "created_at",
          "updated_at",
          "due_at",
          "related"
        ],
        "title": "Task",
        "description": "A Task represents a request for the care team to perform an action on behalf of a member. Tasks are the fundamental backbone of workflow in Source. Any time you need to surface information to a member of the care team, tasks should probably be your default choice.\n\nEach task is backed by a task definition which gives information about the structure of the work to be done, which you can read about in the documentation for task definitions.\n\nTasks can be created from any number of sources, including the API. The Source platform will generate tasks itself in many cases, such as when a member sends a message to their care team. When Source generates a task automatically, we will also resolve it automatically when the work has been completed (for example, when the care team replies to the member.)",
        "x-resourceId": "task",
        "x-package": null
      },
      "task_definition": {
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "default": "task_definition",
            "enum": [
              "task_definition"
            ],
            "example": "task_definition",
            "description": "Always `task_definition`."
          },
          "id": {
            "type": "string",
            "example": "tskd_2Lc2yr7YIYxfN3RCSlBU",
            "description": "Unique ID for the task definition."
          },
          "key": {
            "type": "string",
            "description": "Unique identifier for the task definition that can be used when creating tasks.",
            "example": "follow-up"
          },
          "name": {
            "type": "string",
            "description": "Human readable name of the task definition.",
            "example": "Follow Up"
          },
          "queue": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/queue"
              }
            ],
            "x-expandable": {
              "$ref": "#/components/schemas/queue"
            },
            "description": "The queue through which tasks should be routed. This queue will be applied by default. However, you can override the queue for a given task during task creation.",
            "example": "que_6NGuKD4KdMCGXLP6uBda",
            "nullable": true
          },
          "license_types": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string",
                  "description": "Code for the license type. For example, \"MD\".",
                  "example": "MD"
                },
                "description": {
                  "type": "string",
                  "description": "Description of the license type. For example, \"Doctor of Medcine\".",
                  "example": "Doctor of Medicine"
                }
              },
              "required": [
                "code",
                "description"
              ]
            },
            "description": "The user license(s) that are required to perform tasks of this type. Automatic task routing by Source respects licensing. If more than one license code is provided, a licensed user with any of the license codes can perform this task. Providing any value will override the entire array. Providing null or an empty array will empty out the array.",
            "example": [
              {
                "code": "MD",
                "description": "Doctor of Medicine"
              }
            ]
          },
          "managed": {
            "type": "boolean",
            "description": "Whether or not tasks are managed automatically by Source. Only Source can create tasks with managed task definitions, and those tasks may only be resolved by Source.",
            "example": false
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the task definition was created.",
            "example": "2021-05-13T16:33:00.000Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the task definition was last updated.",
            "example": "2021-05-13T16:33:00.000Z"
          }
        },
        "required": [
          "object",
          "id",
          "key",
          "name",
          "queue",
          "license_types",
          "managed",
          "created_at",
          "updated_at"
        ],
        "title": "Task Definition",
        "description": "Task definitions inform the structure of individual tasks.\n\nWhen creating a task definition, you can specify a key which can be used when creating new tasks.",
        "x-resourceId": "task_definition",
        "x-package": null
      },
      "thread": {
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "default": "thread",
            "enum": [
              "thread"
            ],
            "example": "thread",
            "description": "Always `thread`."
          },
          "id": {
            "type": "string",
            "description": "Unique ID of the thread.",
            "example": "thrd_7BqeKrhbVU7c4Cigqs60"
          },
          "member": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/member"
              }
            ],
            "x-expandable": {
              "$ref": "#/components/schemas/member"
            },
            "description": "The member to which this thread belongs.",
            "example": "mem_JAfPRRc59eh2YQ1aeL3D"
          },
          "channel": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/channel"
              }
            ],
            "x-expandable": {
              "$ref": "#/components/schemas/channel"
            },
            "description": "The channel used for this thread. For threads using Source's in-app chat feature, the channel is null.",
            "example": "chan_wrsKSJ6PBE52n06UDyxV",
            "nullable": true
          },
          "channel_type": {
            "type": "string",
            "description": "The type of channel. Currently, Source supports chat (in-app messaging) and sms channel types.",
            "example": "sms"
          },
          "last_remote_contact_point": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/contact_point"
              }
            ],
            "nullable": true,
            "description": "Contact point from which the last message was sent from a member or caregiver.",
            "example": {
              "system": "phone",
              "value": "12125556789"
            }
          },
          "assignee": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/user"
              }
            ],
            "x-expandable": {
              "$ref": "#/components/schemas/user"
            },
            "description": "The user who is assigned to the thread and will be notified of new messages.",
            "example": "usr_NC6MQ3FyxddKoJJpfSVL",
            "nullable": true
          },
          "status": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/thread_status"
              }
            ],
            "x-wrapped": true,
            "description": "Current status of the thread.",
            "example": "awaiting_care_team"
          },
          "subject": {
            "type": "string",
            "nullable": true,
            "description": "Subject of the thread.",
            "example": "Not feeling well"
          },
          "last_message": {
            "type": "object",
            "properties": {
              "channel": {
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "$ref": "#/components/schemas/channel"
                  }
                ],
                "x-expandable": {
                  "$ref": "#/components/schemas/channel"
                },
                "description": "The channel over which the message was sent. For messages sent via Source's in-app chat feature, the channel is null.",
                "example": "chan_wrsKSJ6PBE52n06UDyxV",
                "nullable": true
              },
              "channel_type": {
                "type": "string",
                "description": "The type of channel. Currently, Source supports chat (in-app messaging) and sms channel types.",
                "example": "sms"
              },
              "from": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/contact_point"
                  }
                ],
                "nullable": true,
                "description": "Contact point from which the message was sent. For inbound messages from a member or caregiver, this value is the contact point they used (for example, the member's phone number). For outbound messages from the care team, this value is the channel's contact point (for example, the practice's provisioned phone number).",
                "example": {
                  "system": "phone",
                  "value": "12125556789"
                }
              },
              "to": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/contact_point"
                  }
                ],
                "nullable": true,
                "description": "Contact point to which the message was sent. For inbound messages from a member or caregiver, this value is the channel's contact point (for example, the practice's provisioned phone number). For outbound messages sent to a member or caregiver, this value is the contact point of the member or caregiver (for example, the member's phone number).",
                "example": {
                  "system": "phone",
                  "value": "12125556789"
                }
              },
              "text": {
                "type": "string",
                "description": "Plain text contents of the message.",
                "example": "I have been feeling nauseous since yesterday afternoon."
              },
              "attachments": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "file",
                        "link"
                      ],
                      "description": "The type of attachment. Currently, the only supported attachment types are `file` and `link`, but other attachment types may be added.",
                      "example": "file"
                    },
                    "description": {
                      "type": "string",
                      "nullable": true,
                      "description": "A description of the attachment. If a file uploaded to Source is attached, the file's name is displayed. Otherwise, this description is displayed.",
                      "example": "3T0x2MAZmnIngkcFO3O6.pdf"
                    },
                    "url": {
                      "type": "string",
                      "description": "The URL where the attachment's contents can be accessed. For link attachments, the link to redirect. For file attachments, the URL returned by Source is a link to the file.",
                      "example": "https://files.fileserver.com/3T0x2MAZmnIngkcFO3O6.pdf"
                    },
                    "resource": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "$ref": "#/components/schemas/file"
                        }
                      ],
                      "x-expandable": {
                        "$ref": "#/components/schemas/file"
                      },
                      "description": "The resource which is attached to the message",
                      "example": "file_gdIyXM9d4LKGnewOV4OM",
                      "nullable": true
                    },
                    "metadata": {
                      "type": "object",
                      "additionalProperties": {},
                      "description": "A map of your own metadata to be included alongside this attachment. For example, you can use this metadata for bookkeeping or rendering in your member experience.\n\nMetadata may only be set when calling the API with your API keys. It cannot be set when using member tokens.",
                      "example": {
                        "patient_id": 456789,
                        "visit_id": "123"
                      }
                    }
                  },
                  "required": [
                    "type",
                    "description",
                    "url",
                    "resource",
                    "metadata"
                  ]
                },
                "description": "Any attachments to the message, such as files and links."
              },
              "sender": {
                "anyOf": [
                  {
                    "oneOf": [
                      {
                        "type": "string"
                      },
                      {
                        "$ref": "#/components/schemas/user"
                      }
                    ],
                    "x-expandable": {
                      "$ref": "#/components/schemas/user"
                    },
                    "description": "Expandable reference to a User",
                    "example": "usr_NC6MQ3FyxddKoJJpfSVL"
                  },
                  {
                    "oneOf": [
                      {
                        "type": "string"
                      },
                      {
                        "$ref": "#/components/schemas/member"
                      }
                    ],
                    "x-expandable": {
                      "$ref": "#/components/schemas/member"
                    },
                    "description": "Expandable reference to a Member",
                    "example": "mem_JAfPRRc59eh2YQ1aeL3D"
                  }
                ],
                "description": "The person who sent this message."
              },
              "status": {
                "type": "string",
                "enum": [
                  "pending",
                  "sent",
                  "failed"
                ],
                "description": "The current status of the message. For messages sent via Source's in-app chat feature, messages go directly to the 'sent' status. For all other channels, the message is created in a 'pending' status and then transitions to the 'sent' status upon successful sending, or the 'failed' status if an error occurs.",
                "example": "sent"
              },
              "sent_at": {
                "type": "string",
                "format": "date-time",
                "description": "The time at which this message was sent.",
                "example": "2021-05-13T16:33:00.000Z"
              },
              "direction": {
                "type": "string",
                "enum": [
                  "inbound",
                  "outbound"
                ],
                "description": "Inbound or outbound from the perspective of the care team. All messages sent by members have an inbound direction. This field can be useful when displaying a thread in a member experience, with messages from the care team on one side of the display and messages from the member on the opposite side.",
                "example": "outbound"
              },
              "redacted_at": {
                "type": "string",
                "format": "date-time",
                "nullable": true,
                "description": "The time at which this message redacted.",
                "example": null
              }
            },
            "required": [
              "channel",
              "channel_type",
              "from",
              "to",
              "text",
              "attachments",
              "sender",
              "status",
              "sent_at",
              "direction",
              "redacted_at"
            ],
            "description": "Preview of the most recent text message in the thread."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the thread was created.",
            "example": "2021-05-13T16:33:00.000Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the thread was last updated.",
            "example": "2021-05-13T16:33:00.000Z"
          },
          "closed_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Timestamp of when the thread was last closed.",
            "example": null
          },
          "member_last_read": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Timestamp indicating the point through which the member has read. All messages with a `sent_at` after this point are considered unread. If null, the member has not seen any messages on this thread.",
            "example": null
          },
          "last_message_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of the last message that was sent on this thread. This message has been read by the member if the last_read timestamp is greater than or equal to the last_message_at timestamp",
            "example": "2021-05-13T16:33:00.000Z"
          }
        },
        "required": [
          "object",
          "id",
          "member",
          "channel",
          "channel_type",
          "last_remote_contact_point",
          "assignee",
          "status",
          "subject",
          "last_message",
          "created_at",
          "updated_at",
          "closed_at",
          "member_last_read",
          "last_message_at"
        ],
        "title": "Thread",
        "description": "The Thread resource represents a conversation between a member and their care team.\n\nThreads can be created at any time, and contain multiple messages. Each thread has a status indicating where it sits in the lifecycle. For more information about the different thread states, see the documentation for the status property below.",
        "x-resourceId": "thread",
        "x-package": "communications"
      },
      "thread_status": {
        "type": "string",
        "enum": [
          "awaiting_care_team",
          "awaiting_member",
          "closed"
        ],
        "x-namespace": "thread"
      },
      "user": {
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "default": "user",
            "enum": [
              "user"
            ],
            "example": "user",
            "description": "Always `user`."
          },
          "id": {
            "type": "string",
            "example": "usr_qoGndHzx8KwdYsEByt9X",
            "description": "Unique ID for the user."
          },
          "title": {
            "type": "string",
            "nullable": true,
            "description": "Title of this user.",
            "example": "Dr."
          },
          "first_name": {
            "type": "string",
            "nullable": true,
            "description": "First name of the user.",
            "example": "John"
          },
          "last_name": {
            "type": "string",
            "nullable": true,
            "description": "Last name of the user.",
            "example": "Khan"
          },
          "suffix": {
            "type": "string",
            "nullable": true,
            "description": "Suffix for this user.",
            "example": "MD"
          },
          "display_title": {
            "type": "string",
            "maxLength": 50,
            "nullable": true,
            "description": "Display text that describes the user's title. The display title will appear in the Source application and the member experience SDKs but will not affect any Source configuration. For example, a physician user's title may be set to 'Physician.'",
            "example": "Physician"
          },
          "email": {
            "type": "string",
            "description": "Email address for the user.",
            "example": "you@yourcompany.com"
          },
          "role": {
            "type": "string",
            "enum": [
              "owner",
              "administrator",
              "developer",
              "clinician",
              "support"
            ],
            "description": "Role the user is granted in your account.",
            "example": "developer"
          },
          "time_zone": {
            "type": "string",
            "description": "The time zone identifier for this user. User time zones are used when checking their availability schedules, and may also be used when formatting times outside of the context of a browser (such as an email).",
            "example": "America/New_York"
          },
          "licensed": {
            "type": "boolean",
            "description": "Whether or not the user is a licensed clinician. By default, this is set to false. If set to true, note that the user should have licenses configured to be able to perform workflows that require licensure. For example, licensure may be required to receive certain tasks and appointments.",
            "example": false
          },
          "groups": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/components/schemas/group"
                }
              ],
              "x-expandable": {
                "$ref": "#/components/schemas/group"
              },
              "description": "Expandable reference to the group resource.",
              "example": "grp_IlGhgsstvgsagl6lV89Q"
            },
            "description": "The groups for this user, which must reference groups that exist in your account. A user can be a member of up to 20 groups."
          },
          "status": {
            "type": "string",
            "enum": [
              "active",
              "deactivated",
              "invited"
            ],
            "description": "Current status of the user. Possible status values are `active`, `invited`, and `deactivated`.",
            "example": "active"
          },
          "profile_image": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/file"
              }
            ],
            "x-expandable": {
              "$ref": "#/components/schemas/file"
            },
            "description": "The file for the user's profile image.",
            "example": "file_gdIyXM9d4LKGnewOV4OM",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the user was created.",
            "example": "2021-05-13T16:33:00.000Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the user was last updated.",
            "example": "2021-05-13T16:33:00.000Z"
          },
          "deactivated_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Timestamp when the user was last deactivated, if they have been deactivated.",
            "example": null
          }
        },
        "required": [
          "object",
          "id",
          "title",
          "first_name",
          "last_name",
          "suffix",
          "display_title",
          "email",
          "role",
          "time_zone",
          "licensed",
          "groups",
          "status",
          "profile_image",
          "created_at",
          "updated_at",
          "deactivated_at"
        ],
        "title": "User",
        "description": "Represents a user who has access to the Source account.\n\nYou can manage users within the Source application and specify their role, which determines the actions they're able to take on the platform.",
        "x-resourceId": "user",
        "x-package": null
      },
      "webhook": {
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "default": "webhook",
            "enum": [
              "webhook"
            ],
            "example": "webhook",
            "description": "Always `webhook`."
          },
          "id": {
            "type": "string",
            "description": "Unique ID of the webhook.",
            "example": "wbhk_xeechie3uqu5QuueSihi"
          },
          "url": {
            "type": "string",
            "description": "URL to which matching events will be delivered",
            "example": "https://example.com/catalyst-webhook"
          },
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/webhook_events"
            },
            "description": "Events that will be delivered to the webhook.",
            "example": [
              "account.updated"
            ]
          },
          "is_enabled": {
            "type": "boolean",
            "description": "Whether or not the webhook is currently enabled.",
            "example": true
          },
          "secret": {
            "type": "string",
            "description": "Signing secret to verify webhook sender (only available when the webhook is first created).",
            "example": "ReeheL1ooGood9Echeej"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the webhook was created.",
            "example": "2021-05-13T16:33:00.000Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the webhook was last updated.",
            "example": "2021-05-13T16:33:00.000Z"
          }
        },
        "required": [
          "object",
          "id",
          "url",
          "events",
          "is_enabled",
          "created_at",
          "updated_at"
        ],
        "title": "Webhook",
        "description": "Webhooks are our way of notifying you about new Events in your account.\n\nOnce a webhook is registered and enabled, each event matching the list of subscribed events will be delivered to the endpoint you choose. Your webhook will receive a copy of the [Event](https://docs.sourcehealth.com/docs/api/reference/event/) object associated with the webhook.\n\nYou can view more information about Source webhooks [here](https://docs.sourcehealth.com/docs/api/webhooks/).",
        "x-resourceId": "webhook",
        "x-package": null
      },
      "webhook_events": {
        "type": "string",
        "enum": [
          "account.updated",
          "appointment_type.created",
          "appointment_type.updated",
          "appointment_type.deleted",
          "appointment.created",
          "appointment.updated",
          "appointment.canceled",
          "appointment.deleted",
          "appointment.reminder",
          "availability.created",
          "availability.updated",
          "availability.deleted",
          "care_plan.created",
          "care_plan.updated",
          "care_plan.deleted",
          "care_team.created",
          "care_team.updated",
          "care_team.deleted",
          "comment.created",
          "comment.updated",
          "comment.deleted",
          "document.created",
          "document.updated",
          "document.deleted",
          "device.created",
          "device.activated",
          "device.deactivated",
          "device.deleted",
          "encounter.created",
          "encounter.updated",
          "encounter.deleted",
          "encounter_type.created",
          "encounter_type.updated",
          "encounter_type.archived",
          "encounter_type.unarchived",
          "file.created",
          "field.created",
          "field.updated",
          "field.deleted",
          "form.created",
          "form.updated",
          "form_response.created",
          "form_response.updated",
          "form_response.submitted",
          "form_version.created",
          "form_version.updated",
          "group.created",
          "group.updated",
          "group.deleted",
          "intent.created",
          "intent.updated",
          "license.created",
          "license.updated",
          "license.deleted",
          "location.created",
          "location.updated",
          "location.deleted",
          "measurement.created",
          "member.created",
          "member.updated",
          "member.deleted",
          "message.created",
          "message.redacted",
          "note.created",
          "note.updated",
          "note.deleted",
          "note.signed",
          "order.created",
          "order.shipped",
          "queue.created",
          "queue.updated",
          "queue.deleted",
          "relationship.created",
          "relationship.updated",
          "tag.created",
          "tag.updated",
          "tag.archived",
          "tag.unarchived",
          "tag.deleted",
          "task.created",
          "task.updated",
          "task_definition.created",
          "task_definition.updated",
          "thread.created",
          "thread.updated",
          "user.created",
          "user.updated",
          "user.deactivated",
          "user.reactivated",
          "webhook.created",
          "webhook.updated",
          "webhook.deleted"
        ]
      }
    }
  }
}