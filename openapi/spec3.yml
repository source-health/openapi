openapi: 3.0.0
info:
  version: "1.0"
  title: Catalyst API
  description: The Catalyst HTTP API
  contact:
    name: Catalyst Support
    email: support@withcatalyst.com
    url: https://docs.withcatalyst.com
servers:
  - url: https://api.withcatalyst.com
    description: Catalyst Production
security:
  - bearer: []
  - basic: []
tags: []
paths:
  "/v1/accounts/{id}":
    get:
      summary: Retrieve an Account
      description: >-
        Retrieves the details of an account.


        Supply the unique identifier of the account, or `current` to access your current account.
      tags:
        - Account
      parameters:
        - in: path
          style: simple
          explode: true
          name: id
          schema:
            type: string
            description: Unique ID of the account
          required: true
          description: Unique ID of the account
      responses:
        default:
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/account"
    post:
      summary: Update an Account
      description: >-
        Updates an account. At this time you can only update the account name
        and subdomain.


        Any parameters that are not provided in the request will be left unchanged.
      tags:
        - Account
      parameters:
        - in: path
          style: simple
          explode: true
          name: id
          schema:
            type: string
            description: Unique ID of the account
          required: true
          description: Unique ID of the account
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Name for the account.
                  example: Catalyst
                subdomain:
                  type: string
                  description: Subdomain for the account.
                  example: catalyst
      responses:
        default:
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/account"
  "/v1/users/{id}":
    get:
      summary: Find a User
      description: Retrieve a user by their unique identifier.
      tags:
        - User
      parameters:
        - in: path
          style: simple
          explode: true
          name: id
          schema:
            type: string
            description: Unique ID of the user
          required: true
          description: Unique ID of the user
      responses:
        default:
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"
  /v1/users:
    get:
      summary: List all Users
      description: >-
        Returns a list of users within the current account.


        The users returned are sorted by creation date, with the most recently added users appearing first.
      tags:
        - User
      parameters:
        - in: query
          style: form
          explode: true
          name: ending_before
          schema:
            type: string
            description: A cursor for use in pagination. `ending_before` is an object ID
              that defines your place in the list. For instance, if you make a
              list request and receive 100 objects, starting with obj_bar, your
              subsequent call can include ending_before=obj_bar in order to
              fetch the previous page of the list.
          required: false
          description: A cursor for use in pagination. `ending_before` is an object ID
            that defines your place in the list. For instance, if you make a
            list request and receive 100 objects, starting with obj_bar, your
            subsequent call can include ending_before=obj_bar in order to fetch
            the previous page of the list.
        - in: query
          style: form
          explode: true
          name: starting_after
          schema:
            type: string
            description: A cursor for use in pagination. `starting_after` is an object ID
              that defines your place in the list. For instance, if you make a
              list request and receive 100 objects, ending with obj_foo, your
              subsequent call can include starting_after=obj_foo in order to
              fetch the next page of the list.
          required: false
          description: A cursor for use in pagination. `starting_after` is an object ID
            that defines your place in the list. For instance, if you make a
            list request and receive 100 objects, ending with obj_foo, your
            subsequent call can include starting_after=obj_foo in order to fetch
            the next page of the list.
        - in: query
          style: form
          explode: true
          name: limit
          schema:
            type: number
            minimum: 1
            maximum: 100
            description: A limit on the number of objects to be returned. Limit can range
              between 1 and 100.
          required: false
          description: A limit on the number of objects to be returned. Limit can range
            between 1 and 100.
        - in: query
          style: form
          explode: true
          name: email
          schema:
            type: string
            description: Limit results to users with email matching the given query.
          required: false
          description: Limit results to users with email matching the given query.
        - in: query
          style: form
          explode: true
          name: name
          schema:
            type: string
            description: Limit results to users with name matching the given query.
          required: false
          description: Limit results to users with name matching the given query.
        - in: query
          style: form
          explode: true
          name: role
          schema:
            type: array
            items:
              type: string
            description: Filter results by role. If multiple roles are provided, users
              matching any of those roles will be returned.
          required: false
          description: Filter results by role. If multiple roles are provided, users
            matching any of those roles will be returned.
        - in: query
          style: form
          explode: true
          name: include_deactivated
          schema:
            type: boolean
            description: If set to 'true', this will also include deactivated users. If
              unset or `false`, deactivated users are not returned in the list.
          required: false
          description: If set to 'true', this will also include deactivated users. If
            unset or `false`, deactivated users are not returned in the list.
      responses:
        default:
          description: Successful response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  object:
                    type: string
                    default: list
                    enum:
                      - list
                    example: list
                    description: Always `list`.
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/user"
                    description: Array of results
                  has_more:
                    type: boolean
                    description: Contains `true` if there is another page of results available.
                required:
                  - object
                  - data
                  - has_more
  "/v1/care_teams/{id}":
    post:
      summary: Update a Care Team
      description: >-
        Updates the specified care team by setting the values of the parameters
        passed.


        Any parameters not provided will be left unchanged. For example, if you pass the member parameter, that assigns the care team to the given member.
      tags:
        - Care Teams
      parameters:
        - in: path
          style: simple
          explode: true
          name: id
          schema:
            type: string
            description: Unique ID of the care team
          required: true
          description: Unique ID of the care team
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                participants:
                  type: array
                  items:
                    type: object
                    properties:
                      user:
                        type: string
                        description: Unique ID of the user to add to the care team.
                        example: usr_NC6MQ3FyxddKoJJpfSVL
                      role:
                        type: string
                        enum:
                          - clinician
                          - nurse
                          - dietician
                          - ob-gyn
                        description: Role that this user should have on the care team.
                    required:
                      - user
                      - role
                  description: List of users to put on the care team.
      responses:
        default:
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/care_team"
    get:
      summary: Retrieve a Care Team
      description: Retrieves the details of an existing care team. You need only
        supply the unique care team identifier that was returned upon creation.
      tags:
        - Care Teams
      parameters:
        - in: path
          style: simple
          explode: true
          name: id
          schema:
            type: string
            description: Unique ID of the care team
          required: true
          description: Unique ID of the care team
      responses:
        default:
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/care_team"
  /v1/members:
    post:
      summary: Create a Member
      description: Creates a new member and registers them with Catalyst. Members must
        be created in order to ship devices or track measurements.
      tags:
        - Members
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  nullable: true
                  description: Title for the member (Mr., Mrs., Dr., etc).
                  example: Dr.
                first_name:
                  type: string
                  description: First name of the member
                  example: Evie
                middle_name:
                  type: string
                  nullable: true
                  description: Middle name of the member
                  example: null
                last_name:
                  type: string
                  description: Last name of the member
                  example: Parker
                email:
                  type: string
                  nullable: true
                  description: Email address for the member
                  example: evieparker@example.org
                date_of_birth:
                  type: string
                  format: date
                  description: Date of birth of the member
                  example: 1964-10-01
                biological_sex:
                  type: string
                  enum:
                    - male
                    - female
                    - non_binary
                    - undisclosed
                  description: Biological sex of the member
                  example: female
                address:
                  type: object
                  properties:
                    street_line_1:
                      type: string
                      description: The first line of the street address.
                      example: 1 City Point
                    street_line_2:
                      type: string
                      nullable: true
                      description: The second line of the street address.
                    city:
                      type: string
                      description: The city.
                      example: Brooklyn
                    region:
                      type: string
                      description: The region - in the US this should be the two-letter state code.
                      example: NY
                    postal_code:
                      type: string
                      description: The postal code (i.e. zip code).
                      example: "11215"
                    country:
                      type: string
                      description: The country, as a two-letter ISO 3166-1 code. US is the only
                        supported country at this time.
                      example: US
                  required:
                    - street_line_1
                    - city
                    - region
                    - postal_code
                    - country
                  nullable: true
                  description: Default address for the member. Used if no address is provided on a
                    specific order.
              required:
                - first_name
                - last_name
                - date_of_birth
                - biological_sex
      responses:
        default:
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/member"
    get:
      summary: List all Members
      description: >-
        Returns a list of members within the current account.


        The members returned are sorted by creation date, with the most recently added members appearing first.
      tags:
        - Members
      parameters:
        - in: query
          style: form
          explode: true
          name: ending_before
          schema:
            type: string
            description: A cursor for use in pagination. `ending_before` is an object ID
              that defines your place in the list. For instance, if you make a
              list request and receive 100 objects, starting with obj_bar, your
              subsequent call can include ending_before=obj_bar in order to
              fetch the previous page of the list.
          required: false
          description: A cursor for use in pagination. `ending_before` is an object ID
            that defines your place in the list. For instance, if you make a
            list request and receive 100 objects, starting with obj_bar, your
            subsequent call can include ending_before=obj_bar in order to fetch
            the previous page of the list.
        - in: query
          style: form
          explode: true
          name: starting_after
          schema:
            type: string
            description: A cursor for use in pagination. `starting_after` is an object ID
              that defines your place in the list. For instance, if you make a
              list request and receive 100 objects, ending with obj_foo, your
              subsequent call can include starting_after=obj_foo in order to
              fetch the next page of the list.
          required: false
          description: A cursor for use in pagination. `starting_after` is an object ID
            that defines your place in the list. For instance, if you make a
            list request and receive 100 objects, ending with obj_foo, your
            subsequent call can include starting_after=obj_foo in order to fetch
            the next page of the list.
        - in: query
          style: form
          explode: true
          name: limit
          schema:
            type: number
            minimum: 1
            maximum: 100
            description: A limit on the number of objects to be returned. Limit can range
              between 1 and 100.
          required: false
          description: A limit on the number of objects to be returned. Limit can range
            between 1 and 100.
        - in: query
          style: form
          explode: true
          name: email
          schema:
            type: string
            description: Limit results to members with the given email.
          required: false
          description: Limit results to members with the given email.
      responses:
        default:
          description: Successful response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  object:
                    type: string
                    default: list
                    enum:
                      - list
                    example: list
                    description: Always `list`.
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/member"
                    description: Array of results
                  has_more:
                    type: boolean
                    description: Contains `true` if there is another page of results available.
                required:
                  - object
                  - data
                  - has_more
  "/v1/members/{id}":
    get:
      summary: Retrieve a Member
      description: Retrieves the details of an existing member. You need only supply
        the unique member identifier that was returned upon member creation.
      tags:
        - Members
      parameters:
        - in: path
          style: simple
          explode: true
          name: id
          schema:
            type: string
            description: Unique ID of the member
          required: true
          description: Unique ID of the member
      responses:
        default:
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/member"
    post:
      summary: Update a Member
      description: >-
        Updates the specified member by setting the values of the parameters
        passed.


        Any parameters not provided will be left unchanged. For example, if you pass the email parameter, that becomes the member's active email to be used.
      tags:
        - Members
      parameters:
        - in: path
          style: simple
          explode: true
          name: id
          schema:
            type: string
            description: Unique ID of the member
          required: true
          description: Unique ID of the member
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  nullable: true
                  description: Title for the member (Mr., Mrs., Dr., etc).
                  example: Dr.
                first_name:
                  type: string
                  description: First name of the member
                  example: Evie
                middle_name:
                  type: string
                  nullable: true
                  description: Middle name of the member
                  example: null
                last_name:
                  type: string
                  description: Last name of the member
                  example: Parker
                email:
                  type: string
                  nullable: true
                  description: Email address for the member
                  example: evieparker@example.org
                date_of_birth:
                  type: string
                  format: date
                  description: Date of birth of the member
                  example: 1964-10-01
                biological_sex:
                  type: string
                  enum:
                    - male
                    - female
                    - non_binary
                    - undisclosed
                  description: Biological sex of the member
                  example: female
                address:
                  type: object
                  properties:
                    street_line_1:
                      type: string
                      description: The first line of the street address.
                      example: 1 City Point
                    street_line_2:
                      type: string
                      nullable: true
                      description: The second line of the street address.
                    city:
                      type: string
                      description: The city.
                      example: Brooklyn
                    region:
                      type: string
                      description: The region - in the US this should be the two-letter state code.
                      example: NY
                    postal_code:
                      type: string
                      description: The postal code (i.e. zip code).
                      example: "11215"
                    country:
                      type: string
                      description: The country, as a two-letter ISO 3166-1 code. US is the only
                        supported country at this time.
                      example: US
                  required:
                    - street_line_1
                    - city
                    - region
                    - postal_code
                    - country
                  nullable: true
                  description: Default address for the member. Used if no address is provided on a
                    specific order.
      responses:
        default:
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/member"
  /v1/communication/messages:
    post:
      summary: Create a Message
      description: Creates a message within a thread.
      tags:
        - Communication
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                thread:
                  type: string
                  description: Unique ID of the thread to which the message belongs.
                text:
                  type: string
                  description: Contents of the message to send.
              required:
                - thread
                - text
      responses:
        default:
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/message"
    get:
      summary: List all Messages
      description: >-
        Returns a list of threads within the current account.


        The threads returned are sorted with the most recently updated appearing first.
      tags:
        - Communication
      parameters:
        - in: query
          style: form
          explode: true
          name: ending_before
          schema:
            type: string
            description: A cursor for use in pagination. `ending_before` is an object ID
              that defines your place in the list. For instance, if you make a
              list request and receive 100 objects, starting with obj_bar, your
              subsequent call can include ending_before=obj_bar in order to
              fetch the previous page of the list.
          required: false
          description: A cursor for use in pagination. `ending_before` is an object ID
            that defines your place in the list. For instance, if you make a
            list request and receive 100 objects, starting with obj_bar, your
            subsequent call can include ending_before=obj_bar in order to fetch
            the previous page of the list.
        - in: query
          style: form
          explode: true
          name: starting_after
          schema:
            type: string
            description: A cursor for use in pagination. `starting_after` is an object ID
              that defines your place in the list. For instance, if you make a
              list request and receive 100 objects, ending with obj_foo, your
              subsequent call can include starting_after=obj_foo in order to
              fetch the next page of the list.
          required: false
          description: A cursor for use in pagination. `starting_after` is an object ID
            that defines your place in the list. For instance, if you make a
            list request and receive 100 objects, ending with obj_foo, your
            subsequent call can include starting_after=obj_foo in order to fetch
            the next page of the list.
        - in: query
          style: form
          explode: true
          name: limit
          schema:
            type: number
            minimum: 1
            maximum: 100
            description: A limit on the number of objects to be returned. Limit can range
              between 1 and 100.
          required: false
          description: A limit on the number of objects to be returned. Limit can range
            between 1 and 100.
        - in: query
          style: form
          explode: true
          name: thread
          schema:
            type: string
            description: Unique ID of the thread whose messages should be shown.
          required: true
          description: Unique ID of the thread whose messages should be shown.
      responses:
        default:
          description: Successful response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  object:
                    type: string
                    default: list
                    enum:
                      - list
                    example: list
                    description: Always `list`.
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/message"
                    description: Array of results
                  has_more:
                    type: boolean
                    description: Contains `true` if there is another page of results available.
                required:
                  - object
                  - data
                  - has_more
  "/v1/communication/messages/{id}":
    get:
      summary: Retrieve a Message
      description: Retrieves the details of an Message. You need only supply the
        unique message identifier that was returned upon creation.
      tags:
        - Communication
      parameters:
        - in: path
          style: simple
          explode: true
          name: id
          schema:
            type: string
            description: Unique ID of the message
          required: true
          description: Unique ID of the message
      responses:
        default:
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/message"
  /v1/communication/threads:
    post:
      summary: Create a Thread
      description: Creates a new messaging thread.
      tags:
        - Communication
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                member:
                  type: string
                  description: The ID of the member to which this thread belongs
                assignee:
                  type: string
                  description: The ID of the care team user to which this thread is currently
                    assigned, if any.
                subject:
                  type: string
                  description: The thread subject.
              required:
                - member
      responses:
        default:
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/thread"
    get:
      summary: List all Threads
      description: >-
        Returns a list of threads within the current account.


        The threads returned are sorted with the most recently updated appearing first.
      tags:
        - Communication
      parameters:
        - in: query
          style: form
          explode: true
          name: ending_before
          schema:
            type: string
            description: A cursor for use in pagination. `ending_before` is an object ID
              that defines your place in the list. For instance, if you make a
              list request and receive 100 objects, starting with obj_bar, your
              subsequent call can include ending_before=obj_bar in order to
              fetch the previous page of the list.
          required: false
          description: A cursor for use in pagination. `ending_before` is an object ID
            that defines your place in the list. For instance, if you make a
            list request and receive 100 objects, starting with obj_bar, your
            subsequent call can include ending_before=obj_bar in order to fetch
            the previous page of the list.
        - in: query
          style: form
          explode: true
          name: starting_after
          schema:
            type: string
            description: A cursor for use in pagination. `starting_after` is an object ID
              that defines your place in the list. For instance, if you make a
              list request and receive 100 objects, ending with obj_foo, your
              subsequent call can include starting_after=obj_foo in order to
              fetch the next page of the list.
          required: false
          description: A cursor for use in pagination. `starting_after` is an object ID
            that defines your place in the list. For instance, if you make a
            list request and receive 100 objects, ending with obj_foo, your
            subsequent call can include starting_after=obj_foo in order to fetch
            the next page of the list.
        - in: query
          style: form
          explode: true
          name: limit
          schema:
            type: number
            minimum: 1
            maximum: 100
            description: A limit on the number of objects to be returned. Limit can range
              between 1 and 100.
          required: false
          description: A limit on the number of objects to be returned. Limit can range
            between 1 and 100.
        - in: query
          style: form
          explode: true
          name: member
          schema:
            type: string
            description: Filter threads to only those belonging to the given member.
          required: false
          description: Filter threads to only those belonging to the given member.
        - in: query
          style: form
          explode: true
          name: assignee
          schema:
            type: string
            description: Filter threads to only those assigned to the given user. The value
              `current` may be used to indicate the currently authenticated
              user.
          required: false
          description: Filter threads to only those assigned to the given user. The value
            `current` may be used to indicate the currently authenticated user.
        - in: query
          style: form
          explode: true
          name: status
          schema:
            type: array
            items:
              $ref: "#/components/schemas/thread_status"
            description: Filter threads by status
          required: false
          description: Filter threads by status
      responses:
        default:
          description: Successful response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  object:
                    type: string
                    default: list
                    enum:
                      - list
                    example: list
                    description: Always `list`.
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/thread"
                    description: Array of results
                  has_more:
                    type: boolean
                    description: Contains `true` if there is another page of results available.
                required:
                  - object
                  - data
                  - has_more
  "/v1/communication/threads/{id}":
    get:
      summary: Retrieve a Thread
      description: Retrieves the details of an existing thread. You need only supply
        the unique thread identifier that was returned upon creation.
      tags:
        - Communication
      parameters:
        - in: path
          style: simple
          explode: true
          name: id
          schema:
            type: string
            description: Unique ID of the thread
          required: true
          description: Unique ID of the thread
      responses:
        default:
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/thread"
    post:
      summary: Update a Thread
      description: Change the thread status or subject, and re-assign the thread to a
        different member of the Care Team.
      tags:
        - Communication
      parameters:
        - in: path
          style: simple
          explode: true
          name: id
          schema:
            type: string
            description: Unique ID of the thread
          required: true
          description: Unique ID of the thread
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                assignee:
                  type: string
                  nullable: true
                  description: ID of a user on the member's Care Team - assigns the thread to the
                    new user.
                status:
                  type: string
                  enum:
                    - awaiting_care_team
                    - awaiting_member
                    - closed
                  description: New status for the thread.
                subject:
                  type: string
                  nullable: true
                  description: New subject for the thread.
      responses:
        default:
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/thread"
  "/v1/devices/{id}":
    get:
      summary: Retrieve a Device
      description: Retrieves the details of an existing device. You need only supply
        the unique device identifier that was returned upon device creation.
      tags:
        - Devices
      parameters:
        - in: path
          style: simple
          explode: true
          name: id
          schema:
            type: string
            description: Unique ID of the device
          required: true
          description: Unique ID of the device
      responses:
        default:
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/device"
  /v1/devices:
    get:
      summary: List all Devices
      description: Returns a list of devices within the current account. The devices
        returned are sorted by creation date, with the most recently added
        devices appearing first.
      tags:
        - Devices
      parameters:
        - in: query
          style: form
          explode: true
          name: ending_before
          schema:
            type: string
            description: A cursor for use in pagination. `ending_before` is an object ID
              that defines your place in the list. For instance, if you make a
              list request and receive 100 objects, starting with obj_bar, your
              subsequent call can include ending_before=obj_bar in order to
              fetch the previous page of the list.
          required: false
          description: A cursor for use in pagination. `ending_before` is an object ID
            that defines your place in the list. For instance, if you make a
            list request and receive 100 objects, starting with obj_bar, your
            subsequent call can include ending_before=obj_bar in order to fetch
            the previous page of the list.
        - in: query
          style: form
          explode: true
          name: starting_after
          schema:
            type: string
            description: A cursor for use in pagination. `starting_after` is an object ID
              that defines your place in the list. For instance, if you make a
              list request and receive 100 objects, ending with obj_foo, your
              subsequent call can include starting_after=obj_foo in order to
              fetch the next page of the list.
          required: false
          description: A cursor for use in pagination. `starting_after` is an object ID
            that defines your place in the list. For instance, if you make a
            list request and receive 100 objects, ending with obj_foo, your
            subsequent call can include starting_after=obj_foo in order to fetch
            the next page of the list.
        - in: query
          style: form
          explode: true
          name: limit
          schema:
            type: number
            minimum: 1
            maximum: 100
            description: A limit on the number of objects to be returned. Limit can range
              between 1 and 100.
          required: false
          description: A limit on the number of objects to be returned. Limit can range
            between 1 and 100.
        - in: query
          style: form
          explode: true
          name: member
          schema:
            type: string
            description: The ID of the member whose devices should be returned.
          required: false
          description: The ID of the member whose devices should be returned.
      responses:
        default:
          description: Successful response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  object:
                    type: string
                    default: list
                    enum:
                      - list
                    example: list
                    description: Always `list`.
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/device"
                    description: Array of results
                  has_more:
                    type: boolean
                    description: Contains `true` if there is another page of results available.
                required:
                  - object
                  - data
                  - has_more
  "/v1/devices/{id}/deactivate":
    post:
      summary: Deactivate a Device
      description: Deactivates a device, disabling its communication with Catalyst.
      tags:
        - Devices
      parameters:
        - in: path
          style: simple
          explode: true
          name: id
          schema:
            type: string
            description: Unique ID of the device
          required: true
          description: Unique ID of the device
      responses:
        default:
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/device"
  "/v1/events/{id}":
    get:
      summary: Retrieve an Event
      description: Each event data is rendered according to Catalyst API version at
        its creation time,       specified in event object api_version attribute
        (not according to your current Catalyst       API version or
        Catalyst-Version header).
      tags:
        - Events
      parameters:
        - in: path
          style: simple
          explode: true
          name: id
          schema:
            type: string
            description: Unique ID of the event
          required: true
          description: Unique ID of the event
      responses:
        default:
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/event"
  /v1/events:
    get:
      summary: List all Events
      description: List all stored events. Each event data is rendered according to
        Catalyst API       version at its creation time, specified in event
        object api_version attribute (not according       to your current
        Catalyst API version or Catalyst-Version header).
      tags:
        - Events
      parameters:
        - in: query
          style: form
          explode: true
          name: ending_before
          schema:
            type: string
            description: A cursor for use in pagination. `ending_before` is an object ID
              that defines your place in the list. For instance, if you make a
              list request and receive 100 objects, starting with obj_bar, your
              subsequent call can include ending_before=obj_bar in order to
              fetch the previous page of the list.
          required: false
          description: A cursor for use in pagination. `ending_before` is an object ID
            that defines your place in the list. For instance, if you make a
            list request and receive 100 objects, starting with obj_bar, your
            subsequent call can include ending_before=obj_bar in order to fetch
            the previous page of the list.
        - in: query
          style: form
          explode: true
          name: starting_after
          schema:
            type: string
            description: A cursor for use in pagination. `starting_after` is an object ID
              that defines your place in the list. For instance, if you make a
              list request and receive 100 objects, ending with obj_foo, your
              subsequent call can include starting_after=obj_foo in order to
              fetch the next page of the list.
          required: false
          description: A cursor for use in pagination. `starting_after` is an object ID
            that defines your place in the list. For instance, if you make a
            list request and receive 100 objects, ending with obj_foo, your
            subsequent call can include starting_after=obj_foo in order to fetch
            the next page of the list.
        - in: query
          style: form
          explode: true
          name: limit
          schema:
            type: number
            minimum: 1
            maximum: 100
            description: A limit on the number of objects to be returned. Limit can range
              between 1 and 100.
          required: false
          description: A limit on the number of objects to be returned. Limit can range
            between 1 and 100.
        - in: query
          style: form
          explode: true
          name: type
          schema:
            type: array
            items:
              type: string
            description: Filter results by event type. Repeat this parameter to filter by
              multiple event types,       e.g.
              `?type=member.created&type=member.updated`
          required: false
          description: Filter results by event type. Repeat this parameter to filter by
            multiple event types,       e.g.
            `?type=member.created&type=member.updated`
      responses:
        default:
          description: Successful response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  object:
                    type: string
                    default: list
                    enum:
                      - list
                    example: list
                    description: Always `list`.
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/event"
                    description: Array of results
                  has_more:
                    type: boolean
                    description: Contains `true` if there is another page of results available.
                required:
                  - object
                  - data
                  - has_more
  /v1/webhooks:
    post:
      summary: Create a Webhook
      description: A webhook endpoint must have a URL and a list of events.
      tags:
        - Webhooks
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                url:
                  type: string
                  pattern: (https?:\/\/)?([\w-])+\.{1}([a-zA-Z]{2,63})([/\w-]*)*\/?\??([^#\n\r]*)?#?([^\n\r]*)
                  description: URL to which matching events will be delivered
                  example: https://example.com/catalyst-webhook
                events:
                  type: array
                  items:
                    $ref: "#/components/schemas/webhook_events"
                  description: Events that will be delivered to this webhook
                  example:
                    - account.updated
                is_enabled:
                  type: boolean
                  description: Whether or not this webhook should be enabled to receive events
                  example: true
              required:
                - url
                - events
      responses:
        default:
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/webhook"
    get:
      summary: List all Webhooks
      description: Lists all webhooks for the current account. The webhooks returned
        are sorted by creation date, with the most recently created webhooks
        appearing first.
      tags:
        - Webhooks
      parameters:
        - in: query
          style: form
          explode: true
          name: ending_before
          schema:
            type: string
            description: A cursor for use in pagination. `ending_before` is an object ID
              that defines your place in the list. For instance, if you make a
              list request and receive 100 objects, starting with obj_bar, your
              subsequent call can include ending_before=obj_bar in order to
              fetch the previous page of the list.
          required: false
          description: A cursor for use in pagination. `ending_before` is an object ID
            that defines your place in the list. For instance, if you make a
            list request and receive 100 objects, starting with obj_bar, your
            subsequent call can include ending_before=obj_bar in order to fetch
            the previous page of the list.
        - in: query
          style: form
          explode: true
          name: starting_after
          schema:
            type: string
            description: A cursor for use in pagination. `starting_after` is an object ID
              that defines your place in the list. For instance, if you make a
              list request and receive 100 objects, ending with obj_foo, your
              subsequent call can include starting_after=obj_foo in order to
              fetch the next page of the list.
          required: false
          description: A cursor for use in pagination. `starting_after` is an object ID
            that defines your place in the list. For instance, if you make a
            list request and receive 100 objects, ending with obj_foo, your
            subsequent call can include starting_after=obj_foo in order to fetch
            the next page of the list.
        - in: query
          style: form
          explode: true
          name: limit
          schema:
            type: number
            minimum: 1
            maximum: 100
            description: A limit on the number of objects to be returned. Limit can range
              between 1 and 100.
          required: false
          description: A limit on the number of objects to be returned. Limit can range
            between 1 and 100.
        - in: query
          style: form
          explode: true
          name: event
          schema:
            type: array
            items:
              $ref: "#/components/schemas/webhook_events"
            description: Limit results to just those webhooks that are configured for the
              given event.
          required: false
          description: Limit results to just those webhooks that are configured for the
            given event.
      responses:
        default:
          description: Successful response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  object:
                    type: string
                    default: list
                    enum:
                      - list
                    example: list
                    description: Always `list`.
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/webhook"
                    description: Array of results
                  has_more:
                    type: boolean
                    description: Contains `true` if there is another page of results available.
                required:
                  - object
                  - data
                  - has_more
  "/v1/webhooks/{id}":
    post:
      summary: Update a Webhook
      description: Updates the webhook endpoint. You may edit the URL and list of
        events for the webhook.
      tags:
        - Webhooks
      parameters:
        - in: path
          style: simple
          explode: true
          name: id
          schema:
            type: string
            description: Unique ID of the webhook
          required: true
          description: Unique ID of the webhook
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                url:
                  type: string
                  pattern: (https?:\/\/)?([\w-])+\.{1}([a-zA-Z]{2,63})([/\w-]*)*\/?\??([^#\n\r]*)?#?([^\n\r]*)
                  description: URL to which matching events will be delivered
                  example: https://example.com/catalyst-webhook
                events:
                  type: array
                  items:
                    $ref: "#/components/schemas/webhook_events"
                  description: Events that will be delivered to this webhook
                  example:
                    - account.updated
                is_enabled:
                  type: boolean
                  description: Whether or not this webhook should be enabled to receive events
                  example: true
      responses:
        default:
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/webhook"
    get:
      summary: Retrieve a Webhook
      description: A webhook endpoint must have a url and a list of events.
      tags:
        - Webhooks
      parameters:
        - in: path
          style: simple
          explode: true
          name: id
          schema:
            type: string
            description: Unique ID of the webhook
          required: true
          description: Unique ID of the webhook
      responses:
        default:
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/webhook"
    delete:
      summary: Delete a Webhook
      description: Removes a webhook from your account, which will stop sending events
        to your endpoint
      tags:
        - Webhooks
      parameters:
        - in: path
          style: simple
          explode: true
          name: id
          schema:
            type: string
            description: Unique ID of the webhook
          required: true
          description: Unique ID of the webhook
      responses:
        default:
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/webhook"
  /v1/measurements:
    post:
      summary: Create a Measurement
      description: Creates a measurement, which can be of kind `numeric` (with a
        single value) or     kind `composite` (with a collection of logically
        inseparable values (such as a     blood pressure reading). The shapes of
        these requests are different.
      tags:
        - Measurements
      requestBody:
        content:
          application/json:
            schema:
              anyOf:
                - type: object
                  properties:
                    type:
                      type: string
                      enum:
                        - blood_pressure
                        - body_weight
                        - diastolic_blood_pressure
                        - heart_rate
                        - systolic_blood_pressure
                      description: Catalyst measurement type to create.
                    device:
                      type: string
                      description: Device to which this measurement belongs.
                    member:
                      type: string
                      description: Member to which this measurement belongs.
                    time:
                      type: string
                      format: date-time
                      description: Timestamp that the measurement was taken.
                      example: 2021-05-13T16:33:00.000Z
                    kind:
                      type: string
                      default: composite
                      enum:
                        - composite
                      example: composite
                      description: Always `composite`.
                    items:
                      type: object
                      additionalProperties:
                        type: object
                        properties:
                          value:
                            type: string
                            description: Value for the measurement.
                          unit:
                            type: string
                            description: Unit that the measurement is reported in.
                        required:
                          - value
                          - unit
                      description: Items to be included in the composite measurement.
                  required:
                    - type
                    - device
                    - member
                    - time
                    - kind
                    - items
                - type: object
                  properties:
                    type:
                      type: string
                      enum:
                        - blood_pressure
                        - body_weight
                        - diastolic_blood_pressure
                        - heart_rate
                        - systolic_blood_pressure
                      description: Catalyst measurement type to create.
                    device:
                      type: string
                      description: Device to which this measurement belongs.
                    member:
                      type: string
                      description: Member to which this measurement belongs.
                    time:
                      type: string
                      format: date-time
                      description: Timestamp that the measurement was taken.
                      example: 2021-05-13T16:33:00.000Z
                    kind:
                      type: string
                      default: numeric
                      enum:
                        - numeric
                      example: numeric
                      description: Always `numeric`.
                    value:
                      type: string
                      description: Value for the measurement.
                    unit:
                      type: string
                      description: Unit that the measurement is reported in.
                  required:
                    - type
                    - device
                    - member
                    - time
                    - kind
                    - value
                    - unit
      responses:
        default:
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/measurement"
    get:
      summary: List all Measurements
      description: Lists all measurements for the current account. The measurements
        returned are sorted by     their timestamp, with the most recently
        created measurements appearing first.
      tags:
        - Measurements
      parameters:
        - in: query
          style: form
          explode: true
          name: ending_before
          schema:
            type: string
            description: A cursor for use in pagination. `ending_before` is an object ID
              that defines your place in the list. For instance, if you make a
              list request and receive 100 objects, starting with obj_bar, your
              subsequent call can include ending_before=obj_bar in order to
              fetch the previous page of the list.
          required: false
          description: A cursor for use in pagination. `ending_before` is an object ID
            that defines your place in the list. For instance, if you make a
            list request and receive 100 objects, starting with obj_bar, your
            subsequent call can include ending_before=obj_bar in order to fetch
            the previous page of the list.
        - in: query
          style: form
          explode: true
          name: starting_after
          schema:
            type: string
            description: A cursor for use in pagination. `starting_after` is an object ID
              that defines your place in the list. For instance, if you make a
              list request and receive 100 objects, ending with obj_foo, your
              subsequent call can include starting_after=obj_foo in order to
              fetch the next page of the list.
          required: false
          description: A cursor for use in pagination. `starting_after` is an object ID
            that defines your place in the list. For instance, if you make a
            list request and receive 100 objects, ending with obj_foo, your
            subsequent call can include starting_after=obj_foo in order to fetch
            the next page of the list.
        - in: query
          style: form
          explode: true
          name: limit
          schema:
            type: number
            minimum: 1
            maximum: 100
            description: A limit on the number of objects to be returned. Limit can range
              between 1 and 100.
          required: false
          description: A limit on the number of objects to be returned. Limit can range
            between 1 and 100.
        - in: query
          style: form
          explode: true
          name: time
          schema:
            type: object
            properties:
              lt:
                type: string
                format: date-time
                description: Return results where the time field is less than this value.
              lte:
                type: string
                format: date-time
                description: Return results where the time field is less than or equal to this
                  value.
              gt:
                type: string
                format: date-time
                description: Return results where the time field is greater than this value.
              gte:
                type: string
                format: date-time
                description: Return results where the time field is greater than or equal to
                  this value.
            description: "A time based range filter on the list based on the object time
              field. For example
              '?time[gt]=2021-05-10T16:51:38.075Z&time[lte]=2021-05-26T16:51:38\
              .075Z'. The value is a dictionary with the following:"
          required: false
          description: "A time based range filter on the list based on the object time
            field. For example
            '?time[gt]=2021-05-10T16:51:38.075Z&time[lte]=2021-05-26T16:51:38.0\
            75Z'. The value is a dictionary with the following:"
        - in: query
          style: form
          explode: true
          name: member
          schema:
            type: string
            description: Filter measurements to only those belonging to the given member.
          required: false
          description: Filter measurements to only those belonging to the given member.
        - in: query
          style: form
          explode: true
          name: type
          schema:
            type: array
            items:
              type: string
              enum:
                - blood_pressure
                - body_weight
                - diastolic_blood_pressure
                - heart_rate
                - systolic_blood_pressure
            description: Filter measurements to only those of the given type.
          required: false
          description: Filter measurements to only those of the given type.
      responses:
        default:
          description: Successful response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  object:
                    type: string
                    default: list
                    enum:
                      - list
                    example: list
                    description: Always `list`.
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/measurement"
                    description: Array of results
                  has_more:
                    type: boolean
                    description: Contains `true` if there is another page of results available.
                required:
                  - object
                  - data
                  - has_more
  "/v1/measurements/{id}":
    get:
      summary: Retrieve a Measurement
      description: Return the details of a measurement (a reading from a Device)
      tags:
        - Measurements
      parameters:
        - in: path
          style: simple
          explode: true
          name: id
          schema:
            type: string
            description: Unique ID of the measurement.
          required: true
          description: Unique ID of the measurement.
      responses:
        default:
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/measurement"
  /v1/orders:
    post:
      summary: Create an Order
      description: >-
        Create an order to send devices to a member. Orders placed through the
        Catalyst API will be sent directly to our fulfillment center, and
        generally shipped out the next day.


        All orders sent out of our fulfillment center will be invoiced and payable at the end of the month.


        When placing an order, you'll need to specify the products you would like to send to the member. Currently, you can send the following products:


        Scale: `prod_m0zvh4UpfvtRZasxVUwE`


        Blood Pressure Monitor: `prod_1rqijtxD3sjkVVQPRRFC`
      tags:
        - Orders
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                member:
                  type: string
                  description: Member to which the order should be sent.
                items:
                  type: array
                  items:
                    type: object
                    properties:
                      product:
                        type: string
                        description: Unique ID of the product.
                        example: prod_1rqijtxD3sjkVVQPRRFC
                    required:
                      - product
                  description: Items that should be sent to the member.
                shipping_address:
                  type: object
                  properties:
                    street_line_1:
                      type: string
                      description: The first line of the street address.
                      example: 1 City Point
                    street_line_2:
                      type: string
                      nullable: true
                      description: The second line of the street address.
                    city:
                      type: string
                      description: The city.
                      example: Brooklyn
                    region:
                      type: string
                      description: The region - in the US this should be the two-letter state code.
                      example: NY
                    postal_code:
                      type: string
                      description: The postal code (i.e. zip code).
                      example: "11215"
                    country:
                      type: string
                      description: The country, as a two-letter ISO 3166-1 code. US is the only
                        supported country at this time.
                      example: US
                  required:
                    - street_line_1
                    - city
                    - region
                    - postal_code
                    - country
                  description: The address to which the items should be shipped. This field is
                    optional as long as the member has an associated primary
                    address. If not, you must provide a shipping address for the
                    order.
              required:
                - member
                - items
      responses:
        default:
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/order"
    get:
      summary: List all Orders
      description: Retrieves the details of an order. Supply the unique identifier of
        the order, which you might have received in a webhook.
      tags:
        - Orders
      parameters:
        - in: query
          style: form
          explode: true
          name: ending_before
          schema:
            type: string
            description: A cursor for use in pagination. `ending_before` is an object ID
              that defines your place in the list. For instance, if you make a
              list request and receive 100 objects, starting with obj_bar, your
              subsequent call can include ending_before=obj_bar in order to
              fetch the previous page of the list.
          required: false
          description: A cursor for use in pagination. `ending_before` is an object ID
            that defines your place in the list. For instance, if you make a
            list request and receive 100 objects, starting with obj_bar, your
            subsequent call can include ending_before=obj_bar in order to fetch
            the previous page of the list.
        - in: query
          style: form
          explode: true
          name: starting_after
          schema:
            type: string
            description: A cursor for use in pagination. `starting_after` is an object ID
              that defines your place in the list. For instance, if you make a
              list request and receive 100 objects, ending with obj_foo, your
              subsequent call can include starting_after=obj_foo in order to
              fetch the next page of the list.
          required: false
          description: A cursor for use in pagination. `starting_after` is an object ID
            that defines your place in the list. For instance, if you make a
            list request and receive 100 objects, ending with obj_foo, your
            subsequent call can include starting_after=obj_foo in order to fetch
            the next page of the list.
        - in: query
          style: form
          explode: true
          name: limit
          schema:
            type: number
            minimum: 1
            maximum: 100
            description: A limit on the number of objects to be returned. Limit can range
              between 1 and 100.
          required: false
          description: A limit on the number of objects to be returned. Limit can range
            between 1 and 100.
        - in: query
          style: form
          explode: true
          name: member
          schema:
            type: string
            description: Limit results to orders for the given member.
          required: false
          description: Limit results to orders for the given member.
      responses:
        default:
          description: Successful response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  object:
                    type: string
                    default: list
                    enum:
                      - list
                    example: list
                    description: Always `list`.
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/order"
                    description: Array of results
                  has_more:
                    type: boolean
                    description: Contains `true` if there is another page of results available.
                required:
                  - object
                  - data
                  - has_more
  "/v1/orders/{id}":
    get:
      summary: Retrieve an Order
      description: Retrieves the details of an order. Supply the unique identifier of
        the order, which you might have received in a webhook.
      tags:
        - Orders
      parameters:
        - in: path
          style: simple
          explode: true
          name: id
          schema:
            type: string
            description: Unique ID of the order
          required: true
          description: Unique ID of the order
      responses:
        default:
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/order"
  /v1/task_definitions:
    post:
      summary: Create a Task Definition
      description: Creates a new task definition and registers it with Catalyst. Task
        defiitions must be created in order to create tasks of that type
      tags:
        - Task Definitions
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                key:
                  type: string
                  description: Globally unique identifier of the task definition
                  example: medication-request
                name:
                  type: string
                  description: Human readable name of the task definition
                  example: Medication Request
                participantRole:
                  type: string
                  enum:
                    - clinician
                    - nurse
                    - dietician
                    - ob-gyn
                  description: The default care team role that tasks should be assigned to.
                  example: nurse
              required:
                - key
                - name
                - participantRole
      responses:
        default:
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/task_definition"
    get:
      summary: List all Task Definitions
      description: >-
        Returns a list of task definitions within the current account.


        The task definitions returned are sorted by creation date, with the most recently added task definitions appearing first.
      tags:
        - Task Definitions
      parameters:
        - in: query
          style: form
          explode: true
          name: ending_before
          schema:
            type: string
            description: A cursor for use in pagination. `ending_before` is an object ID
              that defines your place in the list. For instance, if you make a
              list request and receive 100 objects, starting with obj_bar, your
              subsequent call can include ending_before=obj_bar in order to
              fetch the previous page of the list.
          required: false
          description: A cursor for use in pagination. `ending_before` is an object ID
            that defines your place in the list. For instance, if you make a
            list request and receive 100 objects, starting with obj_bar, your
            subsequent call can include ending_before=obj_bar in order to fetch
            the previous page of the list.
        - in: query
          style: form
          explode: true
          name: starting_after
          schema:
            type: string
            description: A cursor for use in pagination. `starting_after` is an object ID
              that defines your place in the list. For instance, if you make a
              list request and receive 100 objects, ending with obj_foo, your
              subsequent call can include starting_after=obj_foo in order to
              fetch the next page of the list.
          required: false
          description: A cursor for use in pagination. `starting_after` is an object ID
            that defines your place in the list. For instance, if you make a
            list request and receive 100 objects, ending with obj_foo, your
            subsequent call can include starting_after=obj_foo in order to fetch
            the next page of the list.
        - in: query
          style: form
          explode: true
          name: limit
          schema:
            type: number
            minimum: 1
            maximum: 100
            description: A limit on the number of objects to be returned. Limit can range
              between 1 and 100.
          required: false
          description: A limit on the number of objects to be returned. Limit can range
            between 1 and 100.
      responses:
        default:
          description: Successful response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  object:
                    type: string
                    default: list
                    enum:
                      - list
                    example: list
                    description: Always `list`.
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/task_definition"
                    description: Array of results
                  has_more:
                    type: boolean
                    description: Contains `true` if there is another page of results available.
                required:
                  - object
                  - data
                  - has_more
  "/v1/task_definitions/{id}":
    post:
      summary: Update a Task Definition
      description: >-
        Updates the specified task definition by setting the values of the
        parameters passed.


        Any parameters not provided will be left unchanged. For example, if you pass the name parameter, that becomes the task definitions's active name that is used in the API and interface.
      tags:
        - Task Definitions
      parameters:
        - in: path
          style: simple
          explode: true
          name: id
          schema:
            type: string
            description: Unique ID of the task definition
          required: true
          description: Unique ID of the task definition
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                key:
                  type: string
                  description: Globally unique identifier of the task definition
                  example: medication-request
                name:
                  type: string
                  description: Human readable name of the task definition
                  example: Medication Request
                participantRole:
                  type: string
                  enum:
                    - clinician
                    - nurse
                    - dietician
                    - ob-gyn
                  description: The default care team role that tasks should be assigned to.
                  example: nurse
      responses:
        default:
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/task_definition"
    get:
      summary: Retrieve a Task Definition
      description: Retrieves the details of an existing task definition. You need only
        supply the unique task definition identifier that was returned upon
        creation.
      tags:
        - Task Definitions
      parameters:
        - in: path
          style: simple
          explode: true
          name: id
          schema:
            type: string
            description: Unique ID of the task definition
          required: true
          description: Unique ID of the task definition
      responses:
        default:
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/task_definition"
  /v1/workflow/queue:
    get:
      summary: Get all Task Queue Entries
      description: Returns a list of Task Queue Entries which are tasks assigned to
        the provided user, grouped by member,  and ordered by priority using the
        due_at property.
      tags:
        - Workflow
      parameters:
        - in: query
          style: form
          explode: true
          name: ending_before
          schema:
            type: string
            description: A cursor for use in pagination. `ending_before` is an object ID
              that defines your place in the list. For instance, if you make a
              list request and receive 100 objects, starting with obj_bar, your
              subsequent call can include ending_before=obj_bar in order to
              fetch the previous page of the list.
          required: false
          description: A cursor for use in pagination. `ending_before` is an object ID
            that defines your place in the list. For instance, if you make a
            list request and receive 100 objects, starting with obj_bar, your
            subsequent call can include ending_before=obj_bar in order to fetch
            the previous page of the list.
        - in: query
          style: form
          explode: true
          name: starting_after
          schema:
            type: string
            description: A cursor for use in pagination. `starting_after` is an object ID
              that defines your place in the list. For instance, if you make a
              list request and receive 100 objects, ending with obj_foo, your
              subsequent call can include starting_after=obj_foo in order to
              fetch the next page of the list.
          required: false
          description: A cursor for use in pagination. `starting_after` is an object ID
            that defines your place in the list. For instance, if you make a
            list request and receive 100 objects, ending with obj_foo, your
            subsequent call can include starting_after=obj_foo in order to fetch
            the next page of the list.
        - in: query
          style: form
          explode: true
          name: limit
          schema:
            type: number
            minimum: 1
            maximum: 100
            description: A limit on the number of objects to be returned. Limit can range
              between 1 and 100.
          required: false
          description: A limit on the number of objects to be returned. Limit can range
            between 1 and 100.
        - in: query
          style: form
          explode: true
          name: assignee
          schema:
            type: string
            description: Shows the queue for the provided user. By default when not provided
              the queue will include all  tasks assigned to all users. When
              authenticated as a user you can specify the value 'current'
              to  show the current users task queue.
          required: false
          description: Shows the queue for the provided user. By default when not provided
            the queue will include all  tasks assigned to all users. When
            authenticated as a user you can specify the value 'current' to  show
            the current users task queue.
      responses:
        default:
          description: Successful response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  object:
                    type: string
                    default: list
                    enum:
                      - list
                    example: list
                    description: Always `list`.
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/task_queue_entry"
                    description: Array of results
                  has_more:
                    type: boolean
                    description: Contains `true` if there is another page of results available.
                required:
                  - object
                  - data
                  - has_more
  /v1/tasks:
    post:
      summary: Create a Task
      description: Creates a new task and registers it with Catalyst. Once a task is
        created you cannot update the definition or member associated with that
        task.
      tags:
        - Tasks
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                definition:
                  type: string
                  description: The task definition that this task models. You may provide either
                    the definition ID or key.
                  example: tskd_vlTxSr3ldEgbgX0RiQSk
                member:
                  type: string
                  description: The member to which this task belongs.
                  example: mem_JAfPRRc59eh2YQ1aeL3D
                assignee:
                  type: string
                  description: The user to which this task is assigned.
                  example: usr_NC6MQ3FyxddKoJJpfSVL
                description:
                  type: string
                  minLength: 1
                  description: Short text that describes the work to be done.
                  example: Call the member to check up on medications
                status:
                  type: string
                  enum:
                    - open
                    - resolved
                  description: The status of the task
                  example: open
                due_at:
                  type: string
                  format: date-time
                  description: The time by which this task should be completed. If no due_at date
                    is supplied, the due_at date will automatically be 24 hours
                    after the task was created. The due_at date must be in the
                    future.'
                  example: 2021-05-13T16:33:00.000Z
              required:
                - definition
                - member
                - assignee
                - description
                - status
      responses:
        default:
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/task"
    get:
      summary: List all Tasks
      description: >-
        Returns a list of tasks within the current account.


        The tasks returned are sorted by creation date, with the most recently added task appearing first.
      tags:
        - Tasks
      parameters:
        - in: query
          style: form
          explode: true
          name: ending_before
          schema:
            type: string
            description: A cursor for use in pagination. `ending_before` is an object ID
              that defines your place in the list. For instance, if you make a
              list request and receive 100 objects, starting with obj_bar, your
              subsequent call can include ending_before=obj_bar in order to
              fetch the previous page of the list.
          required: false
          description: A cursor for use in pagination. `ending_before` is an object ID
            that defines your place in the list. For instance, if you make a
            list request and receive 100 objects, starting with obj_bar, your
            subsequent call can include ending_before=obj_bar in order to fetch
            the previous page of the list.
        - in: query
          style: form
          explode: true
          name: starting_after
          schema:
            type: string
            description: A cursor for use in pagination. `starting_after` is an object ID
              that defines your place in the list. For instance, if you make a
              list request and receive 100 objects, ending with obj_foo, your
              subsequent call can include starting_after=obj_foo in order to
              fetch the next page of the list.
          required: false
          description: A cursor for use in pagination. `starting_after` is an object ID
            that defines your place in the list. For instance, if you make a
            list request and receive 100 objects, ending with obj_foo, your
            subsequent call can include starting_after=obj_foo in order to fetch
            the next page of the list.
        - in: query
          style: form
          explode: true
          name: limit
          schema:
            type: number
            minimum: 1
            maximum: 100
            description: A limit on the number of objects to be returned. Limit can range
              between 1 and 100.
          required: false
          description: A limit on the number of objects to be returned. Limit can range
            between 1 and 100.
        - in: query
          style: form
          explode: true
          name: status
          schema:
            type: array
            items:
              type: string
              enum:
                - open
                - resolved
            description: Filter results by status. If multiple statuses are provided, tasks
              matching any of the provided statuses will be returned.
          required: false
          description: Filter results by status. If multiple statuses are provided, tasks
            matching any of the provided statuses will be returned.
      responses:
        default:
          description: Successful response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  object:
                    type: string
                    default: list
                    enum:
                      - list
                    example: list
                    description: Always `list`.
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/task"
                    description: Array of results
                  has_more:
                    type: boolean
                    description: Contains `true` if there is another page of results available.
                required:
                  - object
                  - data
                  - has_more
  "/v1/tasks/{id}":
    post:
      summary: Update a Task
      description: >-
        Updates the specified task by setting the values of the parameters
        passed.


        Any parameters not provided will be left unchanged. For example, if you pass the assignee parameter, that assigns the task to the given user.
      tags:
        - Tasks
      parameters:
        - in: path
          style: simple
          explode: true
          name: id
          schema:
            type: string
            description: Unique ID of the task
          required: true
          description: Unique ID of the task
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                assignee:
                  type: string
                  description: The user to which this task is assigned.
                  example: usr_NC6MQ3FyxddKoJJpfSVL
                description:
                  type: string
                  minLength: 1
                  description: Short text that describes the work to be done.
                  example: Call the member to check up on medications
                status:
                  type: string
                  enum:
                    - open
                    - resolved
                  description: The status of the task
                  example: open
                due_at:
                  type: string
                  format: date-time
                  description: The time by which this task should be completed. If no due_at date
                    is supplied, the due_at date will automatically be 24 hours
                    after the task was created. The due_at date must be in the
                    future.'
                  example: 2021-05-13T16:33:00.000Z
      responses:
        default:
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/task"
    get:
      summary: Retrieve a Task
      description: Retrieves the details of an existing task. You need only supply the
        unique task identifier that was returned upon creation.
      tags:
        - Tasks
      parameters:
        - in: path
          style: simple
          explode: true
          name: id
          schema:
            type: string
            description: Unique ID of the task
          required: true
          description: Unique ID of the task
      responses:
        default:
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/task"
components:
  securitySchemes:
    basic:
      type: http
      scheme: basic
    bearer:
      scheme: bearer
      bearerFormat: JWT
      type: http
  schemas:
    account:
      type: object
      properties:
        object:
          type: string
          default: account
          enum:
            - account
          example: account
          description: Always `account`.
        id:
          type: string
          description: Unique ID of the account.
          example: act_0EipsUv2yRFxynHshisN
        name:
          type: string
          description: Name for the account.
          example: Catalyst
        subdomain:
          type: string
          description: Subdomain for the account.
          example: catalyst
        test_secret_key:
          type: string
          description: Test mode API secret key for the account, only returned during
            account creation.
          example: sk_test_syM5mOFSRoDlzjdbNYdjfD1i3FkIzRg4gFBr9pDpGkQ8KIcdUYwnGmh9CMBw
        live_secret_key:
          type: string
          description: Live mode API secret key for the account, only returned during
            account creation.
          example: sk_live_aCCdwoJvBcpzvvX0RJtE14SRjKGJzQ5I0KFHAVHJxoxAPJSHnHergovFcY1x
        created_at:
          type: string
          format: date-time
          description: Timestamp when the account was created.
          example: 2021-05-13T16:33:00.000Z
        updated_at:
          type: string
          format: date-time
          description: Timestamp when the account was last updated.
          example: 2021-05-13T16:33:00.000Z
      required:
        - object
        - id
        - name
        - subdomain
        - created_at
        - updated_at
      title: Account
      description: This is an object representing a Catalyst account. You can retrieve
        it to see account-level properties like business name, subdomain, and
        live mode status.
    user:
      type: object
      properties:
        object:
          type: string
          default: user
          enum:
            - user
          example: user
          description: Always `user`.
        id:
          type: string
          description: Unique ID for this user.
          example: usr_0EipsUv2yRFxynHshisN
        first_name:
          type: string
          nullable: true
          description: First name of the user.
          example: John
        last_name:
          type: string
          nullable: true
          description: Last name of the user.
          example: mem_06Z9ZCYZu9HF0IGgGdZ4
        email:
          type: string
          description: Email address for the user.
          example: you@yourcompany.com
        role:
          type: string
          enum:
            - owner
            - administrator
            - developer
            - clinician
            - support
          description: Role the user is granted in your account.
          example: developer
        created_at:
          type: string
          format: date-time
          description: Timestamp when the user was created.
          example: 2021-05-13T16:33:00.000Z
        updated_at:
          type: string
          format: date-time
          description: Timestamp when the user was last updated.
          example: 2021-05-13T16:33:00.000Z
        deactivated_at:
          type: string
          format: date-time
          nullable: true
          description: Timestamp when the user was last deactivated, if they have been
            deactivated.
          example: null
      required:
        - object
        - id
        - first_name
        - last_name
        - email
        - role
        - created_at
        - updated_at
        - deactivated_at
      title: User
      description: >-
        Represents a user who has access to the Catalyst account.


        You can manage users in the Catalyst Console, and control their role which determines which resources they're able to access on the platform.
    care_team:
      type: object
      properties:
        object:
          type: string
          default: care_team
          enum:
            - care_team
          example: care_team
          description: Always `care_team`.
        id:
          type: string
          description: Unique ID of the care team.
          example: crtm_Zfj4Sl03hfvZjfFJZ492
        member:
          type: string
          nullable: true
          description: Member to which this care team is assigned.
        participants:
          type: array
          items:
            type: object
            properties:
              user:
                oneOf:
                  - type: string
                  - $ref: "#/components/schemas/user"
                x-expandable:
                  $ref: "#/components/schemas/user"
                description: The users who is on the care team.
                example: usr_NC6MQ3FyxddKoJJpfSVL
              role:
                type: string
                enum:
                  - clinician
                  - nurse
                  - dietician
                  - ob-gyn
                description: The role of this user on the care team.
            required:
              - user
              - role
          description: The users on the care team. Each user has an associated role on the
            care team (for example, nurse, endocrinologist, or health ally).
          example: []
        created_at:
          type: string
          format: date-time
          description: Timestamp of when the care team was created.
          example: 2021-05-13T16:33:00.000Z
        updated_at:
          type: string
          format: date-time
          description: Timestamp of when the care team was last updated.
          example: 2021-05-13T16:33:00.000Z
      required:
        - object
        - id
        - member
        - participants
        - created_at
        - updated_at
      title: Care Team
      description: >-
        Care teams represent the individuals who are responsible for a member's
        care.


        Each member has an empty care team resource created for them. This care team can be updated to add or remove providers, reorder them, or point to a global, shared care team that may be assigned to multiple members.


        Remember that tasks, communications, and other workflow requirements will leverage the care team to determine how they're routed.
    member:
      type: object
      properties:
        object:
          type: string
          default: member
          enum:
            - member
          example: member
          description: Always `member`.
        id:
          type: string
          description: Unique ID of the member.
          example: mem_guaeGueil6wo8gahSah8
        title:
          type: string
          nullable: true
          description: Title for the member (Mr., Mrs., Dr., etc).
        first_name:
          type: string
          description: First name of the member.
          example: Evie
        middle_name:
          type: string
          nullable: true
          description: Middle name of the member.
          example: null
        last_name:
          type: string
          description: Last name of the member.
          example: Parker
        email:
          type: string
          nullable: true
          description: Email address for the member.
          example: evieparker@example.org
        date_of_birth:
          type: string
          format: date
          description: Date of birth of the member.
          example: 1990-10-10
        biological_sex:
          type: string
          enum:
            - male
            - female
            - non_binary
            - undisclosed
          description: Biological sex of the member
          example: female
        address:
          type: object
          properties:
            street_line_1:
              type: string
              description: The first line of the street address.
              example: 1 City Point
            street_line_2:
              type: string
              nullable: true
              description: The second line of the street address.
            city:
              type: string
              description: The city.
              example: Brooklyn
            region:
              type: string
              description: The region - in the US this should be the two-letter state code.
              example: NY
            postal_code:
              type: string
              description: The postal code (i.e. zip code).
              example: "11215"
            country:
              type: string
              description: The country, as a two-letter ISO 3166-1 code. US is the only
                supported country at this time.
              example: US
          required:
            - street_line_1
            - street_line_2
            - city
            - region
            - postal_code
            - country
          nullable: true
          description: Default address for the member. Used if no address is provided on a
            specific order.
        care_team:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/care_team"
          x-expandable:
            $ref: "#/components/schemas/care_team"
          description: The care team that is assigned to this member.
          example: crtm_Zfj4Sl03hfvZjfFJZ492
        created_at:
          type: string
          format: date-time
          description: Timestamp of when the member was created.
          example: 2021-05-13T16:33:00.000Z
        updated_at:
          type: string
          format: date-time
          description: Timestamp of when the member was last updated.
          example: 2021-05-13T16:33:00.000Z
      required:
        - object
        - id
        - title
        - first_name
        - middle_name
        - last_name
        - email
        - date_of_birth
        - biological_sex
        - address
        - care_team
        - created_at
        - updated_at
      title: Member
      description: >-
        Members are people who may receive care from you.


        Most operations in the Catalyst platform center around a particular member. You can create new members at any time.
    message:
      type: object
      properties:
        object:
          type: string
          description: Always `message`.
        id:
          type: string
          description: Unique ID of this Message.
        type:
          type: string
          enum:
            - text
            - system
          description: The type of message that was sent. Text messages are messages from
            one user to another, and represent most messages sent on the
            platform. System messages are automatically generated when notable
            thread events occur (such as reassignments and status changes).
        thread:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/thread"
          x-expandable:
            $ref: "#/components/schemas/thread"
          description: Thread to which the message belongs.
          example: thrd_7BqeKrhbVU7c4Cigqs60
        text:
          type: string
          description: Plain text contents of the message.
        sender:
          anyOf:
            - oneOf:
                - type: string
                - $ref: "#/components/schemas/user"
              x-expandable:
                $ref: "#/components/schemas/user"
              description: Expandable reference to a User
              example: usr_NC6MQ3FyxddKoJJpfSVL
            - oneOf:
                - type: string
                - $ref: "#/components/schemas/member"
              x-expandable:
                $ref: "#/components/schemas/member"
              description: Expandable reference to a Member
              example: mem_JAfPRRc59eh2YQ1aeL3D
          description: The person who sent this message.
        sent_at:
          type: string
          format: date-time
          description: The time at which this message was sent.
      required:
        - object
        - id
        - type
        - thread
        - text
        - sender
        - sent_at
      title: Message
      description: >-
        Messages are exchanged between patients and their care team.


        Each thread in the communications product consists of individual messagese. Messages can be sent either from the member or their care team. You can create rich messaging experiences for your patients by building on top of our API or by using our React SDK inside your patient experience.
    thread:
      type: object
      properties:
        object:
          type: string
          default: thread
          enum:
            - thread
          example: thread
          description: Always `thread`.
        id:
          type: string
          description: Unique ID of the thread.
          example: thrd_7BqeKrhbVU7c4Cigqs60
        member:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/member"
          x-expandable:
            $ref: "#/components/schemas/member"
          description: The member to which this thread belongs.
          example: mem_JAfPRRc59eh2YQ1aeL3D
        assignee:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/user"
          x-expandable:
            $ref: "#/components/schemas/user"
          description: The user who is assigned to the thread and will be notified of new
            messages.
          example: usr_NC6MQ3FyxddKoJJpfSVL
          nullable: true
        status:
          oneOf:
            - $ref: "#/components/schemas/thread_status"
          x-wrapped: true
          description: Current status of the thread.
          example: awaiting_care_team
        subject:
          type: string
          nullable: true
          description: Subject of the thread.
          example: Not feeling well
        last_message:
          type: object
          properties:
            text:
              type: string
              description: Plain text contents of the message.
              example: I have been feeling nauseous since yesterday afternoon.
            sender:
              anyOf:
                - oneOf:
                    - type: string
                    - $ref: "#/components/schemas/user"
                  x-expandable:
                    $ref: "#/components/schemas/user"
                  description: Expandable reference to a User
                  example: usr_NC6MQ3FyxddKoJJpfSVL
                - oneOf:
                    - type: string
                    - $ref: "#/components/schemas/member"
                  x-expandable:
                    $ref: "#/components/schemas/member"
                  description: Expandable reference to a Member
                  example: mem_JAfPRRc59eh2YQ1aeL3D
              description: The person who sent this message.
            sent_at:
              type: string
              format: date-time
              description: The time at which this message was sent.
              example: 2021-05-13T16:33:00.000Z
          required:
            - text
            - sender
            - sent_at
          nullable: true
          description: "Preview of the "
        created_at:
          type: string
          format: date-time
          description: Timestamp of when the thread was created.
          example: 2021-05-13T16:33:00.000Z
        updated_at:
          type: string
          format: date-time
          description: Timestamp of when the thread was last updated.
          example: 2021-05-13T16:33:00.000Z
        closed_at:
          type: string
          format: date-time
          nullable: true
          description: Timestamp of when the thread was last closed.
          example: null
      required:
        - object
        - id
        - member
        - assignee
        - status
        - subject
        - last_message
        - created_at
        - updated_at
        - closed_at
      title: Thread
      description: >-
        The Thread resource represents a conversation between a member and/or
        their care team.


        Threads can be created at any time, and contain multiple messages. Each thread has a status indicating where it sits in the lifecycle. For more information about the different thread states, see the documentation for the status property below.
    thread_status:
      type: string
      enum:
        - awaiting_care_team
        - awaiting_member
        - closed
      x-namespace: thread
    device:
      type: object
      properties:
        object:
          type: string
          default: device
          enum:
            - device
          example: device
          description: Always `device`.
        id:
          type: string
          description: Unique ID of the device.
          example: dev_kTRoWd1awPhUoRwL78uH
        member:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/member"
          x-expandable:
            $ref: "#/components/schemas/member"
          description: Member to which this device belongs.
          example: mem_JAfPRRc59eh2YQ1aeL3D
        status:
          type: string
          enum:
            - pending
            - active
            - deactivated
          description: Current status of the device.
          example: active
        name:
          type: string
          description: Display name of the device.
          example: BodyTrace BT-105
        hardware_address:
          type: string
          nullable: true
          description: Hardware ID of the device (e.g. IMEI or MAC address)
          example: "490154203237518"
        capabilities:
          type: array
          items:
            type: string
            enum:
              - blood_pressure
              - body_weight
              - diastolic_blood_pressure
              - heart_rate
              - systolic_blood_pressure
          description: Capabilities for the device, determined by types of measurements
            the device can report.
          example:
            - blood_pressure
        last_seen_at:
          type: string
          format: date-time
          nullable: true
          description: Last time we received any data or heartbeat from the device.
          example: 2021-05-13T16:33:00.000Z
        battery_level:
          type: number
          nullable: true
          description: Last known battery level from the device, if available.
          example: 99
        created_at:
          type: string
          format: date-time
          description: Timestamp when the device was created.
          example: 2021-05-13T16:33:00.000Z
        updated_at:
          type: string
          format: date-time
          description: Timestamp when the device was last updated.
          example: 2021-05-13T16:33:00.000Z
      required:
        - object
        - id
        - member
        - status
        - name
        - hardware_address
        - capabilities
        - last_seen_at
        - battery_level
        - created_at
        - updated_at
      title: Device
      description: >-
        Devices are physical hardware capable of monitoring the health of a
        member.


        Catalyst is able to send devices to members by placing orders using the ordering API. Each time an order is fulfilled, a new device is registered on the platform. As users take measurements with their devices, those readings create new measurement resources.
    event:
      type: object
      properties:
        object:
          type: string
          default: event
          enum:
            - event
          example: event
          description: Always `event`.
        id:
          type: string
          description: Unique ID for the event.
          example: evt_KN4jugnkrxDsqH4wSFRx
        type:
          type: string
          description: Type of event.
          example: member.created
        data:
          type: object
          properties:
            object:
              description: Serialized object related to the event.
              example:
                object: member
                id: mem_JAfPRRc59eh2YQ1aeL3D
                title: null
                first_name: Evie
                middle_name: null
                last_name: Parker
                email: evieparker@example.org
                biological_sex: female
                date_of_birth: 1964-10-01T00:00:00.000Z
                address: null
                care_team: crtm_Zfj4Sl03hfvZjfFJZ492
                created_at: 2021-05-13T16:33:00.000Z
                updated_at: 2021-05-13T16:33:00.000Z
          required:
            - object
          description: Payload contained within this event.
        created_at:
          type: string
          format: date-time
          description: Timestamp when the event was created.
          example: 2021-05-13T16:33:00.000Z
      required:
        - object
        - id
        - type
        - data
        - created_at
      title: Event
      description: >-
        Events are our way of letting you know when something interesting
        happens in your account.


        When an interesting event occurs, we create a new Event object. For example, when a member is created, we create a member.created event; and when an measurement is received we create a measurement.created event.


        Note that some actions may cause multiple events to be created. For example, when a device order is fulfilled you will receive both an order.fulfilled event and a device.created event for each device sent in the order.
    webhook_events:
      type: string
      enum:
        - account.updated
        - care_team.created
        - care_team.updated
        - care_team.deleted
        - device.created
        - device.activated
        - device.deactivated
        - device.deleted
        - measurement.created
        - order.created
        - order.shipped
        - member.created
        - member.updated
        - member.deleted
        - message.created
        - task.created
        - task.updated
        - task_definition.created
        - task_definition.updated
        - thread.created
        - thread.updated
        - webhook.created
        - webhook.updated
        - webhook.deleted
    webhook:
      type: object
      properties:
        object:
          type: string
          default: webhook
          enum:
            - webhook
          example: webhook
          description: Always `webhook`.
        id:
          type: string
          description: Unique ID of the webhook.
          example: wbhk_xeechie3uqu5QuueSihi
        url:
          type: string
          pattern: (https?:\/\/)?([\w-])+\.{1}([a-zA-Z]{2,63})([/\w-]*)*\/?\??([^#\n\r]*)?#?([^\n\r]*)
          description: URL to which matching events will be delivered
          example: https://example.com/catalyst-webhook
        events:
          type: array
          items:
            $ref: "#/components/schemas/webhook_events"
          description: Events that will be delivered to the webhook.
          example:
            - account.updated
        is_enabled:
          type: boolean
          description: Whether or not the webhook is currently enabled.
          example: true
        secret:
          type: string
          description: Signing secret to verify webhook sender (only available when the
            webhook is first created).
          example: ReeheL1ooGood9Echeej
        created_at:
          type: string
          format: date-time
          description: Timestamp when the webhook was created.
          example: 2021-05-13T16:33:00.000Z
        updated_at:
          type: string
          format: date-time
          description: Timestamp when the webhook was last updated.
          example: 2021-05-13T16:33:00.000Z
      required:
        - object
        - id
        - url
        - events
        - is_enabled
        - created_at
        - updated_at
      title: Webhook
      description: >-
        Webhooks are our way of notifying you about new Events in your account.


        Once a webhook is registered and enabled, each event matching the list of subscribed events will be delivered to the endpoint you choose.
    measurement:
      type: object
      properties:
        object:
          type: string
          default: measurement
          enum:
            - measurement
          example: measurement
          description: Always `measurement`.
        id:
          type: string
          description: Unique ID of the measurement.
          example: meas_0EipsUv2yRFxynHshisN
        member:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/member"
          x-expandable:
            $ref: "#/components/schemas/member"
          description: Member to which this measurement belongs.
          example: mem_JAfPRRc59eh2YQ1aeL3D
        device:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/device"
          x-expandable:
            $ref: "#/components/schemas/device"
          description: The device that reported the reading.
          example: dev_kTRoWd1awPhUoRwL78uH
        kind:
          type: string
          enum:
            - numeric
            - composite
          description: >-
            The kind of measurement being reported, which can either be numeric
            or composite.


            If a measurement is of kind numeric, the properties value and unit will be set. If it is composite, then the items dictionary will be set.
        value:
          type: string
          description: Numeric value of this measurement (non-numeric not supported at
            this time). Catalyst always returns measurements as strings to avoid
            floating-point precision issues.
          example: "100.45"
        unit:
          type: string
          description: Unit that the measurement is reported in.
          example: lb
        type:
          type: string
          enum:
            - blood_pressure
            - body_weight
            - diastolic_blood_pressure
            - heart_rate
            - systolic_blood_pressure
          description: The type of the measurement
          example: blood_pressure
        items:
          type: object
          additionalProperties:
            type: object
            properties:
              value:
                type: string
                description: Numeric value of this measurement (non-numeric not supported at
                  this time). Catalyst always returns measurements as strings to
                  avoid floating-point precision issues.
                example: "100.45"
              unit:
                type: string
                description: Unit that the measurement is reported in.
                example: lb
            required:
              - value
              - unit
          description: Measurements included in this composite. The key of this dictionary
            will be the measurement type alias.
        time:
          type: string
          format: date-time
          description: Timestamp when the measurement was taken.
          example: 2021-05-13T16:33:00.000Z
        created_at:
          type: string
          format: date-time
          description: Timestamp when the measurement was created.
          example: 2021-05-13T16:33:00.000Z
      required:
        - object
        - id
        - member
        - device
        - kind
        - type
        - items
        - time
        - created_at
      title: Measurement
      description: >-
        Measurements are reports of objective physiological markers on a member,
        such as blood pressure, body weight, or blood glucose.


        Measurements are often created by devices that have been sent to the member, but can also be created directly via the API. Either way, measurements are stored for the member and can be viewed by clinicians with access to health data.
    order:
      type: object
      properties:
        object:
          type: string
          default: order
          enum:
            - order
          example: order
          description: Always `order`.
        id:
          type: string
          description: Unique ID for the order.
          example: ord_0EipsUv2yRFxynHshisN
        member:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/member"
          x-expandable:
            $ref: "#/components/schemas/member"
          description: The member that should receive this order.
          example: mem_JAfPRRc59eh2YQ1aeL3D
        status:
          type: string
          enum:
            - pending
            - fulfilled
            - canceled
          description: Current status of the order.
          example: pending
        shipping_address:
          type: object
          properties:
            street_line_1:
              type: string
              description: The first line of the street address.
              example: 1 City Point
            street_line_2:
              type: string
              nullable: true
              description: The second line of the street address.
            city:
              type: string
              description: The city.
              example: Brooklyn
            region:
              type: string
              description: The region - in the US this should be the two-letter state code.
              example: NY
            postal_code:
              type: string
              description: The postal code (i.e. zip code).
              example: "11215"
            country:
              type: string
              description: The country, as a two-letter ISO 3166-1 code. US is the only
                supported country at this time.
              example: US
          required:
            - street_line_1
            - street_line_2
            - city
            - region
            - postal_code
            - country
          description: Address to which the order will be shipped.
        items:
          type: array
          items:
            type: object
            properties:
              object:
                type: string
                default: order_item
                enum:
                  - order_item
                example: order_item
                description: Always `order_item`.
              id:
                type: string
                description: Unique ID of the order line item
              product:
                oneOf:
                  - type: string
                  - $ref: "#/components/schemas/product"
                x-expandable:
                  $ref: "#/components/schemas/product"
                description: Expandable reference to a Product
                example: prod_m0zvh4UpfvtRZasxVUwE
              quantity:
                type: number
                minimum: 1
                description: Quantity of this product in the line item.
                example: 1
              unit_price:
                type: number
                description: Unit price for the line item (in cents).
                example: 1500
              tax_total:
                type: number
                description: Tax amount for this line item (in cents).
                example: 500
              total:
                type: number
                description: Total amount for this line item, including taxes (in cents).
                example: 2000
            required:
              - object
              - id
              - product
              - quantity
              - unit_price
              - tax_total
              - total
          description: Items included in the order.
        fulfillment:
          type: object
          properties:
            object:
              type: string
              default: fulfillment
              enum:
                - fulfillment
              example: fulfillment
              description: Always `fulfillment`.
            id:
              type: string
              description: Unique ID of the fulfillment.
            carrier:
              type: string
              description: Carrier that was used to fulfill the order.
              example: UPS
            tracking_number:
              type: string
              description: Tracking number for the package.
              example: 1Z1982039810391830
            tracking_url:
              type: string
              description: Tracking URL to view the shipment status.
              example: https://example.com/tracking/1Z1982039810391830
            shipped_at:
              type: string
              format: date-time
              nullable: true
              description: Timestamp when the fulfillment was shipped.
          required:
            - object
            - id
            - carrier
            - tracking_number
            - tracking_url
            - shipped_at
          nullable: true
          description: Fulfillment details for the order, if it has been fulfilled.
        subtotal:
          type: number
          description: Subtotal of all items on the order, not including tax or shipping
            (in cents).
          example: 15000
        shipping_subtotal:
          type: number
          description: Shipping amount for the order (in cents).
          example: 2000
        shipping_tax:
          type: number
          description: Tax amount paid, if applicable, on shipping (in cents)
          example: 100
        tax_total:
          type: number
          description: Tax amount for the order (in cents).
          example: 1500
        total:
          type: number
          description: Total inclusive of all taxes and shipping charges (in cents).
          example: 18500
        currency:
          type: string
          description: Currency of the order, as an ISO 4217 3-letter code.
          example: USD
        created_at:
          type: string
          format: date-time
          description: Timestamp when the order was created.
          example: 2021-05-13T16:33:00.000Z
        updated_at:
          type: string
          format: date-time
          description: Timestamp when the order was last updated.
          example: 2021-05-13T16:33:00.000Z
      required:
        - object
        - id
        - member
        - status
        - shipping_address
        - items
        - fulfillment
        - subtotal
        - shipping_subtotal
        - shipping_tax
        - tax_total
        - total
        - currency
        - created_at
        - updated_at
      title: Order
    product:
      type: object
      properties:
        object:
          type: string
          default: product
          enum:
            - product
          example: product
          description: Always product.
        id:
          type: string
          description: Unique ID of the product
        name:
          type: string
          description: The human-readable name of the product
        unit_price:
          type: number
          description: Unit price of this product (in cents).
          example: 1500
        device_model:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/device_model"
          x-expandable:
            $ref: "#/components/schemas/device_model"
          description: Expandable reference to the DeviceModel
          example: devm_i34fkCzQpZM0vatw9fMn
          nullable: true
      required:
        - object
        - id
        - name
        - unit_price
        - device_model
    device_model:
      type: object
      properties:
        object:
          type: string
          default: device_model
          enum:
            - device_model
          example: device_model
          description: Always `device_model`.
        id:
          type: string
          description: Unique ID of the device model.
          example: dev_kTRoWd1awPhUoRwL78uH
        manufacturer:
          type: string
          description: Manufacturer of the device model.
          example: ACME
        model_number:
          type: string
          description: Model number of the device model
          example: BT-005
        category:
          type: string
          enum:
            - scale
            - blood_pressure_monitor
          description: Category of the device model.
          example: blood_pressure_monitor
        capabilities:
          type: array
          items:
            type: string
            enum:
              - blood_pressure
              - body_weight
              - diastolic_blood_pressure
              - heart_rate
              - systolic_blood_pressure
          description: Capabilities for the device model, determined by types of
            measurements the device can report.
          example:
            - blood_pressure
        connectivity:
          type: string
          enum:
            - cellular
            - bluetooth
          description: Connectivity type of this device model
          example: cellular
      required:
        - object
        - id
        - manufacturer
        - model_number
        - category
        - capabilities
        - connectivity
      title: Device Model
    task_definition:
      type: object
      properties:
        object:
          type: string
          default: task_definition
          enum:
            - task_definition
          example: task_definition
          description: Always `task_definition`.
        id:
          type: string
          description: Unique ID of the task definition.
          example: tskd_vlTxSr3ldEgbgX0RiQSk
        key:
          type: string
          description: Unique identifier for the task definition that can be used when
            creating tasks.
          example: follow-up
        name:
          type: string
          description: Human readable name of the task definition.
          example: Follow Up
        participantRole:
          type: string
          enum:
            - clinician
            - nurse
            - dietician
            - ob-gyn
          description: The default care team role that tasks should be assigned to.
          example: nurse
        created_at:
          type: string
          format: date-time
          description: Timestamp of when the task definition was created.
          example: 2021-05-13T16:33:00.000Z
        updated_at:
          type: string
          format: date-time
          description: Timestamp of when the task definition was last updated.
          example: 2021-05-13T16:33:00.000Z
      required:
        - object
        - id
        - key
        - name
        - participantRole
        - created_at
        - updated_at
      title: Task Definition
      description: >-
        Task definitions inform the structure of individual tasks.


        When creating a task definition, you can specify a key which can be used when creating new tasks.
    task_queue_entry:
      type: object
      properties:
        object:
          type: string
          description: Always `task_queue_entry`
        member:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/member"
          x-expandable:
            $ref: "#/components/schemas/member"
          description: The member to which the tasks belong.
          example: mem_JAfPRRc59eh2YQ1aeL3D
        tasks:
          type: array
          items:
            $ref: "#/components/schemas/task"
          description: List of open tasks outstanding for the member.
      required:
        - object
        - member
        - tasks
    task:
      type: object
      properties:
        object:
          type: string
          default: task
          enum:
            - task
          example: task
          description: Always `task`.
        id:
          type: string
          description: Unique ID of the task
        definition:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/task_definition"
          x-expandable:
            $ref: "#/components/schemas/task_definition"
          description: The type of task that needs to be completed.
          example: tskd_vlTxSr3ldEgbgX0RiQSk
        member:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/member"
          x-expandable:
            $ref: "#/components/schemas/member"
          description: The member for which the task should be performed.
          example: mem_JAfPRRc59eh2YQ1aeL3D
        assignee:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/user"
          x-expandable:
            $ref: "#/components/schemas/user"
          description: User on the care team to which this task is assigned.
          example: usr_NC6MQ3FyxddKoJJpfSVL
        description:
          type: string
          description: A human-readable string that describes the task at a high level.
            For system created tasks this field will be populated by the system.
        status:
          type: string
          enum:
            - open
            - resolved
          description: Status the task is currently in
        created_at:
          type: string
          format: date-time
          description: Timestamp of when the task was created.
          example: 2021-05-13T16:33:00.000Z
        updated_at:
          type: string
          format: date-time
          description: Timestamp of when the task was last updated.
          example: 2021-05-13T16:33:00.000Z
        due_at:
          type: string
          format: date-time
          description: The time by which this task should be completed
          example: 2021-10-10T00:10:00.000Z
      required:
        - object
        - id
        - definition
        - member
        - assignee
        - description
        - status
        - created_at
        - updated_at
        - due_at
      title: Task
      description: >-
        A Task represents a request for the care team to perform an action on
        behalf of a member. Tasks are the fundamental backbone of workflow in
        Catalyst. Any time you need to surface information to a member of the
        care team, tasks should probably be your default choice.


        Each task is backed by a task definition which gives information about the structure of the work to be done, which you can read about in the documentation for task definitions.


        Tasks can be created from any number of sources, including the API. The Catalyst platform will generate tasks itself in many cases, such as when a member sends a mesasge to their care team. When Catalyst generates a task automatically, we will also resolve it automatically when the work has been completed (for example, when the care team replies to the member.)
    error:
      type: object
      properties:
        object:
          type: string
          default: error
          enum:
            - error
          example: error
          description: Always `error`.
        type:
          type: string
          enum:
            - api_error
            - api_connection_error
            - invalid_request_error
            - authentication_error
            - authorization_error
          description: The type of error encountered.
        code:
          type: string
          description: For errors that could be handled programmatically, a short string
            indicating the error code reported.
        message:
          type: string
          description: A human-readable message providing more details about the error.
        request_id:
          type: string
          nullable: true
          description: Unique ID for the request where the error was encountered.
        meta:
          type: object
          additionalProperties: {}
          description: Additional information sent along with the error
      required:
        - object
        - type
        - code
        - message
        - request_id
      title: Error
x-readme:
  samples-languages:
    - curl
